/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var WE_C3D = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,17],$V1=[1,32],$V2=[1,22],$V3=[1,23],$V4=[1,19],$V5=[1,21],$V6=[1,30],$V7=[1,29],$V8=[1,28],$V9=[1,31],$Va=[1,24],$Vb=[1,25],$Vc=[1,26],$Vd=[1,27],$Ve=[1,33],$Vf=[1,34],$Vg=[1,35],$Vh=[1,36],$Vi=[1,37],$Vj=[1,38],$Vk=[1,39],$Vl=[1,40],$Vm=[1,42],$Vn=[1,41],$Vo=[1,2,5,19,20,28,29,31,49,54,55,56,57,63,64,66,67,68,69,70,81,82,83,84,85,86,87,88,110,111],$Vp=[1,2,5,20,28,29,31,49,54,55,56,57,63,64,66,67,68,69,70,81,82,83,84,85,86,87,88,110,111],$Vq=[1,51],$Vr=[2,123],$Vs=[1,54],$Vt=[1,49],$Vu=[1,50],$Vv=[1,72],$Vw=[1,60],$Vx=[1,102],$Vy=[1,99],$Vz=[1,97],$VA=[1,110],$VB=[1,104],$VC=[1,105],$VD=[1,106],$VE=[1,107],$VF=[1,108],$VG=[1,109],$VH=[1,91],$VI=[1,92],$VJ=[1,93],$VK=[1,2,5,19,20,28,29,31,32,49,54,55,56,57,63,64,66,67,68,69,70,76,81,82,83,84,85,86,87,88,91,110,111],$VL=[1,2,5,19,20,21,25,28,29,31,38,49,54,55,56,57,63,64,66,67,68,69,70,76,81,82,83,84,85,86,87,88,92,110,111,129,131,135,136,137,138,143,144,148,149,150,151,155,159,163],$VM=[1,130],$VN=[1,2,5,19,20,21,25,28,29,31,32,38,49,54,55,56,57,63,64,66,67,68,69,70,76,81,82,83,84,85,86,87,88,92,110,111,129,131,135,136,137,138,143,144,148,149,150,151,155,159,163],$VO=[1,2,5,19,20,21,25,28,29,31,32,38,49,54,55,56,57,63,64,66,67,68,69,70,76,81,82,83,84,85,86,87,88,91,92,110,111,129,131,135,136,137,138,143,144,148,149,150,151,155,159,163],$VP=[29,63,64],$VQ=[2,5,19,20,28,29,31,54,55,56,57,63,64,66,68,69,70,81,82,83,84,85,86,87,88,110,111],$VR=[1,142],$VS=[1,144],$VT=[1,2,5,19,20,25,28,29,31,38,49,54,55,56,57,63,64,66,67,68,69,70,76,81,82,83,84,85,86,87,88,92,110,111],$VU=[1,2,5,19,20,21,25,28,29,31,38,49,54,55,56,57,63,64,66,67,68,69,70,76,81,82,83,84,85,86,87,88,92,110,111,129,131,135,136,137,138,143,144,148,149,150,151,159,163],$VV=[1,147],$VW=[1,2,5,19,20,21,25,28,29,31,38,49,54,55,56,57,63,64,66,67,68,69,70,76,81,82,83,84,85,86,87,88,92,110,111,129,131,135,136,137,138,143,144,155,159,163],$VX=[1,148],$VY=[1,149],$VZ=[1,150],$V_=[1,151],$V$=[1,2,5,19,20,21,25,28,29,31,38,49,54,55,56,57,63,64,66,67,68,69,70,76,81,82,83,84,85,86,87,88,92,110,111,129,131,135,136,137,138,148,149,150,151,155,159,163],$V01=[1,152],$V11=[1,153],$V21=[1,2,5,19,20,21,25,28,29,31,38,49,54,55,56,57,63,64,66,67,68,69,70,76,81,82,83,84,85,86,87,88,92,110,111,135,136,137,138,143,144,148,149,150,151,155,159,163],$V31=[1,154],$V41=[1,155],$V51=[1,2,5,19,20,21,25,28,29,31,38,49,54,55,56,57,63,64,66,67,68,69,70,76,81,82,83,84,85,86,87,88,92,110,111,129,131,143,144,148,149,150,151,155,159,163],$V61=[1,156],$V71=[1,157],$V81=[1,158],$V91=[1,159],$Va1=[1,2,5,19,20,25,28,29,31,38,49,54,55,56,57,63,64,66,67,68,69,70,76,81,82,83,84,85,86,87,88,92,110,111,129,131,135,136,137,138,143,144,148,149,150,151,155,159,163],$Vb1=[1,171],$Vc1=[1,170],$Vd1=[1,178],$Ve1=[1,189],$Vf1=[1,200],$Vg1=[1,2,5,19,20,21,23,25,28,29,31,38,49,54,55,56,57,63,64,66,67,68,69,70,76,81,82,83,84,85,86,87,88,92,110,111,129,131,135,136,137,138,143,144,148,149,150,151,155,159,163],$Vh1=[29,76],$Vi1=[76,92],$Vj1=[1,235],$Vk1=[25,76],$Vl1=[1,303],$Vm1=[1,304];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"S":3,"Source1":4,"EOF":5,"Statement":6,"Declaration_statements":7,"Assignation_statements":8,"Function_statements":9,"Native_statements":10,"Block_statements":11,"If_statements":12,"Iteration_statements":13,"Return_statements":14,"Break_statements":15,"Continue_statements":16,"Switch_statements":17,"Empty_statements":18,";":19,"CONSOLE":20,".":21,"LOG":22,"(":23,"Expr":24,")":25,"Expr_statements":26,"ExprNB":27,"OPENBRACE":28,"CLOSEBRACE":29,"Source2":30,"IDENT":31,"=":32,"NEWT":33,"ARRAYS":34,"AssignmentExpr":35,"Expr1_statements":36,"TypeV":37,":":38,"Array":39,"ValStatement1":40,"initialNo":41,"AssignmentOperator":42,"+=":43,"-=":44,"*=":45,"/=":46,"^=":47,"%=":48,"FUNCTION":49,"ParameterList":50,"Type":51,"FunctionExpr":52,"Statement1":53,"CONTINUE":54,"BREAK":55,"RETURN":56,"SWITCH":57,"CaseBlock":58,"CaseClausesOpt":59,"CaseClauses1":60,"CaseClauses":61,"CaseClause":62,"CASE":63,"DEFAULT":64,"DefaultClause":65,"IF":66,"ELSE":67,"DO":68,"WHILE":69,"FOR":70,"ExprOpt":71,"INTOKEN":72,"OFTOKEN":73,"ExprNoInOpt":74,"ExprNoIn":75,",":76,"AssignmentExprNoIn":77,"AssignmentExprNoBF":78,"PM":79,"Parameter":80,"STRING":81,"NUMBERS":82,"BOOLEAN":83,"VOID":84,"VAR":85,"CONST":86,"TYPE":87,"LET":88,"ArrayList":89,"ArrayList1":90,"[":91,"]":92,"Elements":93,"Element":94,"Literal":95,"NULLTOKEN":96,"TRUETOKEN":97,"FALSETOKEN":98,"NUMBER":99,"CADENA":100,"CADENA2":101,"Property":102,"PropertyList":103,"PrimaryExpr":104,"PrimaryExprNoBrace":105,"ArrayLiteral":106,"Expr1_statement":107,"ArrList":108,"Arr":109,"PLUSPLUS":110,"MINSMINS":111,"TOUPPER":112,"TOLOWER":113,"LENGTH":114,"CONCAT":115,"CHARAT":116,"ElementList":117,"MemberExpr":118,"MemberExprNoBF":119,"CallExpr":120,"Arguments":121,"CallExprNoBF":122,"ArgumentList":123,"LeftHandSideExpr":124,"LeftHandSideExprNoBF":125,"PostfixExpr":126,"PostfixExprNoBF":127,"UnaryExprCommon":128,"+":129,"UnaryExpr":130,"-":131,"!":132,"UnaryExprNoBF":133,"MultiplicativeExpr":134,"*":135,"/":136,"POTENCIA":137,"%":138,"MultiplicativeExprNoBF":139,"AdicionExpr":140,"AdicionExprNoBF":141,"RelacionalExpr":142,"<":143,">":144,"RelacionalExprNoIn":145,"RelacionalExprNoBF":146,"IgualdadExpr":147,"EQQ":148,"NOEQQ":149,"MAQ":150,"MIQ":151,"IgualdadExprNoIn":152,"IgualdadExprNoBF":153,"LogicaYYExpr":154,"AND":155,"LogicaYYExprNoIn":156,"LogicaYYExprNoBF":157,"LogicaOOExpr":158,"OR":159,"LogicaOOExprNoIn":160,"LogicaOOExprNoBF":161,"CondicionTernariaExpr":162,"?":163,"CondicionTernariaExprNoIn":164,"CondicionTernariaExprNoBF":165,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",19:";",20:"CONSOLE",21:".",22:"LOG",23:"(",25:")",28:"OPENBRACE",29:"CLOSEBRACE",31:"IDENT",32:"=",33:"NEWT",34:"ARRAYS",38:":",43:"+=",44:"-=",45:"*=",46:"/=",47:"^=",48:"%=",49:"FUNCTION",51:"Type",54:"CONTINUE",55:"BREAK",56:"RETURN",57:"SWITCH",63:"CASE",64:"DEFAULT",66:"IF",67:"ELSE",68:"DO",69:"WHILE",70:"FOR",72:"INTOKEN",73:"OFTOKEN",76:",",81:"STRING",82:"NUMBERS",83:"BOOLEAN",84:"VOID",85:"VAR",86:"CONST",87:"TYPE",88:"LET",91:"[",92:"]",96:"NULLTOKEN",97:"TRUETOKEN",98:"FALSETOKEN",99:"NUMBER",100:"CADENA",101:"CADENA2",110:"PLUSPLUS",111:"MINSMINS",112:"TOUPPER",113:"TOLOWER",114:"LENGTH",115:"CONCAT",116:"CHARAT",129:"+",131:"-",132:"!",135:"*",136:"/",137:"POTENCIA",138:"%",143:"<",144:">",148:"EQQ",149:"NOEQQ",150:"MAQ",151:"MIQ",155:"AND",159:"OR",163:"?"},
productions_: [0,[3,1],[3,1],[4,1],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[6,1],[10,7],[10,6],[26,2],[26,1],[18,1],[11,2],[11,3],[8,7],[8,3],[8,1],[7,4],[7,2],[7,7],[7,11],[7,8],[7,6],[7,4],[40,4],[41,2],[42,1],[42,1],[42,1],[42,1],[42,1],[42,1],[42,1],[9,7],[9,8],[9,9],[9,10],[9,6],[9,7],[9,8],[9,9],[52,6],[52,7],[52,7],[52,8],[52,5],[52,7],[52,6],[52,7],[30,1],[30,2],[30,1],[53,1],[53,1],[53,1],[53,1],[53,1],[53,1],[53,1],[53,1],[53,1],[53,1],[53,1],[53,1],[16,2],[16,1],[15,2],[15,1],[14,2],[14,1],[14,3],[14,2],[17,5],[58,3],[59,0],[59,1],[61,2],[60,2],[60,1],[62,3],[62,4],[62,2],[62,3],[65,2],[65,3],[12,5],[12,7],[13,6],[13,5],[13,9],[13,8],[13,8],[71,1],[74,1],[24,1],[24,3],[75,1],[27,1],[50,1],[79,3],[79,1],[80,3],[80,1],[37,1],[37,1],[37,1],[37,1],[37,1],[37,1],[37,1],[37,1],[37,1],[89,2],[89,1],[90,2],[90,1],[90,1],[39,2],[93,3],[93,1],[94,1],[95,1],[95,1],[95,1],[95,1],[95,1],[95,1],[102,3],[102,3],[102,1],[103,1],[103,3],[104,1],[104,2],[104,3],[105,1],[105,1],[105,1],[105,3],[105,1],[107,2],[107,3],[107,2],[107,1],[108,2],[108,1],[109,3],[36,2],[36,2],[36,2],[36,2],[36,2],[36,3],[36,3],[36,3],[36,3],[36,5],[36,5],[36,3],[36,6],[36,6],[36,6],[36,6],[36,4],[36,7],[36,7],[36,4],[106,2],[106,3],[117,1],[117,3],[118,1],[118,3],[119,1],[119,3],[120,1],[120,2],[120,3],[122,1],[122,2],[122,3],[121,2],[121,3],[123,1],[123,3],[124,1],[124,1],[125,1],[125,1],[126,1],[127,1],[128,2],[128,2],[128,2],[130,1],[130,1],[133,1],[133,1],[134,1],[134,3],[134,3],[134,3],[134,3],[139,1],[139,3],[139,3],[139,3],[139,3],[140,1],[140,3],[140,3],[141,1],[141,3],[141,3],[142,1],[142,3],[142,3],[145,1],[145,3],[145,3],[146,1],[146,3],[146,3],[147,1],[147,3],[147,3],[147,3],[147,3],[152,1],[152,3],[152,3],[152,3],[152,3],[153,1],[153,3],[153,3],[153,3],[153,3],[154,1],[154,3],[156,1],[156,3],[157,1],[157,3],[158,1],[158,3],[160,1],[160,3],[161,1],[161,3],[162,1],[162,5],[164,1],[164,5],[165,1],[35,1],[77,1],[78,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

        var valor = '';
        valor += '#include <stdio.h>\n';
        valor += 'float stack[10000000]={-1};\nfloat heap[10000000] = {-1};\n';
        valor += 'float P = 0;\n float H = 0;\n'
        valor += 'float ';
        for(let k of Temp.temporales)
        {
            valor += k + ',';
        }
        valor = valor.slice(0, -1);
        valor +=' = -1;\n';
        var tabs = tab.getFunctions();
        console.log(tabs);
        for(let t of tabs)
        {
            valor += `void ${t}();\n`;
        }
        valor += '\nint main()\n{\n';
        valor += $$[$0][3];
        valor +='return 0;\n}\n\n';
        for(let f of ff)
        {
            valor += f + '\n\n';
        }
        this.$ =[];
        this.$.push(valor);
        this.$.push(errores);
        this.$.push(lexicos);
        this.$.push(sintacticos);
        this.$.push(semanticos);
        this.$.push(tab.getSimbolos());
        console.log('-----      CODIGO         ------')
        //console.log(valor);
        console.log('-----      ERRORES        ------');
        for(let m of errores)
        {
           console.log(m);
        }
        console.log('-----   ERRORES LEXICOS   ------');
        for(let m of lexicos)
        {
           console.log(m);
        }
        console.log('----- ERRORES SINTACTICOS ------');
        for(let m of sintacticos)
        {
           console.log(m);
        }
        console.log('----- ERRORES SEMANTICOS ------');
        for(let m of semanticos)
        {
           console.log(m);
        }
        console.log('----- TABLA DE SIMBOLOS  ------');
        tab.printSimbolos();
        return this.$;

break;
case 3: case 62:

        var valor = '';
        valor += $$[$0][3];
        var r = [];
        r[0] = '';
        r[1] = '';
        r[2] = '';
        r[3] = valor;
        this.$ = r;

break;
case 4: case 63:

        var valor = '';
        valor += $$[$0-1][3] + '\n';
        valor += $$[$0][3];
        var r = [];
        r[0] = '';
        r[1] = '';
        r[2] = '';
        r[3] = valor;
        this.$ = r;

break;
case 5: case 64:

        this.$ = ['','','','',''];

break;
case 6: case 7: case 9: case 10: case 13: case 14: case 15: case 65: case 66: case 67: case 68: case 71: case 72: case 73:

        var r = [];
        r[0]  = $$[$0][0];
        r[1] = $$[$0][1];
        r[2] = $$[$0][2];
        r[3] = $$[$0][3];
        this.$ = r;

break;
case 8:

        if(tab.ambitoLevel > 0) tab.ambitoLevel = tab.ambitoLevel-1;
        func = !func;
        tab.deleteAmbitoLast();
        var r = [];
        r[0]  = $$[$0][0];
        r[1] = $$[$0][1];
        r[2] = $$[$0][2];
        r[3] = $$[$0][3];
        this.$ = r;

break;
case 11:

        if(tab.ambitoLevel > 0) tab.ambitoLevel = tab.ambitoLevel-1;
        ifs = !ifs;
        tab.deleteAmbitoLast();
        entorno  = entorno.slice(3,-3);
        var r = [];
        r[0]  = $$[$0][0];
        r[1] = $$[$0][1];
        r[2] = $$[$0][2];
        r[3] = $$[$0][3];

        this.$ = r;

break;
case 12: case 70:

        if(tab.ambitoLevel > 0) tab.ambitoLevel = tab.ambitoLevel-1;
        if(fores) fores = !fores;
        if(whiles) whiles = !whiles;
        if(does) does = !does;
        tab.deleteAmbitoLast();
        entorno = entorno.slice(3,-3);
        var r = [];
        r[0]  = $$[$0][0];
        r[1] = $$[$0][1];
        r[2] = $$[$0][2];
        r[3] = $$[$0][3];
        this.$ = r;

break;
case 16: case 74:

        if(tab.ambitoLevel > 0) tab.ambitoLevel = tab.ambitoLevel-1;
        switches = !switches;
        tab.deleteAmbitoLast();
        entorno = entorno.slice(3,-3);
        var r = [];
        r[0]  = $$[$0][0];
        r[1] = $$[$0][1];
        r[2] = $$[$0][2];
        r[3] = $$[$0][3];
        this.$ = r;

break;
case 17:

         this.$ = ['','','','','','','','','',''];

break;
case 18: case 19:

        console.error('Este es un error sintáctico: ' + yytext + ', en la linea: ' + this._$.first_line + ', en la columna: ' + this._$.first_column);
        sintacticos.push('{\"token\":\"'+yytext+'\", \"linea\":\"'+this._$.first_line+'\", \"columna\":\"'+this._$.first_column+'\"}');
        this.$ = ['','','','','','','','','',''];

break;
case 20:

        var r = [];
        if($$[$0-2][0].toUpperCase() == 'ARPRINT')
        {
            r[3] = '';
            for(let val of $$[$0-2][1])
            {
                 if(val[0] == "STRING")
                 {
                     var valor = '';
                     for(var a =0; a<val[6].length;a++)
                     {
                         valor += 'printf("%c",(char)'+val[6].charCodeAt(a)+');\n';
                     }

                     r[3] += valor;
                 }
                 else if(val[0] == "NUMBER")
                 {
                     if(val[6]%1==0)
                     {
                         var valor = val[3];
                         valor += '\n';
                         valor += 'printf("%d",(int)'+val[1]+');\n';
                         r[3] += valor;
                     }
                     else
                     {
                         var valor = val[3];
                         valor += '\n';
                         valor += 'printf("%f",(float)'+val[1]+');\n';
                         r[3] += valor;
                     }
                 }
                 else if(val[0] == "FLOAT")
                 {
                     var valor = val[3];
                     valor += '\n';
                     valor += 'printf("%f",(float)'+val[1]+');\n';
                     r[3] += valor;
                 }
                 else if(val[0] == "BOOLEAN")
                 {
                     //convert ASCII
                     var valor = val[3];
                     valor += '\n';
                     var label = Label.getBandera();
                     var label1 = Label.getBandera();
                     valor += `if(${$$[$0-2][1]}==0) goto ${label};\n`;
                     valor += `printf("true");\n`;
                     valor += `goto ${label1};\n`;
                     valor += `${label}:\n`;
                     valor += `printf("false");\n`;
                     valor += `goto ${label1};\n`;
                     valor += `${label1}:\n`;
                     valor += 'printf("\\n");\n';
                     r[3] = valor;
                 }
                 else
                 {
                     if(val[4] != '')
                     {
                         var n = tab.getPositionAmbito(val[4]);
                         if(n!=null && n!=undefined)
                         {
                             if(n.rol.toUpperCase() == "ARREGLO")
                             {



                             }
                             else if(n.rol.toUpperCase() == "VARIABLE")
                             {
                                 if(n.tipo.toUpperCase() == "NUMBER")
                                 {
                                     if(n.valor%1==0)
                                     {
                                         var valor = '';
                                         valor += '\n';
                                         var temp = Temp.getTemporal();
                                         if(n.entorno == 'global')
                                         {
                                             valor = temp+' = heap['+n.position+'];';
                                             valor += '\n';
                                         }
                                         else
                                         {
                                             valor = temp+' = stack['+n.position+'];';
                                             valor += '\n';
                                         }
                                         valor += 'printf("%d",(int)'+temp+');\n';

                                         r[3] += valor;
                                     }
                                     else
                                     {
                                         var valor = '';
                                         valor += '\n';
                                         var temp = Temp.getTemporal();
                                         if(n.entorno == 'global')
                                         {
                                             valor = temp+' = heap['+n.position+'];';
                                             valor += '\n';
                                         }
                                         else
                                         {
                                             valor = temp+' = stack['+n.position+'];';
                                             valor += '\n';
                                         }
                                         valor += 'printf("%f",(float)'+temp+');\n';
                                         r[3] += valor;
                                     }

                                 }
                                 else if(n.tipo.toUpperCase() == "FLOAT")
                                 {
                                     var valor = '';
                                     valor += '\n';
                                     var temp = Temp.getTemporal();
                                        if(n.entorno == 'global')
                                         {
                                             valor = temp+' = heap['+n.position+'];';
                                             valor += '\n';
                                         }
                                         else
                                         {
                                             valor = temp+' = stack['+n.position+'];';
                                             valor += '\n';
                                         }
                                     valor += 'printf("%f",(float)'+temp+');\n';
                                     r[3] += valor;
                                 }
                                 else if(n.tipo.toUpperCase() == "STRING")
                                 {
                                     var valor = '';
                                     valor += '\n';

                                     var temp = Temp.getTemporal();
                                        if(n.entorno == 'global')
                                         {
                                             valor = temp+' = heap['+n.position+'];';
                                             valor += '\n';
                                         }
                                         else
                                         {
                                             valor = temp+' = stack['+n.position+'];';
                                             valor += '\n';
                                         }

                                     var temp1 = Temp.getTemporal();
                                     valor += '\n';
                                     valor += temp1 + '= heap[(int)'+temp+'];\n';
                                     valor += temp1 + ' = '+ temp1 + ' + 1;';

                                     var temp2  = Temp.getTemporal();
                                     valor += '\n';
                                     valor += temp2 + '= heap[(int)'+temp1+'];';

                                     var temp3 = Temp.getTemporal();
                                     valor += '\n';
                                     valor += temp3 + ' = 0;';

                                     var label = Label.getBandera();
                                     valor += '\n';
                                     valor += label + ':';
                                     var label1 = Label.getBandera();

                                     valor += '\n';
                                     valor += 'if(' + temp3 + '==' + temp2 + ') goto '+label1+';';
                                     valor += '\n';

                                     var temp4 = Temp.getTemporal();
                                     valor += temp4 + ' = ' + temp3 + ' + ' + temp1 + ';';
                                     valor += '\n';
                                     valor += temp3 + ' = ' + temp3 + ' + 1;';
                                     valor += '\n';

                                     var temp5 = Temp.getTemporal();
                                     valor += temp5 + ' = heap[(int)' + temp4 + '];';
                                     valor += '\n';
                                     valor += 'printf("%c",(char)' + temp5 + ');';
                                     valor += '\n';
                                     valor += 'goto ' + label + ';';
                                     valor += '\n';
                                     valor += label1 + ':';
                                     valor += '\n';
                                     r[3] += valor;
                                 }
                             }
                         }
                         else
                         {
                             semanticos.push('{\"valor\":\"'+`Error Semantico en la linea: ${(yylineno+1)}, no existe la variable ${val[4]}`+'\"}');
                             r[3] = '';
                         }
                     }
                 }
            }
            r[3] += 'printf("\\n");\n';
        }
        else if($$[$0-2][0].toUpperCase() == "STRING")
        {
            var valor = '';
            for(var a =0; a<$$[$0-2][6].length;a++)
            {
                valor += 'printf("%c",(char)'+$$[$0-2][6].charCodeAt(a)+');\n';
            }
            valor += 'printf("\\n");\n';
            r[3] = valor;
        }
        else if($$[$0-2][0].toUpperCase() == "NUMBER")
        {

            if(Number($$[$0-2][6])%1==0)
            {
                var valor = $$[$0-2][3];
                valor += '\n';
                valor += 'printf("%d",(int)'+$$[$0-2][1]+');\n';
                valor += 'printf("\\n");\n';
                r[3] = valor;
            }
            else
            {
                var valor = $$[$0-2][3];
                valor += '\n';
                valor += 'printf("%f",(float)'+$$[$0-2][1]+');\n';
                valor += 'printf("\\n");\n';
                r[3] = valor;
            }
        }
        else if($$[$0-2][0].toUpperCase() == "FLOAT")
        {
            var valor = $$[$0-2][3];
            valor += '\n';
            valor += 'printf("%f",(float)'+$$[$0-2][1]+');\n';
            valor += 'printf("\\n");\n';
            r[3] = valor;
        }
        else if($$[$0-2][0].toUpperCase() == "BOOLEAN")
        {
            //convert ASCII
            var valor = $$[$0-2][3];
            valor += '\n';
            var label = Label.getBandera();
            var label1 = Label.getBandera();
            valor += `if(${$$[$0-2][1]}==0) goto ${label};\n`;
            valor += `printf("true");\n`;
            valor += `goto ${label1};\n`;
            valor += `${label}:\n`;
            valor += `printf("false");\n`;
            valor += `goto ${label1};\n`;
            valor += `${label1}:\n`;
            valor += 'printf("\\n");\n';
            r[3] = valor;
        }
        else
        {
            if($$[$0-2][4] != '')
            {
                var n = tab.getPositionAmbito($$[$0-2][4]);
                if(n!=null && n!=undefined)
                {
                    if(n.rol.toUpperCase() == "ARREGLO")
                    {

                    }
                    else if(n.rol.toUpperCase() == "VARIABLE")
                    {
                        if(n.tipo.toUpperCase() == "NUMBER")
                        {
                            if(n.valor%1==0)
                            {
                                var valor = '';
                                valor += '\n';
                                var temp = Temp.getTemporal();
                                if(n.entorno == 'global')
                                 {
                                     valor = temp+' = heap['+n.position+'];';
                                     valor += '\n';
                                 }
                                 else
                                 {
                                     valor = temp+' = stack['+n.position+'];';
                                     valor += '\n';
                                 }
                                valor += 'printf("%d",(int)'+temp+');\n';
                                valor += 'printf("\\n");\n';
                                r[3] = valor;
                            }
                            else
                            {
                                var valor = '';
                                valor += '\n';
                                var temp = Temp.getTemporal();
                                if(n.entorno == 'global')
                                 {
                                     valor = temp+' = heap['+n.position+'];';
                                     valor += '\n';
                                 }
                                 else
                                 {
                                     valor = temp+' = stack['+n.position+'];';
                                     valor += '\n';
                                 }
                                valor += 'printf("%f",(float)'+temp+');\n';
                                valor += 'printf("\\n");\n';
                                r[3] = valor;
                            }

                        }
                        else if(n.tipo.toUpperCase() == "BOOLEAN")
                        {
                            var valor = '';
                            valor += '\n';
                            var temp = Temp.getTemporal();
                            var label = Label.getBandera();
                            var label1 = Label.getBandera();
                            if(n.entorno == 'global')
                             {
                                 valor = temp+' = heap['+n.position+'];';
                                 valor += '\n';
                             }
                             else
                             {
                                 valor = temp+' = stack['+n.position+'];';
                                 valor += '\n';
                             }
                            valor += `if(${temp}==0) goto ${label};\n`;
                            valor += `printf("true");\n`;
                            valor += `goto ${label1};\n`;
                            valor += `${label}:\n`;
                            valor += `printf("false");\n`;
                            valor += `goto ${label1};\n`;
                            valor += `${label1}:\n`;
                            valor += 'printf("\\n");\n';
                            r[3] = valor;

                        }
                        else if(n.tipo.toUpperCase() == "FLOAT")
                        {
                            var valor = '';
                            valor += '\n';
                            var temp = Temp.getTemporal();
                            if(n.entorno == 'global')
                             {
                                 valor = temp+' = heap['+n.position+'];';
                                 valor += '\n';
                             }
                             else
                             {
                                 valor = temp+' = stack['+n.position+'];';
                                 valor += '\n';
                             }
                            valor += 'printf("%f",(float)'+temp+');\n';
                            valor += 'printf("\\n");\n';
                            r[3] = valor;
                        }
                        else if(n.tipo.toUpperCase() == "STRING")
                        {
                            var valor = '';
                            valor += '\n';

                            var temp = Temp.getTemporal();
                            if(n.entorno == 'global')
                             {
                                 valor = temp+' = heap['+n.position+'];';
                                 valor += '\n';
                             }
                             else
                             {
                                 valor = temp+' = stack['+n.position+'];';
                                 valor += '\n';
                             }

                            var temp1 = Temp.getTemporal();
                            valor += '\n';
                            valor += temp1 + '= heap[(int)'+temp+'];\n';
                            valor += temp1 + ' = '+ temp1 + ' + 1;';

                            var temp2  = Temp.getTemporal();
                            valor += '\n';
                            valor += temp2 + '= heap[(int)'+temp1+'];';

                            var temp3 = Temp.getTemporal();
                            valor += '\n';
                            valor += temp3 + ' = 0;';

                            var label = Label.getBandera();
                            valor += '\n';
                            valor += label + ':';
                            var label1 = Label.getBandera();

                            valor += '\n';
                            valor += 'if(' + temp3 + '==' + temp2 + ') goto '+label1+';';
                            valor += '\n';

                            var temp4 = Temp.getTemporal();
                            valor += temp4 + ' = ' + temp3 + ' + ' + temp1 + ';';
                            valor += '\n';
                            valor += temp3 + ' = ' + temp3 + ' + 1;';
                            valor += '\n';

                            var temp5 = Temp.getTemporal();
                            valor += temp5 + ' = heap[(int)' + temp4 + '];';
                            valor += '\n';
                            valor += 'printf("%c",(char)' + temp5 + ');';
                            valor += '\n';
                            valor += 'goto ' + label + ';';
                            valor += '\n';
                            valor += label1 + ':';
                            valor += '\n';
                            valor += 'printf("\\n");\n';
                            r[3] = valor;
                        }
                    }
                }
                else
                {
                    semanticos.push('{\"valor\":\"'+`Error Semantico en la linea: ${(yylineno+1)}, no existe la variable ${$$[$0-2][4]}`+'\"}');
                    r[3] = '';
                }
            }
            else
            {
                r[3] = '';
            }
        }
        this.$ = r;

break;
case 21:


        var r = [];
        if($$[$0-1][0].toUpperCase() == 'ARPRINT')
        {
            r[3] = '';
            for(let val of $$[$0-1][1])
            {
                 if(val[0] == "STRING")
                 {
                     var valor = '';
                     for(var a =0; a<val[6].length;a++)
                     {
                         valor += 'printf("%c",(char)'+val[6].charCodeAt(a)+');\n';
                     }

                     r[3] += valor;
                 }
                 else if(val[0] == "NUMBER")
                 {
                     if(val[6]%1==0)
                     {
                         var valor = val[3];
                         valor += '\n';
                         valor += 'printf("%d",(int)'+val[1]+');\n';
                         r[3] += valor;
                     }
                     else
                     {
                         var valor = val[3];
                         valor += '\n';
                         valor += 'printf("%f",(float)'+val[1]+');\n';
                         r[3] += valor;
                     }
                 }
                 else if(val[0] == "FLOAT")
                 {
                     var valor = val[3];
                     valor += '\n';
                     valor += 'printf("%f",(float)'+val[1]+');\n';
                     r[3] += valor;
                 }
                 else if(val[0] == "BOOLEAN")
                 {
                     //convert ASCII
                     var valor = val[3];
                     valor += '\n';
                     var label = Label.getBandera();
                     var label1 = Label.getBandera();
                     valor += `if(${$$[$0-1][1]}==0) goto ${label};\n`;
                     valor += `printf("true");\n`;
                     valor += `goto ${label1};\n`;
                     valor += `${label}:\n`;
                     valor += `printf("false");\n`;
                     valor += `goto ${label1};\n`;
                     valor += `${label1}:\n`;
                     valor += 'printf("\\n");\n';
                     r[3] = valor;
                 }
                 else
                 {
                     if(val[4] != '')
                     {
                         var n = tab.getPositionAmbito(val[4]);
                         if(n!=null && n!=undefined)
                         {
                             if(n.rol.toUpperCase() == "ARREGLO")
                             {
                                if(n.tipo.toUpperCase == 'NUMBER')
                                {
                                    this.$ = ['','','','',''];
                                }
                                else
                                {
                                    this.$ = ['','','','',''];
                                }
                             }
                             else if(n.rol.toUpperCase() == "VARIABLE")
                             {
                                 if(n.tipo.toUpperCase() == "NUMBER")
                                 {
                                     if(n.valor%1==0)
                                     {
                                         var valor = '';
                                         valor += '\n';
                                         var temp = Temp.getTemporal();
                                         if(n.entorno == 'global')
                                         {
                                             valor = temp+' = heap['+n.position+'];';
                                             valor += '\n';
                                         }
                                         else
                                         {
                                             valor = temp+' = stack['+n.position+'];';
                                             valor += '\n';
                                         }
                                         valor += 'printf("%d",(int)'+temp+');\n';

                                         r[3] += valor;
                                     }
                                     else
                                     {
                                         var valor = '';
                                         valor += '\n';
                                         var temp = Temp.getTemporal();
                                         if(n.entorno == 'global')
                                         {
                                             valor = temp+' = heap['+n.position+'];';
                                             valor += '\n';
                                         }
                                         else
                                         {
                                             valor = temp+' = stack['+n.position+'];';
                                             valor += '\n';
                                         }
                                         valor += 'printf("%f",(float)'+temp+');\n';
                                         r[3] += valor;
                                     }

                                 }
                                 else if(n.tipo.toUpperCase() == "FLOAT")
                                 {
                                     var valor = '';
                                     valor += '\n';
                                     var temp = Temp.getTemporal();
                                        if(n.entorno == 'global')
                                         {
                                             valor = temp+' = heap['+n.position+'];';
                                             valor += '\n';
                                         }
                                         else
                                         {
                                             valor = temp+' = stack['+n.position+'];';
                                             valor += '\n';
                                         }
                                     valor += 'printf("%f",(float)'+temp+');\n';
                                     r[3] += valor;
                                 }
                                 else if(n.tipo.toUpperCase() == "STRING")
                                 {
                                     var valor = '';
                                     valor += '\n';

                                     var temp = Temp.getTemporal();
                                        if(n.entorno == 'global')
                                         {
                                             valor = temp+' = heap['+n.position+'];';
                                             valor += '\n';
                                         }
                                         else
                                         {
                                             valor = temp+' = stack['+n.position+'];';
                                             valor += '\n';
                                         }

                                     var temp1 = Temp.getTemporal();
                                     valor += '\n';
                                     valor += temp1 + '= heap[(int)'+temp+'];\n';
                                     valor += temp1 + ' = '+ temp1 + ' + 1;';

                                     var temp2  = Temp.getTemporal();
                                     valor += '\n';
                                     valor += temp2 + '= heap[(int)'+temp1+'];';

                                     var temp3 = Temp.getTemporal();
                                     valor += '\n';
                                     valor += temp3 + ' = 0;';

                                     var label = Label.getBandera();
                                     valor += '\n';
                                     valor += label + ':';
                                     var label1 = Label.getBandera();

                                     valor += '\n';
                                     valor += 'if(' + temp3 + '==' + temp2 + ') goto '+label1+';';
                                     valor += '\n';

                                     var temp4 = Temp.getTemporal();
                                     valor += temp4 + ' = ' + temp3 + ' + ' + temp1 + ';';
                                     valor += '\n';
                                     valor += temp3 + ' = ' + temp3 + ' + 1;';
                                     valor += '\n';

                                     var temp5 = Temp.getTemporal();
                                     valor += temp5 + ' = heap[(int)' + temp4 + '];';
                                     valor += '\n';
                                     valor += 'printf("%c",(char)' + temp5 + ');';
                                     valor += '\n';
                                     valor += 'goto ' + label + ';';
                                     valor += '\n';
                                     valor += label1 + ':';
                                     valor += '\n';
                                     r[3] += valor;
                                 }
                             }
                         }
                         else
                         {
                             semanticos.push('{\"valor\":\"'+`Error Semantico en la linea: ${(yylineno+1)}, no existe la variable ${val[4]}`+'\"}');
                             r[3] = '';
                         }
                     }
                 }
            }
            r[3] += 'printf("\\n");\n';
        }
        else if($$[$0-1][0].toUpperCase() == "STRING")
        {
            var valor = '';
            for(var a =0; a<$$[$0-1][6].length;a++)
            {
                valor += 'printf("%c",(char)'+$$[$0-1][6].charCodeAt(a)+');\n';
            }
            valor += 'printf("\\n");\n';
            r[3] = valor;
        }
        else if($$[$0-1][0].toUpperCase() == "NUMBER")
        {
            if($$[$0-1][6]%1==0)
            {
                var valor = $$[$0-1][3];
                valor += '\n';
                valor += 'printf("%d",(int)'+$$[$0-1][1]+');\n';
                valor += 'printf("\\n");\n';
                r[3] = valor;
            }
            else
            {
                var valor = $$[$0-1][3];
                valor += '\n';
                valor += 'printf("%f",(float)'+$$[$0-1][1]+');\n';
                valor += 'printf("\\n");\n';
                r[3] = valor;
            }
        }
        else if($$[$0-1][0].toUpperCase() == "FLOAT")
        {
            var valor = $$[$0-1][3];
            valor += '\n';
            valor += 'printf("%f",(float)'+$$[$0-1][1]+');\n';
            valor += 'printf("\\n");\n';
            r[3] = valor;
        }
        else if($$[$0-1][0].toUpperCase() == "BOOLEAN")
        {
            //convert ASCII
            var valor = $$[$0-1][3];
            valor += '\n';
            var label = Label.getBandera();
            var label1 = Label.getBandera();
            valor += `if(${$$[$0-1][1]}==0) goto ${label};\n`;
            valor += `printf("true");\n`;
            valor += `goto ${label1};\n`;
            valor += `${label}:\n`;
            valor += `printf("false");\n`;
            valor += `goto ${label1};\n`;
            valor += `${label1}:\n`;
            valor += 'printf("\\n");\n';
            r[3] = valor;
        }
        else
        {
            if($$[$0-1][4] != '')
            {
                var n = tab.getPositionAmbito($$[$0-1][4]);
                if(n!=null && n!=undefined)
                {
                    if(n.rol.toUpperCase() == "ARREGLO")
                    {
                           this.$ = ['','','',''];
                    }
                    else if(n.rol.toUpperCase() == "VARIABLE")
                    {
                        if(n.tipo.toUpperCase() == "NUMBER")
                        {
                            if(n.valor%1==0)
                            {
                                var valor = '';
                                valor += '\n';
                                var temp = Temp.getTemporal();
                                if(n.entorno == 'global')
                                 {
                                     valor = temp+' = heap['+n.position+'];';
                                     valor += '\n';
                                 }
                                 else
                                 {
                                     valor = temp+' = stack['+n.position+'];';
                                     valor += '\n';
                                 }
                                valor += 'printf("%d",(int)'+temp+');\n';
                                valor += 'printf("\\n");\n';
                                r[3] = valor;
                            }
                            else
                            {
                                var valor = '';
                                valor += '\n';
                                var temp = Temp.getTemporal();
                                if(n.entorno == 'global')
                                 {
                                     valor = temp+' = heap['+n.position+'];';
                                     valor += '\n';
                                 }
                                 else
                                 {
                                     valor = temp+' = stack['+n.position+'];';
                                     valor += '\n';
                                 }
                                valor += 'printf("%f",(float)'+temp+');\n';
                                valor += 'printf("\\n");\n';
                                r[3] = valor;
                            }

                        }
                        else if(n.tipo.toUpperCase() == "BOOLEAN")
                        {
                            var valor = '';
                            valor += '\n';
                            var temp = Temp.getTemporal();
                            var label = Label.getBandera();
                            var label1 = Label.getBandera();
                            if(n.entorno == 'global')
                             {
                                 valor = temp+' = heap['+n.position+'];';
                                 valor += '\n';
                             }
                             else
                             {
                                 valor = temp+' = stack['+n.position+'];';
                                 valor += '\n';
                             }
                            valor += `if(${temp}==0) goto ${label};\n`;
                            valor += `printf("true");\n`;
                            valor += `goto ${label1};\n`;
                            valor += `${label}:\n`;
                            valor += `printf("false");\n`;
                            valor += `goto ${label1};\n`;
                            valor += `${label1}:\n`;
                            valor += 'printf("\\n");\n';
                            r[3] = valor;

                        }
                        else if(n.tipo.toUpperCase() == "FLOAT")
                        {
                            var valor = '';
                            valor += '\n';
                            var temp = Temp.getTemporal();
                            if(n.entorno == 'global')
                             {
                                 valor = temp+' = heap['+n.position+'];';
                                 valor += '\n';
                             }
                             else
                             {
                                 valor = temp+' = stack['+n.position+'];';
                                 valor += '\n';
                             }
                            valor += 'printf("%f",(float)'+temp+');\n';
                            valor += 'printf("\\n");\n';
                            r[3] = valor;
                        }
                        else if(n.tipo.toUpperCase() == "STRING")
                        {
                            var valor = '';
                            valor += '\n';

                            var temp = Temp.getTemporal();
                            if(n.entorno == 'global')
                             {
                                 valor = temp+' = heap['+n.position+'];';
                                 valor += '\n';
                             }
                             else
                             {
                                 valor = temp+' = stack['+n.position+'];';
                                 valor += '\n';
                             }

                            var temp1 = Temp.getTemporal();
                            valor += '\n';
                            valor += temp1 + '= heap[(int)'+temp+'];\n';
                            valor += temp1 + ' = '+ temp1 + ' + 1;';

                            var temp2  = Temp.getTemporal();
                            valor += '\n';
                            valor += temp2 + '= heap[(int)'+temp1+'];';

                            var temp3 = Temp.getTemporal();
                            valor += '\n';
                            valor += temp3 + ' = 0;';

                            var label = Label.getBandera();
                            valor += '\n';
                            valor += label + ':';
                            var label1 = Label.getBandera();

                            valor += '\n';
                            valor += 'if(' + temp3 + '==' + temp2 + ') goto '+label1+';';
                            valor += '\n';

                            var temp4 = Temp.getTemporal();
                            valor += temp4 + ' = ' + temp3 + ' + ' + temp1 + ';';
                            valor += '\n';
                            valor += temp3 + ' = ' + temp3 + ' + 1;';
                            valor += '\n';

                            var temp5 = Temp.getTemporal();
                            valor += temp5 + ' = heap[(int)' + temp4 + '];';
                            valor += '\n';
                            valor += 'printf("%c",(char)' + temp5 + ');';
                            valor += '\n';
                            valor += 'goto ' + label + ';';
                            valor += '\n';
                            valor += label1 + ':';
                            valor += '\n';
                            valor += 'printf("\\n");\n';
                            r[3] = valor;
                        }
                    }
                }
                else
                {
                    semanticos.push('{\"valor\":\"'+`Error Semantico en la linea: ${(yylineno+1)}, no existe la variable ${$$[$0-1][4]}`+'\"}');
                    r[3] = '';
                }
            }
            else
            {
                r[3] = '';
            }
        }
        this.$ = r;

break;
case 22: case 26: case 151: case 159:

        this.$ = $$[$0-1];

break;
case 23: case 29: case 105: case 106: case 107: case 109: case 110: case 133: case 145: case 148: case 149: case 152: case 156: case 184: case 186: case 198: case 199: case 200: case 201: case 202: case 203: case 207: case 208: case 209: case 210: case 211: case 216: case 221: case 224: case 227: case 230: case 233: case 236: case 241: case 246: case 251: case 253: case 255: case 257: case 259: case 261: case 263: case 265: case 267: case 268: case 269: case 270:

        this.$ = $$[$0];

break;
case 24: case 25:

        this.$ = ['','','','','',''];

break;
case 27:

        var n = tab.getPositionAmbito($$[$0-6]);
        if(n!=null)
        {
            if(!n.constante)
            {
                if(n.rol.toUpperCase() == 'ARREGLO')
                {
                    var u = $$[$0-1];
                    if(u[0].toUpperCase() == 'NUMBER')
                    {
                        var valor = '';
                        valor += u[3];
                        valor += '\n';
                        var temp1 = Temp.getTemporal();
                        valor += temp1 + ' = ' + n.position +';';
                        valor += '\n';
                        var temp2 = Temp.getTemporal();
                        var temp3 = Temp.getTemporal();
                        if(n.entorno == 'global')
                        {
                            valor += temp2 + ' = heap[(int)'+temp1+'];';
                            valor += '\n';
                        }
                        else
                        {
                            valor += temp2 + ' = stack[(int)'+temp1+'];';
                            valor += '\n';
                        }


                        valor += temp3+' = heap[(int)' + temp2 +'];';
                        valor += '\n';

                        var temp4 = Temp.getTemporal();
                        valor += temp4 + ' = heap[(int)'+temp3+'];\n';
                        var label0 = Label.getBandera();
                        var label0_1 = Label.getBandera();
                        var temp5 = Temp.getTemporal();
                        var temp6 = Temp.getTemporal();
                        valor += `${temp5} = 1;\n`;
                        valor += `${label0}:\n`;
                        valor += `if(${temp5}==${temp4}) goto ${label0_1};\n`;
                        valor += `${temp6} = ${temp5} + ${temp4};\n`;
                        valor += `${temp5} = ${temp5} + 1;\n`;
                        valor += `heap[(int)${temp6}] = -1;\n`;
                        valor += `goto ${label0};\n`;
                        valor += `${label0_1}:\n`;

                        var a = new intermedia.arreglo()
                        a.name = n.name;
                        a.tipo = n.tipo;
                        a.positions.push(u[6]);
                        a.c3d = valor;
                        a.temporal = temp6;
                        a.bandera = label0_1;

                        var r = [];
                        r[3] = valor;
                        r[0] = '';
                        r[1] = temp6;
                        r[2] = label0_1;
                        r[4] = '';
                        r[5] = '';
                        r[6] = '';
                        r[7] = '';

                        n.valor = a;
                        var k = tab.update(n.name,n);
                        if(k)
                        {
                            this.$ = r;

                            for(var m = 0; m<arr.valores.length;m++)
                            {
                                if(arr.valores[m].name == n.name)
                                {
                                    arr.valores[m] = a;
                                }
                            }
                        }
                        else
                        {
                            errores.push('{\"valor\":\"'+`Error, linea ${(yylineno+1)}, no se ha logrado ejecutar la operacion;`+'\"}');
                            this.$ = ['','','',''];
                        }
                    }
                    else if(u[0] == '')
                    {
                         var n1 = tab.getPositionAmbito(u[4]);
                         if(n1!=null)
                         {
                             if(n1.tipo.toUpperCase()!='')
                             {
                                 switch(n1.tipo.toUpperCase())
                                 {
                                     case 'NUMBER':
                                        var valor = '';
                                        var temp1 = Temp.getTemporal();
                                        var temp0 = Temp.getTemporal();
                                        valor += temp0 + ' = ' + n1.position + ';\n';
                                        var temp0_1 = Temp.getTemporal();
                                        if(n1.rol == 'Parametro')
                                        {
                                            valor += temp0_1 + ' = '+n.valor+';\n';
                                        }
                                        else
                                        {
                                            if(n1.entorno == 'global')
                                            {
                                                valor += temp0_1 + ' = heap[(int)'+temp0+'];';
                                                valor += '\n';
                                            }
                                            else
                                            {
                                                valor += temp0_1 + ' = stack[(int)'+temp0+'];';
                                                valor += '\n';
                                            }
                                        }

                                        valor += temp1 + ' = ' + n.position +';';
                                        valor += '\n';
                                        var temp2 = Temp.getTemporal();
                                        var temp21 = Temp.getTemporal();
                                        if(n.entorno == 'global')
                                        {
                                            valor += temp2 +' = heap[(int)' + temp1 + '];';
                                            valor += '\n';
                                        }
                                        else
                                        {
                                            valor += temp2 +' = stack[(int)' + temp1 + '];';
                                            valor += '\n';
                                        }

                                        valor += temp21 + ' = heap[(int)' + temp2 + '];';
                                        valor += '\n';
                                        valor += temp21 + ' = ' + temp21 + ' + 1;';
                                        valor += '\n';
                                        valor += 'heap[(int)' + temp21 + '] = ' + temp0_1 + ';';
                                        valor += '\n';
                                        var temp3 = Temp.getTemporal();
                                        valor += temp3 + ' = 1;';
                                        valor += '\n';
                                        var label = Label.getBandera();
                                        var label1 = Label.getBandera();
                                        valor += label + ': ';
                                        valor += '\n';
                                        valor += '\t' + 'if( ' + temp3 + ' == ' + temp0_1 + ' ) goto ' + label1 + ';';
                                        valor += '\n';
                                        valor += '\t' + temp21 + ' = ' + temp21 + ' + 1;';
                                        valor += '\n';
                                        valor += '\t' + temp3 + ' = ' + temp3 + ' + 1;';
                                        valor += '\n';
                                        valor += '\t' + 'heap[(int)'+temp21+'] = -1;';
                                        valor += '\n';
                                        valor += '\t' + 'goto ' + label + ';';
                                        valor += '\n';
                                        valor += label1 + ': \n';

                                        var a = new intermedia.arreglo()
                                        a.name = n.name;
                                        a.tipo = n.tipo;
                                        a.positions.push(u[6]);
                                        a.c3d = valor;
                                        a.temporal = temp6;
                                        a.bandera = label0_1;

                                        var r = [];
                                        r[3] = valor;
                                        r[0] = '';
                                        r[1] = temp6;
                                        r[2] = label0_1;
                                        r[4] = '';
                                        r[5] = '';
                                        r[6] = '';
                                        r[7] = '';

                                        n.valor = a;
                                        var k = tab.update(n.name,n);
                                        if(k)
                                        {
                                            this.$ = r;

                                            for(var m = 0; m<arr.valores.length;m++)
                                            {
                                                if(arr.valores[m].name == n.name)
                                                {
                                                    arr.valores[m] = a;
                                                }
                                            }
                                        }
                                        else
                                        {
                                            errores.push('{\"valor\":\"'+`Error, linea ${(yylineno+1)}, no se ha logrado ejecutar la operacion;`+'\"}');
                                            this.$ = ['','','',''];
                                        }
                                        break;
                                     DEFAULT:
                                      semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no puedes asignar ${u[0]}, a una variable de tipo arreglo;`+'\"}');
                                      this.$ = ['','','',''];
                                      break;
                                 }
                             }
                             else
                             {
                                 semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no puedes asignar ${u[0]}, a una variable de tipo arreglo;`+'\"}');
                                 this.$ = ['','','',''];
                             }

                         }
                         else
                         {
                             semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no puedes asignar ${u[0]}, a una variable de tipo arreglo;`+'\"}');
                             this.$ = ['','','',''];
                         }
                    }
                    else
                    {
                        semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no puedes asignar un tamaño  de tipo ${u[0]};`+'\"}');
                        this.$ = ['','','',''];
                    }
                }
                else
                {
                    semanticos.push('{\"valor\":\"'+`Error Semantico en la linea: ${(yylineno+1)}, no puedes asignar arreglo a una variable de tipo ${n.tipo};`+'\"}');
                    this.$ = ['','','',''];
                }
            }
            else
            {
                semanticos.push('{\"valor\":\"'+`Error Semantico en la linea: ${(yylineno+1)}, no puedes asignarle un valor a una constante;`+'\"}');
                this.$ = ['','','',''];
            }

        }
        else
        {
            semanticos.push('{\"valor\":\"'+`Error Semantico en la linea: ${(yylineno+1)}, no existe la variable ${$$[$0-6]};`+'\"}');
            this.$ = ['','','',''];
        }

break;
case 28:

        var n = tab.getPositionAmbito($$[$0-2]);
        if(n!=null)
        {
            if($$[$0][0].toString().toUpperCase() != '')
            {
                if(n.rol.toUpperCase() == 'ARREGLO')
                {
                    if($$[$0][0] == 'ARREGLO')
                    {
                        var val = $$[$0][6].toString();
                        var valor = '';
                        var temp = Temp.getTemporal();
                        if(n.entorno == 'global')
                        {
                            valor += temp + ' = heap[' + n.position + '];';
                            valor += '\n';
                        }
                        else
                        {
                            valor += temp + ' = stack[' + n.position + '];';
                            valor += '\n';
                        }

                        var temp1 = Temp.getTemporal();
                        var temp0 = Temp.getTemporal();
                        valor += temp1 + ' = heap[(int)' + temp + '];';
                        valor += '\n';

                        var temp2 = Temp.getTemporal();
                        valor += temp2 + ' = '+ $$[$0][7] + ';';
                        valor += '\n';
                        valor += 'heap[(int)'+temp1+'] = ' + temp2 + ';';
                        valor += '\n';
                        valor += $$[$0][1] + ' = ' + temp1 + ';';
                        valor += '\n';
                        valor += $$[$0][3];
                        valor += '\n';

                        n.valor = $$[$0][6];
                        var r = [];
                        r[3] = valor;
                        r[0] = '';
                        r[1] = temp1;
                        r[2] = '';
                        r[4] = '';
                        r[5] = '';
                        r[6] = '';
                        r[7] = '';

                        $$[$0][6].name = n.name;

                        for(var m =0; m<arr.valores.length;m++)
                        {
                            if(arr.valores[m].name == n.name)
                            {
                                arr.valores[m] = $$[$0][6];
                            }
                        }

                        var k = tab.update(n.name,n);
                        if(k)
                        {
                            this.$ = r;
                        }
                        else
                        {
                            errores.push('{\"valor\":\"'+`Error, linea ${(yylineno+1)}, no se puede ejecutar la operacion.`+'\"}');
                            this.$ = ['','','',''];
                        }
                    }

                }
                else if($$[$0][0].toUpperCase() == n.tipo.toUpperCase())
                {
                    switch($$[$0][0].toString().toUpperCase())
                    {
                        case "STRING":
                            var val = $$[$0][6].toString();
                            var valor = '';
                            var temp = Temp.getTemporal();
                            if(n.entorno == 'global')
                            {
                                 valor += temp + ' = heap[' + n.position + '];';
                                 valor += '\n';
                            }
                            else
                            {
                                 valor += temp + ' = stack[' + n.position + '];';
                                 valor += '\n';
                            }

                            var temp1 = Temp.getTemporal();
                            valor += `${temp} = ${temp} + 1;\n`;
                            valor += temp1 + ' = '+ val.length + ';';
                            valor += '\n';
                            valor += 'heap[(int)'+temp+'] = ' + temp1 + ';';
                            valor += '\n';
                            valor += $$[$0][1] + ' = ' + temp + ';';
                            valor += '\n';
                            valor += $$[$0][3]+ '\n';

                            var r = [];
                            r[3] = valor;
                            r[0] = '';
                            r[1] = temp;
                            r[2] = '';
                            r[4] = '';
                            r[5] = '';
                            r[6] = '';
                            r[7] = '';


                            n.valor = $$[$0][6];
                            var k = tab.update(n.name,n);
                            if(k)
                            {
                                this.$ = r;
                            }
                            else
                            {
                                errores.push('{\"valor\":\"'+`Error, linea ${(yylineno+1)}, no se puede ejecutar la operacion.`+'\"}');
                                this.$ = ['','','',''];
                            }
                            break;

                        case "NUMBER":
                            var valor = '';
                            var temp = Temp.getTemporal();
                            valor += $$[$0][3];
                            valor += '\n';

                            if(n.entorno == 'global')
                            {
                                valor += 'heap['+ n.position + '] = ' + $$[$0][1] +';';
                                valor += '\n';
                            }
                            else
                            {
                                valor += 'stack['+ n.position + '] = ' + $$[$0][1] +';';
                                valor += '\n';
                            }

                            var r = [];
                            r[3] = valor;
                            r[0] = '';
                            r[1] = temp;
                            r[2] = '';
                            r[4] = '';
                            r[5] = '';
                            r[6] = '';
                            r[7] = '';


                            n.valor = $$[$0][6];
                            var k = tab.update(n.name,n);
                            if(k)
                            {
                                this.$ = r;
                            }
                            else
                            {
                                errores.push('{\"valor\":\"'+`Error, linea ${(yylineno+1)}, no se puede ejecutar la operacion.`+'\"}');
                                this.$ = ['','','',''];
                            }
                            break;

                        case 'BOOLEAN':
                            var valor = '';
                            var temp = Temp.getTemporal();
                            valor += $$[$0][3];
                            valor += '\n';
                            if(n.entorno == 'global')
                            {
                                valor += 'heap['+ n.position + '] = ' + $$[$0][1] +';';
                                valor += '\n';
                            }
                            else
                            {
                                valor += 'stack['+ n.position + '] = ' + $$[$0][1] +';';
                                valor += '\n';
                            }

                            var r = [];
                            r[3] = valor;
                            r[0] = '';
                            r[1] = temp;
                            r[2] = '';
                            r[4] = '';
                            r[5] = '';
                            r[6] = '';
                            r[7] = '';


                            n.valor = $$[$0][6];
                            var k = tab.update(n.name,n);
                            if(k)
                            {
                                this.$ = r;
                            }
                            else
                            {
                                errores.push('{\"valor\":\"'+`Error, linea ${(yylineno+1)}, no se puede ejecutar la operacion.`+'\"}');
                                this.$ = ['','','',''];
                            }
                            break;

                        case "FLOAT":
                            var valor = '';
                            var temp = Temp.getTemporal();
                            valor += $$[$0][3];
                            valor += '\n';
                            if(n.entorno == 'global')
                            {
                                valor += 'heap['+ n.position + '] = ' + $$[$0][1] +';';
                                valor += '\n';
                            }
                            else
                            {
                                valor += 'stack['+ n.position + '] = ' + $$[$0][1] +';';
                                valor += '\n';
                            }

                            var r = [];
                            r[3] = valor;
                            r[0] = '';
                            r[1] = temp;
                            r[2] = '';
                            r[4] = '';
                            r[5] = '';
                            r[6] = '';
                            r[7] = '';


                            n.valor = $$[$0][6];
                            var k = tab.update(n.name,n);
                            if(k)
                            {
                                this.$ = r;
                            }
                            else
                            {
                                errores.push('{\"valor\":\"'+`Error, linea ${(yylineno+1)}, no se puede ejecutar la operacion.`+'\"}');
                                this.$ = ['','','',''];
                            }
                            break;
                        DEFAULT:
                            semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no puedes asignar ${$$[$0][0]}, a una variable de tipo arreglo;`+'\"}');
                            this.$ = ['','','',''];

                    }
                }
                else
                {
                    semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no puedes asignar ${$$[$0][0]}, a una variable de tipo ${n.tipo};`+'\"}');
                    this.$ = ['','','',''];
                }

            }
            else if($$[$0][0] == '')
            {
                 var n1 = tab.getPositionAmbito($$[$0][4]);
                 if(n1!=null)
                 {
                     if(n1.tipo.toUpperCase()!='')
                     {
                        if(n1.tipo.toUpperCase() == n.tipo.toUpperCase())
                        {
                             switch(n1.tipo.toUpperCase())
                             {
                                 case 'STRING':
                                     var valor = '';
                                      var temp = Temp.getTemporal();
                                      if(n.entorno == 'global')
                                      {
                                          valor += temp + ' = heap[' + n.position + '];';
                                          valor += '\n';
                                      }
                                      else
                                      {
                                          valor += temp + ' = stack[' + n.position + '];';
                                          valor += '\n';
                                      }

                                      valor += temp + ' = ' + temp + ' + 1;\n';

                                      var temp2 = Temp.getTemporal();
                                      valor += temp2 + ' = '+ n1.valor.length + ';';
                                      valor += '\n';
                                      valor += 'heap[(int)'+temp+'] = ' + temp2 + ';';
                                      valor += '\n';

                                     for(var a = 0; a<n1.valor.length; a++)
                                     {
                                         valor += temp + ' = ' + temp + ' + 1;';
                                         valor += '\n';
                                         valor += 'heap[(int)'+temp+'] = ' + n1.valor.charCodeAt(a) + ';';
                                         valor += '\n'
                                     }

                                    var r = [];
                                    r[3] = valor;
                                    r[0] = '';
                                    r[1] = temp;
                                    r[2] = '';
                                    r[4] = '';
                                    r[5] = '';
                                    r[6] = '';
                                    r[7] = '';

                                    n.valor = n1.valor;
                                    var k = tab.update(n.name,n);
                                    if(k)
                                    {
                                        this.$ = r;
                                    }
                                    else
                                    {
                                        errores.push('{\"valor\":\"'+`Error, linea ${(yylineno+1)}, no se puede ejecutar la operacion.`+'\"}');
                                        this.$ = ['','','',''];
                                    }
                                   break;

                                 case 'NUMBER':
                                      var valor = '';
                                      var temp = Temp.getTemporal();
                                      valor += temp + ' = ' + n.position + ';';
                                      valor += '\n';
                                      var temp1 = Temp.getTemporal();
                                      if(n1.entorno == 'global')
                                      {
                                          valor += temp1 + ' = heap['+n1.position+'];';
                                          valor += '\n';
                                      }
                                      else
                                      {
                                          valor += temp1 + ' = stack['+n1.position+'];';
                                          valor += '\n';
                                      }

                                      if(n.entorno == 'global')
                                      {
                                          valor += 'heap[(int)'+ temp + '] = ' + temp1 +';';
                                          valor += '\n';
                                      }
                                      else
                                      {
                                          valor += 'stack[(int)'+ temp + '] = ' + temp1 +';';
                                          valor += '\n';
                                      }

                                      var r = [];
                                      r[3] = valor;
                                      r[0] = '';
                                      r[1] = temp;
                                      r[2] = '';
                                      r[4] = '';
                                      r[5] = '';
                                      r[6] = '';
                                      r[7] = '';


                                        n.valor = n1.valor;
                                        var k = tab.update(n.name,n);
                                        if(k)
                                        {
                                            this.$ = r;
                                        }
                                        else
                                        {
                                            errores.push('{\"valor\":\"'+`Error, linea ${(yylineno+1)}, no se puede ejecutar la operacion.`+'\"}');
                                            this.$ = ['','','',''];
                                        }
                                      break;
                                 case 'BOOLEAN':
                                      var valor = '';
                                      var temp = Temp.getTemporal();
                                      valor += temp + ' = ' + n.position + ';';
                                      valor += '\n';
                                      var temp1 = Temp.getTemporal();
                                      if(n1.entorno == 'global')
                                      {
                                          valor += temp1 + ' = heap['+n1.position+'];';
                                          valor += '\n';
                                      }
                                      else
                                      {
                                          valor += temp1 + ' = stack['+n1.position+'];';
                                          valor += '\n';
                                      }

                                      if(n.entorno == 'global')
                                      {
                                          valor += 'heap[(int)'+ temp + '] = ' + temp1 +';';
                                          valor += '\n';
                                      }
                                      else
                                      {
                                          valor += 'stack[(int)'+ temp + '] = ' + temp1 +';';
                                          valor += '\n';
                                      }

                                      var r = [];
                                      r[3] = valor;
                                      r[0] = '';
                                      r[1] = temp;
                                      r[2] = '';
                                      r[4] = '';
                                      r[5] = '';
                                      r[6] = '';
                                      r[7] = '';

                                        n.valor = n1.valor;
                                        var k = tab.update(n.name,n);
                                        if(k)
                                        {
                                            this.$ = r;
                                        }
                                        else
                                        {
                                            errores.push('{\"valor\":\"'+`Error, linea ${(yylineno+1)}, no se puede ejecutar la operacion.`+'\"}');
                                            this.$ = ['','','',''];
                                        }
                                      break;
                                 DEFAULT:
                                  semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no puedes asignar ${$$[$0][0]}.;`+'\"}');
                                  this.$ = ['','','',''];
                                  break;
                             }
                        }
                        else
                        {
                            semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no puedes asignar ${$$[$0][0]}, a una variable de tipo ${n.tipo};`+'\"}');
                            this.$ = ['','','',''];
                        }
                     }
                     else
                     {
                         semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no puedes asignar ${$$[$0][0]}, a una variable de tipo ${n.tipo};`+'\"}');
                         this.$ = ['','','',''];
                     }

                 }
                 else
                 {
                     semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no puedes asignar ${$$[$0][0]}, a una variable de tipo ${n.tipo};`+'\"}');
                     this.$ = ['','','',''];
                 }
            }
            else
            {
                semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no puedes asignar ${$$[$0][6]}, a una variable de tipo ${n.tipo};`+'\"}');
                this.$ = ['','','',''];
            }
        }
        else
        {
            semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no existe una variable con el nombre ${$$[$0-2]};`+'\"}');
            this.$ = ['','','',''];
        }

break;
case 30:

        var s =  eval('$$');
        var posd = -1;
        var att = false;
        var att1 = false;
        var att2 = false;
        var att3 = false;
        var att4 = false;
        for(var a = 0; a<s.length; a++)
        {
            if(s[a] != null)
            {
                if(s[a] == ('function') && !func)
                {
                    posd = a+1;
                    tab.ambitoLevel = tab.ambitoLevel+1;
                    func = !func;
                    var name = '';
                    if(posd!=-1) name = s[posd];
                    entorno = 'function_'+name;
                    break;
                }
                else if( s[a] == 'if' && !ifs)
                {
                    posd = a+1;
                    tab.ambitoLevel = tab.ambitoLevel+1;
                    entorno = entorno + '_if';
                    ifs = !ifs;
                    if(att) att = !att;
                    break;
                }
                else if( s[a] == 'if' && ifs )
                {
                    att = true;
                    ifs = !ifs;
                }
                else if( s[a] == 'while' && !whiles)
                {
                    posd = a+1;
                    tab.ambitoLevel = tab.ambitoLevel+1;
                    entorno = entorno + '_while';
                    whiles = !whiles;
                    if(att1) att1 = !att1;
                    break;
                }
                else if( s[a] == 'whiles' && whiles )
                {
                    att1 = true;
                    whiles = !whiles;
                }
                else if( s[a] == 'for' && !fores)
                {
                    posd = a+1;
                    tab.ambitoLevel = tab.ambitoLevel+1;
                    entorno = entorno + '_for';
                    fores = !fores;
                    if(att2) att2 = !att2;
                    break;
                }
                else if( s[a] == 'for' && fores )
                {
                    att2 = true;
                    fores = !fores;
                }
                else if( s[a].toString().toLowerCase() == 'do' && !does)
                {
                    posd = a+1;
                    tab.ambitoLevel = tab.ambitoLevel+1;
                    entorno = entorno + '_do';
                    does = !does;
                    if(att3) att3 = !att3;
                    break;
                }
                else if( s[a].toString().toLowerCase() == 'do' && does )
                {
                    att3 = true;
                    does = !does;
                }
                else if( s[a] == 'switch' && !switches)
                {
                    posd = a+1;
                    tab.ambitoLevel = tab.ambitoLevel+1;
                    entorno = entorno + '_switch';
                    switches = !switches;
                    if(att4) att4 = !att4;
                    break;
                }
                else if( s[a] == 'switch' && switches )
                {
                    att4 = true;
                    switches = !switches;
                }
            }
        }
        if(att)
        {
            ifs = !ifs;
            tab.ambitoLevel = tab.ambitoLevel+1;
        }
        if(att1)
        {
            whiles = !whiles;
            tab.ambitoLevel = tab.ambitoLevel+1;
        }
        if(att2)
        {
            fores = !fores;
            tab.ambitoLevel = tab.ambitoLevel+1;
        }
        if(att3)
        {
            does = !does;
            tab.ambitoLevel = tab.ambitoLevel+1;
        }
        if(att4)
        {
            switches = !switches;
            tab.ambitoLevel = tab.ambitoLevel+1;
        }

        var n = tab.getPositionAmbito($$[$0-2]);
        var pass = false;
        if(n==null)
        {
            pass = true;
        }
        else
        {
            if(n.ambito < tab.ambitoLevel) pass = true;
            if(n.rol == 'Parametro') pass = false;
        }

        if(pass)
        {
            if($$[$0-3].toUpperCase() == 'CONST')
            {
                semanticos.push('{\"valor\":\"'+`Error Semantico en la linea: ${(yylineno+1)}, necesita asignar un valor a una variable de tipo CONST`+'\"}');
                this.$ = ['','','',''];
            }
            else
            {
                var temp1 = Temp.getTemporal();

                var valor = '';
                valor += '\n';
                var posicion = -1;
                if(entorno == 'global')
                {
                    posicion = pos;
                    valor += temp1 + ' = ' + pos +';';
                    valor += '\n';
                    pos++;
                }
                else
                {
                    posicion = stac;
                    valor += temp1 + ' =  P;';
                    valor += '\n';
                    valor += 'P = P + 1;\n';
                    stac++;
                }
                //valor += temp1 + ' = ' + pos +';';
                //valor += '\n';
                var temp2 = Temp.getTemporal();
                if($$[$0-3].toUpperCase() == 'NUMBER')
                {
                    valor += temp2 + ' = 0;';
                }
                else if($$[$0-3].toUpperCase() == 'BOOLEAN')
                {
                    valor += temp2 + ' = 0;';
                }
                else
                {
                    valor += temp2 + ' = -1;';
                }

                if(entorno == 'global')
                {
                    valor += '\n';
                    valor += 'heap[(int)' + temp1 + '] = ' + temp2 +';';
                }
                else
                {
                    valor += '\n';
                    valor += 'stack[(int)' + temp1 + '] = ' + temp2 +';';
                }


                var r = [];
                r[3] = valor;
                r[0] = '';
                r[1] = temp2;
                r[2] = '';
                r[4] = '';
                r[5] = '';
                r[6] = '';
                r[7] = '';

                var sym = new intermedia.simbolo();
                sym.ambito = tab.ambitoLevel;
                sym.name = $$[$0-2];
                sym.position = posicion;
                sym.rol = 'variable';
                sym.direccion = posicion;
                sym.direccionrelativa = posicion;
                if(entorno != 'global')
                {
                    sym.entorno = entorno;
                }
                sym.tipo = $$[$0];
                sym.valor = null;
                tab.insert(sym);
                this.$ = r;
                //if(pos >0 && pos != 0) pos++;
                //if (pos == 0) pos++;
            }
        }
        else
        {
            semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, ya existe una variable con el nombre ${$$[$0-2]};`+'\"}');
            this.$ = ['','','',''];
        }

break;
case 31:

        var s =  eval('$$');
        var posd = -1;
        var att = false;
        var att1 = false;
        var att2 = false;
        var att3 = false;
        var att4 = false;
        for(var a = 0; a<s.length; a++)
        {
            if(s[a] != null)
            {
                if(s[a] == ('function') && !func)
                {
                    posd = a+1;
                    tab.ambitoLevel = tab.ambitoLevel+1;
                    func = !func;
                    var name = '';
                    if(posd!=-1) name = s[posd];
                    entorno = 'function_'+name;
                    break;
                }
                else if( s[a] == 'if' && !ifs)
                {
                    posd = a+1;
                    tab.ambitoLevel = tab.ambitoLevel+1;
                    entorno = entorno + '_if';
                    ifs = !ifs;
                    if(att) att = !att;
                    break;
                }
                else if( s[a] == 'if' && ifs )
                {
                    att = true;
                    ifs = !ifs;
                }
                else if( s[a] == 'while' && !whiles)
                {
                    posd = a+1;
                    tab.ambitoLevel = tab.ambitoLevel+1;
                    entorno = entorno + '_while';
                    whiles = !whiles;
                    if(att1) att1 = !att1;
                    break;
                }
                else if( s[a] == 'whiles' && whiles )
                {
                    att1 = true;
                    whiles = !whiles;
                }
                else if( s[a] == 'for' && !fores)
                {
                    posd = a+1;
                    tab.ambitoLevel = tab.ambitoLevel+1;
                    entorno = entorno + '_for';
                    fores = !fores;
                    if(att2) att2 = !att2;
                    break;
                }
                else if( s[a] == 'for' && fores )
                {
                    att2 = true;
                    fores = !fores;
                }
                else if( s[a].toString().toLowerCase() == 'do' && !does)
                {
                    posd = a+1;
                    tab.ambitoLevel = tab.ambitoLevel+1;
                    entorno = entorno + '_do';
                    does = !does;
                    if(att3) att3 = !att3;
                    break;
                }
                else if( s[a].toString().toLowerCase() == 'do' && does )
                {
                    att3 = true;
                    does = !does;
                }
                else if( s[a] == 'switch' && !switches)
                {
                    posd = a+1;
                    tab.ambitoLevel = tab.ambitoLevel+1;
                    entorno = entorno + '_switch';
                    switches = !switches;
                    if(att4) att4 = !att4;
                    break;
                }
                else if( s[a] == 'switch' && switches )
                {
                    att4 = true;
                    switches = !switches;
                }
            }
        }

        if(att)
        {
            ifs = !ifs;
            tab.ambitoLevel = tab.ambitoLevel+1;
        }
        if(att1)
        {
            whiles = !whiles;
            tab.ambitoLevel = tab.ambitoLevel+1;
        }
        if(att2)
        {
            fores = !fores;
            tab.ambitoLevel = tab.ambitoLevel+1;
        }
        if(att3)
        {
            does = !does;
            tab.ambitoLevel = tab.ambitoLevel+1;
        }
        if(att4)
        {
            switches = !switches;
            tab.ambitoLevel = tab.ambitoLevel+1;
        }

        var n = tab.getPositionAmbito($$[$0]);
        var pass = false;
        if(n==null)
        {
            pass = true;
        }
        else
        {
            if(n.ambito < tab.ambitoLevel) pass = true;
            if(n.rol == 'Parametro') pass = false;
        }

        if(pass)
        {
            if($$[$0-1].toUpperCase() == 'CONST')
            {
                semanticos.push('{\"valor\":\"'+`Error Semantico en la linea: ${(yylineno+1)}, necesita asignar un valor a una variable de tipo CONST`+'\"}');
                this.$ = ['','','',''];
            }
            else
            {
                var temp1 = Temp.getTemporal();

                var valor = '';
                valor += '\n';
                var posicion = -1;
                if(entorno == 'global')
                {
                    posicion = pos;
                    valor += temp1 + ' = ' + pos +';';
                    valor += '\n';
                    pos++;
                }
                else
                {
                    posicion = stac;
                    valor += temp1 + ' =  P;';
                    valor += '\n';
                    valor += 'P = P + 1;\n';
                    stac++;
                }
                //valor += temp1 + ' = ' + pos +';';
                //valor += '\n';
                var temp2 = Temp.getTemporal();
                if($$[$0-1].toUpperCase() == 'NUMBER')
                {
                    valor += temp2 + ' = 0;';
                }
                else if($$[$0-1].toUpperCase() == 'BOOLEAN')
                {
                    valor += temp2 + ' = 0;';
                }
                else
                {
                    valor += temp2 + ' = -1;';
                }
                valor += '\n';
                if(entorno == 'global')
                {
                    valor += 'heap[(int)' + temp1 + '] = ' + temp2 +';\n';
                }
                else
                {
                    valor += 'stack[(int)' + temp1 + '] = ' + temp2 +';\n';
                }


                var r = [];
                r[3] = valor;
                r[0] = '';
                r[1] = temp2;
                r[2] = '';
                r[4] = '';
                r[5] = '';
                r[6] = '';
                r[7] = '';

                var sym = new intermedia.simbolo();
                sym.ambito = tab.ambitoLevel;
                sym.name = $$[$0];
                sym.position = posicion;
                sym.rol = 'variable';
                sym.direccion = posicion;
                sym.direccionrelativa = posicion;
                sym.tipo = '';
                sym.valor = null;
                if(entorno != 'global')
                {
                    sym.entorno = entorno;
                }
                tab.insert(sym);
                this.$ = r;
                //if(pos >0 && pos != 0) pos++;
                //if (pos == 0) pos++;
            }
        }
        else
        {
            semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, ya existe una variable con el nombre ${$$[$0]};`+'\"}');
            this.$ = ['','','',''];
        }

break;
case 32:


        var s =  eval('$$');
        var posd = -1;
        var att = false;
        var att1 = false;
        var att2 = false;
        var att3 = false;
        var att4 = false;
        for(var a = 0; a<s.length; a++)
        {
            if(s[a] != null)
            {
                if(s[a] == ('function') && !func)
                {
                    posd = a+1;
                    tab.ambitoLevel = tab.ambitoLevel+1;
                    func = !func;
                    var name = '';
                    if(posd!=-1) name = s[posd];
                    entorno = 'function_'+name;
                    break;
                }
                else if( s[a] == 'if' && !ifs)
                {
                    posd = a+1;
                    tab.ambitoLevel = tab.ambitoLevel+1;
                    entorno = entorno + '_if';
                    ifs = !ifs;
                    if(att) att = !att;
                    break;
                }
                else if( s[a] == 'if' && ifs )
                {
                    att = true;
                    ifs = !ifs;
                }
                else if( s[a] == 'while' && !whiles)
                {
                    posd = a+1;
                    tab.ambitoLevel = tab.ambitoLevel+1;
                    entorno = entorno + '_while';
                    whiles = !whiles;
                    if(att1) att1 = !att1;
                    break;
                }
                else if( s[a] == 'whiles' && whiles )
                {
                    att1 = true;
                    whiles = !whiles;
                }
                else if( s[a] == 'for' && !fores)
                {
                    posd = a+1;
                    tab.ambitoLevel = tab.ambitoLevel+1;
                    entorno = entorno + '_for';
                    fores = !fores;
                    if(att2) att2 = !att2;
                    break;
                }
                else if( s[a] == 'for' && fores )
                {
                    att2 = true;
                    fores = !fores;
                }
                else if( s[a].toString().toLowerCase() == 'do' && !does)
                {
                    posd = a+1;
                    tab.ambitoLevel = tab.ambitoLevel+1;
                    entorno = entorno + '_do';
                    does = !does;
                    if(att3) att3 = !att3;
                    break;
                }
                else if( s[a].toString().toLowerCase() == 'do' && does )
                {
                    att3 = true;
                    does = !does;
                }
                else if( s[a] == 'switch' && !switches)
                {
                    posd = a+1;
                    tab.ambitoLevel = tab.ambitoLevel+1;
                    entorno = entorno + '_switch';
                    switches = !switches;
                    if(att4) att4 = !att4;
                    break;
                }
                else if( s[a] == 'switch' && switches )
                {
                    att4 = true;
                    switches = !switches;
                }
            }
        }
        if(att)
        {
            ifs = !ifs;
            tab.ambitoLevel = tab.ambitoLevel+1;
        }
        if(att1)
        {
            whiles = !whiles;
            tab.ambitoLevel = tab.ambitoLevel+1;
        }
        if(att2)
        {
            fores = !fores;
            tab.ambitoLevel = tab.ambitoLevel+1;
        }
        if(att3)
        {
            does = !does;
            tab.ambitoLevel = tab.ambitoLevel+1;
        }
        if(att4)
        {
            switches = !switches;
            tab.ambitoLevel = tab.ambitoLevel+1;
        }

        var n = tab.getPositionAmbito($$[$0-5]);
        var pass = false;
        if(n==null)
        {
            pass = true;
        }
        else
        {
            if(n.ambito < tab.ambitoLevel) pass = true;
            if(n.rol == 'Parametro') pass = false;
        }

        if(pass)
        {
            if($$[$0][0].toString().toUpperCase() != '')
            {
                switch($$[$0][0].toString().toUpperCase())
                {
                    case 'ARREGLO':
                        if($$[$0][8].toUpperCase() == $$[$0-3].toUpperCase())
                        {
                            var valor = '';
                            var temp = Temp.getTemporal();
                            var posicion = -1;
                            if(entorno == 'global')
                            {
                                posicion = pos;
                                valor += temp + ' = ' + pos +';';
                                valor += '\n';
                                pos++;
                            }
                            else
                            {
                                posicion = stac;
                                valor += temp + ' =  P;';
                                valor += '\n';
                                valor += 'P = P + 1;\n';
                                stac++;
                            }
                            //valor += temp + ' = ' + pos + ';';
                            //valor += '\n';

                            var temp1 = Temp.getTemporal();
                            var temp0 = Temp.getTemporal();
                            valor += temp1 + ' = ' + posA + ';';
                            valor += '\n';
                            valor += temp0+ ' = ' + posA + ';\n';
                            if(entorno == 'global')
                            {
                                valor += 'heap[(int)'+temp+'] = ' + temp1 + ';';
                            }
                            else
                            {
                                valor += 'stack[(int)'+temp+'] = ' + temp1 + ';';
                            }
                            //valor += 'stack[(int)'+temp+'] = ' + temp1 + ';';
                            valor += '\n';
                            valor += temp1 + ' = ' + temp1 + ' + 1;';
                            valor += '\n';
                            valor += 'heap[(int)'+temp0+'] = ' + temp1 + ';\n';
                            var temp2 = Temp.getTemporal();
                            valor += temp2 + ' = '+ $$[$0][7] + ';';
                            valor += '\n';
                            valor += 'heap[(int)'+temp1+'] = ' + temp2 + ';';
                            valor += '\n';
                            valor += $$[$0][1] + ' = ' + temp1 + ';';
                            valor += '\n';
                            valor += $$[$0][3];
                            valor += '\n';

                             var sym = new intermedia.simbolo();
                             sym.ambito = tab.ambitoLevel;
                             sym.name = $$[$0-5];
                             sym.position = posicion;
                             sym.rol = 'arreglo';
                             sym.direccion = posicion;
                             sym.direccionrelativa = posicion;
                             sym.tipo = ($$[$0-3][8]!='')?$$[$0][8]:$$[$0-3][0];
                             sym.valor = $$[$0][6];
                             sym.constante = ($$[$0-6].toUpperCase() == 'CONST')?true:false;
                             if(entorno != 'global')
                             {
                                 sym.entorno = entorno;
                             }
                             tab.insert(sym);

                            var r = [];
                            r[3] = valor;
                            r[0] = '';
                            r[1] = temp3;
                            r[2] = '';
                            r[4] = '';
                            r[5] = '';
                            r[6] = '';
                            r[7] = '';
                            $$[$0][6].name = $$[$0-5];

                            var a = new intermedia.arreglo()
                            a.name = $$[$0-5];
                            a.tipo = ($$[$0-3][8]!='')?$$[$0][8]:$$[$0-3][0];
                            a.positions = $$[$0][6].positions;
                            a.c3d = valor;
                            a.valor = $$[$0][6].valor;
                            a.temporal = temp3;
                            a.bandera = '';

                            arr.insert(a);


                            this.$ = r;

                            //if(pos >0 && pos != 0) pos++;
                            //if (pos == 0) pos++;
                            posA += 5000;
                        }
                        else
                        {
                            semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no puedes asignar ${$$[$0][8]}, a una variable de tipo ${$$[$0-3]};`+'\"}');
                            this.$ = ['','','','']
                        }

                        break;

                    DEFAULT:
                        semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no puedes asignar ${$$[$0][0]}, a una variable de tipo ${$$[$0-3]};`+'\"}');
                        this.$ = ['','','',''];
                        break;

                }
            }
            else
            {
                semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no puedes asignar ${$$[$0][6]}, a una variable de tipo ${$$[$0-3]};`+'\"}');
                this.$ = ['','','',''];
            }
        }
        else
        {
            semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, ya existe una variable con el nombre ${$$[$0-5]};`+'\"}');
            this.$ = ['','','',''];
        }

break;
case 33:


        var s =  eval('$$');
        var posd = -1;
        var att = false;
        var att1 = false;
        var att2 = false;
        var att3 = false;
        var att4 = false;
        for(var a = 0; a<s.length; a++)
        {
            if(s[a] != null)
            {
                if(s[a] == ('function') && !func)
                {
                    posd = a+1;
                    tab.ambitoLevel = tab.ambitoLevel+1;
                    func = !func;
                    var name = '';
                    if(posd!=-1) name = s[posd];
                    entorno = 'function_'+name;
                    break;
                }
                else if( s[a] == 'if' && !ifs)
                {
                    posd = a+1;
                    tab.ambitoLevel = tab.ambitoLevel+1;
                    entorno = entorno + '_if';
                    ifs = !ifs;
                    if(att) att = !att;
                    break;
                }
                else if( s[a] == 'if' && ifs )
                {
                    att = true;
                    ifs = !ifs;
                }
                else if( s[a] == 'while' && !whiles)
                {
                    posd = a+1;
                    tab.ambitoLevel = tab.ambitoLevel+1;
                    entorno = entorno + '_while';
                    whiles = !whiles;
                    if(att1) att1 = !att1;
                    break;
                }
                else if( s[a] == 'whiles' && whiles )
                {
                    att1 = true;
                    whiles = !whiles;
                }
                else if( s[a] == 'for' && !fores)
                {
                    posd = a+1;
                    tab.ambitoLevel = tab.ambitoLevel+1;
                    entorno = entorno + '_for';
                    fores = !fores;
                    if(att2) att2 = !att2;
                    break;
                }
                else if( s[a] == 'for' && fores )
                {
                    att2 = true;
                    fores = !fores;
                }
                else if( s[a].toString().toLowerCase() == 'do' && !does)
                {
                    posd = a+1;
                    tab.ambitoLevel = tab.ambitoLevel+1;
                    entorno = entorno + '_do';
                    does = !does;
                    if(att3) att3 = !att3;
                    break;
                }
                else if( s[a].toString().toLowerCase() == 'do' && does )
                {
                    att3 = true;
                    does = !does;
                }
                else if( s[a] == 'switch' && !switches)
                {
                    posd = a+1;
                    tab.ambitoLevel = tab.ambitoLevel+1;
                    entorno = entorno + '_switch';
                    switches = !switches;
                    if(att4) att4 = !att4;
                    break;
                }
                else if( s[a] == 'switch' && switches )
                {
                    att4 = true;
                    switches = !switches;
                }
            }
        }
        if(att)
        {
            ifs = !ifs;
            tab.ambitoLevel = tab.ambitoLevel+1;
        }
        if(att1)
        {
            whiles = !whiles;
            tab.ambitoLevel = tab.ambitoLevel+1;
        }
        if(att2)
        {
            fores = !fores;
            tab.ambitoLevel = tab.ambitoLevel+1;
        }
        if(att3)
        {
            does = !does;
            tab.ambitoLevel = tab.ambitoLevel+1;
        }
        if(att4)
        {
            switches = !switches;
            tab.ambitoLevel = tab.ambitoLevel+1;
        }

        var n = tab.getPositionAmbito($$[$0-9]);
        var pass = false;
        if(n==null)
        {
            pass = true;
        }
        else
        {
            if(n.ambito < tab.ambitoLevel) pass = true;
            if(n.rol == 'Parametro') pass = false;
        }

        if(pass)
        {
                var temp1 = Temp.getTemporal();

                var u = $$[$0-1];
                if(u[0].toUpperCase() == 'NUMBER')
                {
                    var valor = '';
                    valor += u[3];
                    valor += '\n';
                    var posicion = -1;
                    if(entorno == 'global')
                    {
                        posicion = pos;
                        valor += temp1 + ' = ' + pos +';';
                        valor += '\n';
                        pos++;
                    }
                    else
                    {
                        posicion = stac;
                        valor += temp1 + ' =  P;';
                        valor += '\n';
                        valor += 'P = P + 1;\n';
                        stac++;
                    }
                    //valor += temp1 + ' = ' + pos +';';
                    //valor += '\n';
                    var temp2 = Temp.getTemporal();
                    valor += temp2 + ' = '+posA+';';
                    valor += '\n';
                    if(entorno == 'global')
                    {
                        valor += 'heap[(int)' + temp1 + '] = ' + temp2 +';';
                        valor += '\n';
                    }
                    else
                    {
                        valor += 'stack[(int)' + temp1 + '] = ' + temp2 +';\n';
                    }
                    //valor += 'stack[(int)' + temp1 + '] = ' + temp2 +';';
                    //valor += '\n';
                    valor += 'heap[(int)' + temp2 + '] = ' + temp2 + ' + 1;';
                    valor += '\n';
                    valor = valor  + temp2 + ' = ' + temp2 + ' + 1;';
                    valor += '\n';
                    valor += 'heap[(int)' + temp2 + '] = ' + u[1] + ';';
                    valor += '\n';
                    var temp3 = Temp.getTemporal();
                    valor += temp3 + ' = 1;';
                    valor += '\n';
                    var label = Label.getBandera();
                    var label1 = Label.getBandera();
                    valor += label + ': ';
                    valor += '\n';
                    valor += '\t' + 'if( ' + temp3 + ' == ' + u[1] + ' ) goto ' + label1 + ';';
                    valor += '\n';
                    valor += '\t' + temp2 + ' = ' + temp2 + ' + 1;';
                    valor += '\n';
                    valor += '\t' + temp3 + ' = ' + temp3 + ' + 1;';
                    valor += '\n';
                    valor += '\t' + 'heap[(int)'+temp2+'] = -1;';
                    valor += '\n';
                    valor += '\t' + 'goto ' + label + ';';
                    valor += '\n';
                    valor += label1 + ': ';

                    var a = new intermedia.arreglo()
                    a.name = $$[$0-9];
                    a.tipo = $$[$0-7];
                    a.positions.push(u[6]);
                    a.c3d = valor;
                    a.temporal = temp3;
                    a.bandera = label1;

                    var r = [];
                    r[3] = valor;
                    r[0] = '';
                    r[1] = temp3;
                    r[2] = label1;
                    r[4] = '';
                    r[5] = '';
                    r[6] = '';
                    r[7] = '';

                    var sym = new intermedia.simbolo();
                    sym.ambito = tab.ambitoLevel;
                    sym.name = $$[$0-9];
                    sym.position = posicion;
                    sym.rol = 'arreglo';
                    sym.direccion = posicion;
                    sym.direccionrelativa = posicion;
                    sym.tipo = $$[$0-7];
                    sym.valor = a;
                    sym.constante = ($$[$0-10].toUpperCase() == 'CONST')?true:false;
                    if(entorno != 'global')
                    {
                        sym.entorno = entorno;
                    }
                    tab.insert(sym);

                    this.$ = r;

                    arr.insert(a);

                    //if(pos >0 && pos != 0) pos++;
                    //if (pos == 0) pos++;
                    posA += 5000;
                }
                else if(u[0] == '')
                {
                     var n = tab.getPositionAmbito(u[4]);
                     if(n!=null)
                     {
                         if(n.tipo.toUpperCase()!='')
                         {
                             switch(n.tipo.toUpperCase())
                             {
                                 case 'NUMBER':
                                    var valor = '';
                                    var temp0 = Temp.getTemporal();
                                    valor += temp0 + ' = ' + n.position + ';\n';
                                    var temp0_1 = Temp.getTemporal();
                                    if(n.rol == 'Parametro')
                                    {
                                        valor += temp0_1 + ' = ' +n.valor + ';\n';
                                    }
                                    else
                                    {
                                        if(n.entorno == 'global')
                                        {
                                             valor += temp0_1 + ' = heap[(int)'+temp0+'];';
                                        }
                                        else
                                        {
                                             valor += temp0_1 + ' = stack[(int)'+temp0+'];';
                                        }
                                    }
                                    valor += '\n';
                                    var posicion = -1;
                                    if(entorno == 'global')
                                    {
                                        posicion = pos;
                                        valor += temp1 + ' = ' + pos +';';
                                        valor += '\n';
                                        pos++;
                                    }
                                    else
                                    {
                                        posicion = stac;
                                        valor += temp1 + ' =  P;';
                                        valor += '\n';
                                        valor += 'P = P + 1;\n';
                                        stac++;
                                    }
                                    //valor += temp1 + ' = ' + pos +';';
                                    //valor += '\n';
                                    var temp2 = Temp.getTemporal();
                                    valor += temp2 + ' = '+posA+';';
                                    valor += '\n';
                                    if(entorno == 'global')
                                    {
                                        valor += 'heap[(int)' + temp1 + '] = ' + temp2 +';';
                                        valor += '\n';
                                    }
                                    else
                                    {
                                        valor += 'stack[(int)' + temp1 + '] = ' + temp2 +';';
                                        valor += '\n';
                                    }
                                    //valor += 'stack[(int)' + temp1 + '] = ' + temp2 +';';
                                    //valor += '\n';
                                    valor += 'heap[(int)' + temp2 + '] = ' + temp2 + ' + 1;';
                                    valor += '\n';
                                    valor = valor  + temp2 + ' = ' + temp2 + ' + 1;';
                                    valor += '\n';
                                    valor += 'heap[(int)' + temp2 + '] = ' + temp0_1 + ';';
                                    valor += '\n';
                                    var temp3 = Temp.getTemporal();
                                    valor += temp3 + ' = 1;';
                                    valor += '\n';
                                    var label = Label.getBandera();
                                    var label1 = Label.getBandera();
                                    valor += label + ': ';
                                    valor += '\n';
                                    valor += '\t' + 'if( ' + temp3 + ' == ' + temp0_1 + ' ) goto ' + label1 + ';';
                                    valor += '\n';
                                    valor += '\t' + temp2 + ' = ' + temp2 + ' + 1;';
                                    valor += '\n';
                                    valor += '\t' + temp3 + ' = ' + temp3 + ' + 1;';
                                    valor += '\n';
                                    valor += '\t' + 'heap[(int)'+temp2+'] = -1;';
                                    valor += '\n';
                                    valor += '\t' + 'goto ' + label + ';';
                                    valor += '\n';
                                    valor += label1 + ': ';

                                    var a = new intermedia.arreglo()
                                    a.name = $$[$0-9];
                                    a.positions.push(n.valor);
                                    a.c3d = valor;
                                    a.temporal = temp3;
                                    a.bandera = label1;
                                    a.tipo = $$[$0-10];

                                    var r = [];
                                    r[3] = valor;
                                    r[0] = '';
                                    r[1] = temp3;
                                    r[2] = label1;
                                    r[4] = '';
                                    r[5] = '';
                                    r[6] = '';
                                    r[7] = '';

                                    var sym = new intermedia.simbolo();
                                    sym.ambito = tab.ambitoLevel;
                                    sym.name = $$[$0-9];
                                    sym.position = posicion;
                                    sym.rol = 'arreglo';
                                    sym.direccion = posicion;
                                    sym.direccionrelativa = posicion;
                                    sym.tipo = $$[$0-10];
                                    if(entorno != 'global')
                                    {
                                        sym.entorno = entorno;
                                    }

                                    sym.valor = a;
                                    tab.insert(sym);

                                    this.$ = r;

                                    arr.insert(a);

                                    //if(pos >0 && pos != 0) pos++;
                                    //if (pos == 0) pos++;
                                    posA += 5000;
                                    break;
                                 DEFAULT:
                                  semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no puedes asignar ${u[0]}, a una variable de tipo arreglo;`+'\"}');
                                  this.$ = ['','','',''];
                                  break;
                             }
                         }
                         else
                         {
                             semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no puedes asignar ${u[0]}, a una variable de tipo arreglo;`+'\"}');
                             this.$ = ['','','',''];
                         }

                     }
                     else
                     {
                         semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no puedes asignar ${u[0]}, a una variable de tipo arreglo;`+'\"}');
                         this.$ = ['','','',''];
                     }
                }
                else
                {
                    semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no puedes asignar un tamaño  de tipo ${u[0]};`+'\"}');
                    this.$ = ['','','',''];
                }
        }
        else
        {
            semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, ya existe una variable con el nombre ${$$[$0-9]};`+'\"}');
            this.$ = ['','','',''];
        }

break;
case 34:


        var s =  eval('$$');
        var posd = -1;
        var att = false;
        var att1 = false;
        var att2 = false;
        var att3 = false;
        var att4 = false;
        for(var a = 0; a<s.length; a++)
        {
            if(s[a] != null)
            {
                if(s[a] == ('function') && !func)
                {
                    posd = a+1;
                    tab.ambitoLevel = tab.ambitoLevel+1;
                    func = !func;
                    var name = '';
                    if(posd!=-1) name = s[posd];
                    entorno = 'function_'+name;
                    break;
                }
                else if( s[a] == 'if' && !ifs)
                {
                    posd = a+1;
                    tab.ambitoLevel = tab.ambitoLevel+1;
                    entorno = entorno + '_if';
                    ifs = !ifs;
                    if(att) att = !att;
                    break;
                }
                else if( s[a] == 'if' && ifs )
                {
                    att = true;
                    ifs = !ifs;
                }
                else if( s[a] == 'while' && !whiles)
                {
                    posd = a+1;
                    tab.ambitoLevel = tab.ambitoLevel+1;
                    entorno = entorno + '_while';
                    whiles = !whiles;
                    if(att1) att1 = !att1;
                    break;
                }
                else if( s[a] == 'whiles' && whiles )
                {
                    att1 = true;
                    whiles = !whiles;
                }
                else if( s[a] == 'for' && !fores)
                {
                    posd = a+1;
                    tab.ambitoLevel = tab.ambitoLevel+1;
                    entorno = entorno + '_for';
                    fores = !fores;
                    if(att2) att2 = !att2;
                    break;
                }
                else if( s[a] == 'for' && fores )
                {
                    att2 = true;
                    fores = !fores;
                }
                else if( s[a].toString().toLowerCase() == 'do' && !does)
                {
                    posd = a+1;
                    tab.ambitoLevel = tab.ambitoLevel+1;
                    entorno = entorno + '_do';
                    does = !does;
                    if(att3) att3 = !att3;
                    break;
                }
                else if( s[a].toString().toLowerCase() == 'do' && does )
                {
                    att3 = true;
                    does = !does;
                }
                else if( s[a] == 'switch' && !switches)
                {
                    posd = a+1;
                    tab.ambitoLevel = tab.ambitoLevel+1;
                    entorno = entorno + '_switch';
                    switches = !switches;
                    if(att4) att4 = !att4;
                    break;
                }
                else if( s[a] == 'switch' && switches )
                {
                    att4 = true;
                    switches = !switches;
                }
            }
        }
        if(att)
        {
            ifs = !ifs;
            tab.ambitoLevel = tab.ambitoLevel+1;
        }
        if(att1)
        {
            whiles = !whiles;
            tab.ambitoLevel = tab.ambitoLevel+1;
        }
        if(att2)
        {
            fores = !fores;
            tab.ambitoLevel = tab.ambitoLevel+1;
        }
        if(att3)
        {
            does = !does;
            tab.ambitoLevel = tab.ambitoLevel+1;
        }
        if(att4)
        {
            switches = !switches;
            tab.ambitoLevel = tab.ambitoLevel+1;
        }

        var n = tab.getPositionAmbito($$[$0-6]);
        var pass = false;
        if(n==null)
        {
            pass = true;
        }
        else
        {
            if(n.ambito < tab.ambitoLevel) pass = true;
            if(n.rol == 'Parametro') pass = false;
        }

        if(pass)
        {
                var temp1 = Temp.getTemporal();

                var u = $$[$0-1];
                if(u[0].toUpperCase() == 'NUMBER')
                {
                    var valor = '';
                    valor += u[3];
                    valor += '\n';
                    var posicion = -1;
                    if(entorno == 'global')
                    {
                        posicion = pos;
                        valor += temp1 + ' = ' + pos +';';
                        valor += '\n';
                        pos++;
                    }
                    else
                    {
                        posicion = stac;
                        valor += temp1 + ' =  P;';
                        valor += '\n';
                        valor += 'P = P + 1;\n';
                        stac++;
                    }

                    //valor += temp1 + ' = ' + pos +';';
                    //valor += '\n';

                    var temp2 = Temp.getTemporal();
                    valor += temp2 + ' = '+posA+';';
                    valor += '\n';
                    if(entorno == 'global')
                    {
                        valor += 'heap[(int)' + temp1 + '] = ' + temp2 +';';
                        valor += '\n';
                    }
                    else
                    {
                        valor += 'stack[(int)' + temp1 + '] = ' + temp2 +';';
                        valor += '\n';
                    }
                    //valor += 'stack[(int)' + temp1 + '] = ' + temp2 +';';
                    //valor += '\n';
                    valor += 'heap[(int)' + temp2 + '] = ' + temp2 + ' + 1;';
                    valor += '\n';
                    valor = valor  + temp2 + ' = ' + temp2 + ' + 1;';
                    valor += '\n';
                    valor += 'heap[(int)' + temp2 + '] = ' + u[1] + ';';
                    valor += '\n';
                    var temp3 = Temp.getTemporal();
                    valor += temp3 + ' = 1;';
                    valor += '\n';
                    var label = Label.getBandera();
                    var label1 = Label.getBandera();
                    valor += label + ': ';
                    valor += '\n';
                    valor += '\t' + 'if( ' + temp3 + ' == ' + u[1] + ' ) goto ' + label1 + ';';
                    valor += '\n';
                    valor += '\t' + temp2 + ' = ' + temp2 + ' + 1;';
                    valor += '\n';
                    valor += '\t' + temp3 + ' = ' + temp3 + ' + 1;';
                    valor += '\n';
                    valor += '\t' + 'heap[(int)'+temp2+'] = -1;';
                    valor += '\n';
                    valor += '\t' + 'goto ' + label + ';';
                    valor += '\n';
                    valor += label1 + ': ';

                    var a = new intermedia.arreglo()
                    a.name = $$[$0-6];
                    a.positions.push(u[6]);
                    a.c3d = valor;
                    a.temporal = temp3;
                    a.bandera = label1;
                    a.tipo = $$[$0-7];

                    var r = [];
                    r[3] = valor;
                    r[0] = '';
                    r[1] = temp3;
                    r[2] = label1;
                    r[4] = '';
                    r[5] = '';
                    r[6] = '';
                    r[7] = '';

                    var sym = new intermedia.simbolo();
                    sym.ambito = tab.ambitoLevel;
                    sym.name = $$[$0-6];
                    sym.position = posicion;
                    sym.rol = 'arreglo';
                    sym.direccion = posicion;
                    sym.direccionrelativa = posicion;
                    sym.tipo = $$[$0-7];
                    if(entorno != 'global') sym.entorno = entorno;
                    sym.valor = a;
                    tab.insert(sym);

                    this.$ = r;

                    arr.insert(a);

                    //if(pos >0 && pos != 0) pos++;
                    //if (pos == 0) pos++;
                    posA += 5000;
                }
                else if(u[0] == '')
                {
                     var n = tab.getPositionAmbito(u[4]);
                     if(n!=null)
                     {
                         if(n.tipo.toUpperCase()!='')
                         {
                             switch(n.tipo.toUpperCase())
                             {
                                 case 'NUMBER':
                                    var valor = '';
                                    var temp0 = Temp.getTemporal();
                                    valor += temp0 + ' = ' + n.position + ';\n';
                                    var temp0_1 = Temp.getTemporal();
                                    if(n.rol == 'parametro')
                                    {
                                        valor += temp0_1 + ' = ' + n.valor + ';\n';
                                    }
                                    else
                                    {
                                        if(n.entorno == 'global')
                                        {
                                            valor += temp0_1 + ' = heap[(int)'+temp0+'];\n';

                                        }
                                        else
                                        {
                                            valor += temp0_1 + ' = stack[(int)'+temp0+'];\n';

                                        }
                                    }

                                    //valor += temp0_1 + ' = stack[(int)'+temp0+'];';
                                    //valor += '\n';
                                    //valor += temp1 + ' = ' + pos +';';
                                    var posicion = -1;
                                    if(entorno == 'global')
                                    {
                                        posicion = pos;
                                        valor += temp1 + ' = ' + pos +';';
                                        valor += '\n';
                                        pos++;
                                    }
                                    else
                                    {
                                        posicion = stac;
                                        valor += temp1 + ' =  P;';
                                        valor += '\n';
                                        valor += 'P = P + 1;\n';
                                        stac++;
                                    }
                                    valor += '\n';
                                    var temp2 = Temp.getTemporal();
                                    valor += temp2 + ' = '+posA+';';
                                    valor += '\n';
                                    if(entorno == 'global')
                                    {
                                        valor += 'heap[(int)' + temp1 + '] = ' + temp2 +';\n';
                                    }
                                    else
                                    {
                                        valor += 'stack[(int)' + temp1 + '] = ' + temp2 +';\n';
                                    }
                                    //valor += 'stack[(int)' + temp1 + '] = ' + temp2 +';';
                                    //valor += '\n';
                                    valor += 'heap[(int)' + temp2 + '] = ' + temp2 + ' + 1;';
                                    valor += '\n';
                                    valor = valor  + temp2 + ' = ' + temp2 + ' + 1;';
                                    valor += '\n';
                                    valor += 'heap[(int)' + temp2 + '] = ' + temp0_1 + ';';
                                    valor += '\n';
                                    var temp3 = Temp.getTemporal();
                                    valor += temp3 + ' = 1;';
                                    valor += '\n';
                                    var label = Label.getBandera();
                                    var label1 = Label.getBandera();
                                    valor += label + ': ';
                                    valor += '\n';
                                    valor += '\t' + 'if( ' + temp3 + ' == ' + temp0_1 + ' ) goto ' + label1 + ';';
                                    valor += '\n';
                                    valor += '\t' + temp2 + ' = ' + temp2 + ' + 1;';
                                    valor += '\n';
                                    valor += '\t' + temp3 + ' = ' + temp3 + ' + 1;';
                                    valor += '\n';
                                    valor += '\t' + 'heap[(int)'+temp2+'] = -1;';
                                    valor += '\n';
                                    valor += '\t' + 'goto ' + label + ';';
                                    valor += '\n';
                                    valor += label1 + ': ';

                                    var a = new intermedia.arreglo()
                                    a.name = $$[$0-6];
                                    a.positions.push(n.valor);
                                    a.c3d = valor;
                                    a.temporal = temp3;
                                    a.bandera = label1;
                                    a.tipo = $$[$0-7];

                                    var r = [];
                                    r[3] = valor;
                                    r[0] = '';
                                    r[1] = temp3;
                                    r[2] = label1;
                                    r[4] = '';
                                    r[5] = '';
                                    r[6] = '';
                                    r[7] = '';

                                    var sym = new intermedia.simbolo();
                                    sym.ambito = tab.ambitoLevel;
                                    sym.name = $$[$0-6];
                                    sym.position = posicion;
                                    sym.rol = 'arreglo';
                                    sym.direccion = posicion;
                                    sym.direccionrelativa = posicion;
                                    sym.tipo = $$[$0-7];
                                    if(entorno != 'global') sym.entorno = entorno;

                                    sym.valor = a;
                                    tab.insert(sym);

                                    this.$ = r;

                                    arr.insert(a);

                                    //if(pos >0 && pos != 0) pos++;
                                    //if (pos == 0) pos++;
                                    posA += 5000;
                                    break;
                                 DEFAULT:
                                  semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no puedes asignar ${u[0]}, a una variable de tipo arreglo;`+'\"}');
                                  this.$ = ['','','',''];
                                  break;
                             }
                         }
                         else
                         {
                             semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no puedes asignar ${u[0]}, a una variable de tipo arreglo;`+'\"}');
                             this.$ = ['','','',''];
                         }

                     }
                     else
                     {
                         semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no puedes asignar ${u[0]}, a una variable de tipo arreglo;`+'\"}');
                         this.$ = ['','','',''];
                     }
                }
                else
                {
                    semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no puedes asignar un tamaño  de tipo ${u[0]};`+'\"}');
                    this.$ = ['','','',''];
                }
        }
        else
        {
            semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, ya existe una variable con el nombre ${$$[$0-6]};`+'\"}');
            this.$ = ['','','',''];
        }

break;
case 35:


        var s =  eval('$$');
        var posd = -1;
        var att = false;
        var att1 = false;
        var att2 = false;
        var att3 = false;
        var att4 = false;
        for(var a = 0; a<s.length; a++)
        {
            if(s[a] != null)
            {
                if(s[a] == ('function') && !func)
                {
                    posd = a+1;
                    tab.ambitoLevel = tab.ambitoLevel+1;
                    func = !func;
                    var name = '';
                    if(posd!=-1) name = s[posd];
                    entorno = 'function_'+name;
                    break;
                }
                else if( s[a] == 'if' && !ifs)
                {
                    posd = a+1;
                    tab.ambitoLevel = tab.ambitoLevel+1;
                    entorno = entorno + '_if';
                    ifs = !ifs;
                    if(att) att = !att;
                    break;
                }
                else if( s[a] == 'if' && ifs )
                {
                    att = true;
                    ifs = !ifs;
                }
                else if( s[a] == 'while' && !whiles)
                {
                    posd = a+1;
                    tab.ambitoLevel = tab.ambitoLevel+1;
                    entorno = entorno + '_while';
                    whiles = !whiles;
                    if(att1) att1 = !att1;
                    break;
                }
                else if( s[a] == 'whiles' && whiles )
                {
                    att1 = true;
                    whiles = !whiles;
                }
                else if( s[a] == 'for' && !fores)
                {
                    posd = a+1;
                    tab.ambitoLevel = tab.ambitoLevel+1;
                    entorno = entorno + '_for';
                    fores = !fores;
                    if(att2) att2 = !att2;
                    break;
                }
                else if( s[a] == 'for' && fores )
                {
                    att2 = true;
                    fores = !fores;
                }
                else if( s[a].toString().toLowerCase() == 'do' && !does)
                {
                    posd = a+1;
                    tab.ambitoLevel = tab.ambitoLevel+1;
                    entorno = entorno + '_do';
                    does = !does;
                    if(att3) att3 = !att3;
                    break;
                }
                else if( s[a].toString().toLowerCase() == 'do' && does )
                {
                    att3 = true;
                    does = !does;
                }
                else if( s[a] == 'switch' && !switches)
                {
                    posd = a+1;
                    tab.ambitoLevel = tab.ambitoLevel+1;
                    entorno = entorno + '_switch';
                    switches = !switches;
                    if(att4) att4 = !att4;
                    break;
                }
                else if( s[a] == 'switch' && switches )
                {
                    att4 = true;
                    switches = !switches;
                }
            }
        }
        if(att)
        {
            ifs = !ifs;
            tab.ambitoLevel = tab.ambitoLevel+1;
        }
        if(att1)
        {
            whiles = !whiles;
            tab.ambitoLevel = tab.ambitoLevel+1;
        }
        if(att2)
        {
            fores = !fores;
            tab.ambitoLevel = tab.ambitoLevel+1;
        }
        if(att3)
        {
            does = !does;
            tab.ambitoLevel = tab.ambitoLevel+1;
        }
        if(att4)
        {
            switches = !switches;
            tab.ambitoLevel = tab.ambitoLevel+1;
        }

        var n = tab.getPositionAmbito($$[$0-4]);
        var pass = false;
        if(n==null)
        {
            pass = true;
        }
        else
        {
            if(n.ambito < tab.ambitoLevel) pass = true;
            if(n.rol == 'Parametro') pass = false;
        }

        if(pass)
        {
            if($$[$0-2].toUpperCase() == $$[$0][0].toUpperCase())
            {
                switch($$[$0-2].toUpperCase())
                {
                    case "STRING":
                        var val = $$[$0][6].toString();
                        var valor = '';
                        var temp = Temp.getTemporal();
                        var posicion = -1;
                        if(entorno == 'global')
                        {
                            posicion = pos;
                            valor += temp + ' = ' + pos +';';
                            valor += '\n';
                            pos++;
                        }
                        else
                        {
                            posicion = stac;
                            valor += temp + ' =  P;';
                            valor += '\n';
                            valor += 'P = P + 1;\n';
                            stac++;
                        }
                        //valor += temp + ' = ' + pos + ';';
                        var temp0 = Temp.getTemporal();
                        valor += '\n';
                        var temp1 = Temp.getTemporal();
                        valor += temp1 + ' = ' + posS + ';\n';
                        valor += temp0 + ' = ' + posS + ';';
                        valor += '\n';
                        if(entorno == 'global')
                        {
                            valor += 'heap[(int)'+temp+'] = ' + temp1 + ';';
                            valor += '\n';
                        }
                        else
                        {
                            valor += 'stack[(int)'+temp+'] = ' + temp1 + ';';
                            valor += '\n';
                        }
                       // valor += 'stack[(int)'+temp+'] = ' + temp1 + ';';
                        //valor += '\n';

                        valor += temp1 + ' = ' + temp1 + ' + 1;';
                        valor += '\n';
                        valor += 'heap[(int)'+temp0+'] = ' + temp1 + ';\n';
                        var temp2 = Temp.getTemporal();
                        valor += temp2 + ' = '+ val.length + ';';
                        valor += '\n';
                        valor += 'heap[(int)'+temp1+'] = ' + temp2 + ';';
                        valor += '\n';
                        valor += $$[$0][1] + ' = ' + temp1 + ';';
                        valor += '\n';
                        valor += $$[$0][3];

                        var r = [];
                        r[3] = valor;
                        r[0] = '';
                        r[1] = temp3;
                        r[2] = label1;
                        r[4] = '';
                        r[5] = '';
                        r[6] = '';
                        r[7] = '';

                        var sym = new intermedia.simbolo();
                        sym.ambito = tab.ambitoLevel;
                        sym.name = $$[$0-4];
                        sym.position = posicion;
                        sym.rol = 'variable';
                        sym.direccion = posicion;
                        sym.direccionrelativa = posicion;
                        sym.tipo = $$[$0-2];
                        sym.valor = $$[$0][6];
                        sym.constante = ($$[$0-5].toUpperCase() == 'CONST')?true:false;
                        if(entorno != 'global') sym.entorno = entorno;
                        tab.insert(sym);

                        this.$ = r;

                        //if(pos >0 && pos != 0) pos++;
                        //if (pos == 0) pos++;
                        posS += 5000;
                        break;

                    case "NUMBER":
                        var valor = '';
                        var temp = Temp.getTemporal();
                        var posicion = -1;
                        if(entorno == 'global')
                        {
                            posicion = pos;
                            valor += temp + ' = ' + pos +';';
                            valor += '\n';
                            pos++;
                        }
                        else
                        {
                            posicion = stac;
                            valor += temp + ' =  P;';
                            valor += '\n';
                            valor += 'P = P + 1;\n';
                            stac++;
                        }
                        //valor += temp + ' = ' + pos + ';';
                        //valor += '\n';
                        valor += $$[$0][3];
                        valor += '\n';
                        if(entorno == 'global')
                        {
                            valor += 'heap[(int)'+ temp + '] = ' + $$[$0][1] +';';
                            valor += '\n';
                        }
                        else
                        {
                            valor += 'stack[(int)'+ temp + '] = ' + $$[$0][1] +';';
                            valor += '\n';
                        }

                         var sym = new intermedia.simbolo();
                         sym.ambito = tab.ambitoLevel;
                         sym.name = $$[$0-4];
                         sym.position = posicion;
                         sym.rol = 'variable';
                         sym.direccion = posicion;
                         sym.direccionrelativa = posicion;
                         sym.tipo = $$[$0-2];
                         sym.valor = $$[$0][6];
                         sym.constante = ($$[$0-5].toUpperCase() == 'CONST')?true:false;
                         if(entorno != 'global') sym.entorno = entorno;
                         tab.insert(sym);

                        var r = [];
                        r[3] = valor;
                        r[0] = '';
                        r[1] = temp3;
                        r[2] = '';
                        r[4] = '';
                        r[5] = '';
                        r[6] = '';
                        r[7] = '';


                        this.$ = r;

                        //if(pos >0 && pos != 0) pos++;
                        //if (pos == 0) pos++;
                        break;

                    case 'BOOLEAN':
                        var valor = '';
                        var temp = Temp.getTemporal();
                        //valor += temp + ' = ' + pos + ';';
                        //valor += '\n';
                        var posicion = -1;
                        if(entorno == 'global')
                        {
                            posicion = pos;
                            valor += temp + ' = ' + pos +';';
                            valor += '\n';
                            pos++;
                        }
                        else
                        {
                            posicion = stac;
                            valor += temp + ' =  P;';
                            valor += '\n';
                            valor += 'P = P + 1;\n';
                            stac++;
                        }
                        valor += $$[$0][3];
                        valor += '\n';
                        if(entorno == 'global')
                        {
                            valor += 'heap[(int)'+ temp + '] = ' + $$[$0][1] +';';
                            valor += '\n';
                        }
                        else
                        {
                            valor += 'stack[(int)'+ temp + '] = ' + $$[$0][1] +';';
                            valor += '\n';
                        }


                         var sym = new intermedia.simbolo();
                         sym.ambito = tab.ambitoLevel;
                         sym.name = $$[$0-4];
                         sym.position = posicion;
                         sym.rol = 'variable';
                         sym.direccion = posicion;
                         sym.direccionrelativa = posicion;
                         sym.tipo = $$[$0-2];
                         sym.valor = $$[$0][6];
                         sym.constante = ($$[$0-5].toUpperCase() == 'CONST')?true:false;
                         if(entorno!='global') sym.entorno = entorno;
                         tab.insert(sym);

                        var r = [];
                        r[3] = valor;
                        r[0] = '';
                        r[1] = temp3;
                        r[2] = '';
                        r[4] = '';
                        r[5] = '';
                        r[6] = '';
                        r[7] = '';


                        this.$ = r;

                        //if(pos >0 && pos != 0) pos++;
                        //if (pos == 0) pos++;
                        break;

                    case "FLOAT":
                        var valor = '';
                        var temp = Temp.getTemporal();
                        //valor += temp + ' = ' + pos + ';';
                        //valor += '\n';
                        var posicion = -1;
                        if(entorno == 'global')
                        {
                            posicion = pos;
                            valor += temp + ' = ' + pos +';';
                            valor += '\n';
                            pos++;
                        }
                        else
                        {
                            posicion = stac;
                            valor += temp + ' =  P;';
                            valor += '\n';
                            valor += 'P = P + 1;\n';
                            stac++;
                        }
                        valor += $$[$0][3];
                        valor += '\n';
                        if(entorno == 'global')
                        {
                            valor += 'heap[(int)'+ temp + '] = ' + $$[$0][1] +';';
                            valor += '\n';
                        }
                        else
                        {
                            valor += 'stack[(int)'+ temp + '] = ' + $$[$0][1] +';';
                            valor += '\n';
                        }


                         var sym = new intermedia.simbolo();
                         sym.ambito = tab.ambitoLevel;
                         sym.name = $$[$0-4];
                         sym.position = posicion;
                         sym.rol = 'variable';
                         sym.direccion = posicion;
                         sym.direccionrelativa = posicion;
                         sym.tipo = $$[$0-2];
                         sym.valor = $$[$0][6];
                         sym.constante = ($$[$0-5].toUpperCase() == 'CONST')?true:false;
                         if(entorno != 'global') sym.entorno = entorno;
                         tab.insert(sym);

                        var r = [];
                        r[3] = valor;
                        r[0] = '';
                        r[1] = temp3;
                        r[2] = '';
                        r[4] = '';
                        r[5] = '';
                        r[6] = '';
                        r[7] = '';


                        this.$ = r;

                        //if(pos >0 && pos != 0) pos++;
                        //if (pos == 0) pos++;
                        break;

                    case 'ARREGLO':
                        semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no puedes asignar un arreglo, a una variable de tipo ${$$[$0-2]};`+'\"}');
                        this.$ = ['','','',''];
                         break;
                }
            }
            else if($$[$0][0] == '')
            {
                 var n = tab.getPositionAmbito($$[$0][4]);
                 if(n!=null)
                 {
                     if(n.tipo.toUpperCase() == $$[$0-2].toUpperCase())
                     {
                         switch(n.tipo.toUpperCase())
                         {
                             case 'STRING':
                                 var valor = '';
                                  var temp = Temp.getTemporal();
                                  //valor += temp + ' = ' + pos + ';';
                                  //valor += '\n';
                                 var posicion = -1;
                                 if(entorno == 'global')
                                 {
                                     posicion = pos;
                                     valor += temp + ' = ' + pos +';';
                                     valor += '\n';
                                     pos++;
                                 }
                                 else
                                 {
                                     posicion = stac;
                                     valor += temp + ' =  P;';
                                     valor += '\n';
                                     valor += 'P = P + 1;\n';
                                     stac++;
                                 }



                                  if(n.rol == 'parametro')
                                  {

                                      if(entorno == 'global')
                                      {
                                          valor += 'heap[(int)'+temp+'] = ' + n.valor + ';';
                                          valor += '\n';
                                      }
                                      else
                                      {
                                          valor += 'stack[(int)'+temp+'] = ' + n.valor + ';';
                                          valor += '\n';
                                      }

                                      valor += temp1 + ' = ' + temp1 + ' + 1;';
                                      valor += '\n';
                                      valor += 'heap[(int)'+temp0+'] = ' + temp1 + ';\n';
                                      var temp2 = Temp.getTemporal();
                                      valor += temp2 + ' = '+ n.valor.length + ';';
                                      valor += '\n';
                                      valor += 'heap[(int)'+temp1+'] = ' + temp2 + ';';
                                      valor += '\n';
                                  }
                                  else
                                  {
                                    var temp1 = Temp.getTemporal();
                                    valor += temp1 + ' = ' + posS + ';';
                                    valor += '\n';
                                    var temp0 = Temp.getTemporal();
                                    valor += temp0 + ' = ' + posS + ';';
                                    valor += '\n';
                                    if(entorno == 'global')
                                    {
                                        valor += 'heap[(int)'+temp+'] = ' + temp1 + ';';
                                        valor += '\n';
                                    }
                                    else
                                    {
                                        valor += 'stack[(int)'+temp+'] = ' + temp1 + ';';
                                        valor += '\n';
                                    }

                                    valor += temp1 + ' = ' + temp1 + ' + 1;';
                                    valor += '\n';
                                    valor += 'heap[(int)'+temp0+'] = ' + temp1 + ';\n';
                                    var temp2 = Temp.getTemporal();
                                    valor += temp2 + ' = '+ n.valor.length + ';';
                                    valor += '\n';
                                    valor += 'heap[(int)'+temp1+'] = ' + temp2 + ';';
                                    valor += '\n';
                                     for(var a = 0; a<n.valor.length; a++)
                                     {
                                         valor += temp1 + ' = ' + temp1 + ' + 1;';
                                         valor += '\n';
                                         valor += 'heap[(int)'+temp1+'] = ' + n.valor.charCodeAt(a) + ';';
                                         valor += '\n'
                                     }
                                  }


                               var r = [];
                               r[3] = valor;
                               r[0] = '';
                               r[1] = temp1;
                               r[2] = '';
                               r[4] = '';
                               r[5] = '';
                               r[6] = '';
                               r[7] = '';

                               var sym = new intermedia.simbolo();
                               sym.ambito = tab.ambitoLevel;
                               sym.name = $$[$0-4];
                               sym.position = posicion;
                               sym.rol = 'variable';
                               sym.direccion = posicion;
                               sym.direccionrelativa = posicion;
                               sym.tipo = $$[$0-2];
                               sym.valor = n.valor;
                               sym.constante = ($$[$0-5].toUpperCase() == 'CONST')?true:false;
                               if(entorno != 'global') sym.entorno = entorno;
                               tab.insert(sym);

                               this.$ = r;

                               //if(pos >0 && pos != 0) pos++;
                               //if (pos == 0) pos++;
                               posS += 5000;
                               break;

                             case 'NUMBER':
                                  var valor = '';
                                  var temp = Temp.getTemporal();
                                  //valor += temp + ' = ' + pos + ';';
                                  //valor += '\n';
                                  var posicion = -1;
                                  if(entorno == 'global')
                                  {
                                      posicion = pos;
                                      valor += temp + ' = ' + pos +';';
                                      valor += '\n';
                                      pos++;
                                  }
                                  else
                                  {
                                      posicion = stac;
                                      valor += temp + ' =  P;';
                                      valor += '\n';
                                      valor += 'P = P + 1;\n';
                                      stac++;
                                  }



                                  if(n.rol == 'Parametro')
                                  {
                                      if(entorno == 'global')
                                      {
                                          valor += 'heap[(int)'+ temp + '] = ' + n.valor +';';
                                          valor += '\n';
                                      }
                                      else
                                      {
                                          valor += 'stack[(int)'+ temp + '] = ' + n.valor +';';
                                          valor += '\n';
                                      }
                                  }
                                  else
                                  {
                                      var temp1 = Temp.getTemporal();
                                      if(n.entorno == 'global')
                                      {
                                          valor += temp1 + ' = heap[(int)'+n.position+'];';
                                          valor += '\n';
                                      }
                                      else
                                      {
                                          valor += temp1 + ' = stack[(int)'+n.position+'];';
                                          valor += '\n';
                                      }
                                      if(entorno == 'global')
                                      {
                                          valor += 'heap[(int)'+ temp + '] = ' + temp1 +';';
                                          valor += '\n';
                                      }
                                      else
                                      {
                                          valor += 'stack[(int)'+ temp + '] = ' + temp1 +';';
                                          valor += '\n';
                                      }
                                  }


                                   var sym = new intermedia.simbolo();
                                   sym.ambito = tab.ambitoLevel;
                                   sym.name = $$[$0-4];
                                   sym.position = posicion;
                                   sym.rol = 'variable';
                                   sym.direccion = posicion;
                                   sym.direccionrelativa = posicion;
                                   sym.tipo = $$[$0-2];
                                   sym.valor = n.valor;
                                   sym.constante = ($$[$0-5].toUpperCase() == 'CONST')?true:false;
                                   if(entorno != 'global') sym.entorno = entorno;
                                   tab.insert(sym);

                                  var r = [];
                                  r[3] = valor;
                                  r[0] = '';
                                  r[1] = temp1;
                                  r[2] = '';
                                  r[4] = '';
                                  r[5] = '';
                                  r[6] = '';
                                  r[7] = '';


                                  this.$ = r;

                                  //if(pos >0 && pos != 0) pos++;
                                  //if (pos == 0) pos++;
                                  break;

                             case 'BOOLEAN':
                                  var valor = '';
                                  var temp = Temp.getTemporal();
                                  //valor += temp + ' = ' + pos + ';';
                                  //valor += '\n';
                                  var posicion = -1;
                                  if(entorno == 'global')
                                  {
                                      posicion = pos;
                                      valor += temp + ' = ' + pos +';';
                                      valor += '\n';
                                      pos++;
                                  }
                                  else
                                  {
                                      posicion = stac;
                                      valor += temp + ' =  P;';
                                      valor += '\n';
                                      valor += 'P = P + 1;\n';
                                      stac++;
                                  }
                                  if(n.rol == 'Parametro')
                                  {
                                      if(entorno == 'global')
                                      {
                                          valor += 'heap[(int)'+ temp + '] = ' + n.valor +';';
                                          valor += '\n';
                                      }
                                      else
                                      {
                                          valor += 'stack[(int)'+ temp + '] = ' + n.valor +';';
                                          valor += '\n';
                                      }
                                  }
                                  else
                                  {
                                      var temp1 = Temp.getTemporal();
                                      if(n.entorno == 'global')
                                      {
                                          valor += temp1 + ' = heap[(int)'+n.position+'];';
                                          valor += '\n';
                                      }
                                      else
                                      {
                                          valor += temp1 + ' = stack[(int)'+n.position+'];';
                                          valor += '\n';
                                      }
                                      if(entorno == 'global')
                                      {
                                          valor += 'heap[(int)'+ temp + '] = ' + temp1 +';';
                                          valor += '\n';
                                      }
                                      else
                                      {
                                          valor += 'stack[(int)'+ temp + '] = ' + temp1 +';';
                                          valor += '\n';
                                      }
                                  }


                                   var sym = new intermedia.simbolo();
                                   sym.ambito = tab.ambitoLevel;
                                   sym.name = $$[$0-4];
                                   sym.position = posicion;
                                   sym.rol = 'variable';
                                   sym.direccion = posicion;
                                   sym.direccionrelativa = posicion;
                                   sym.tipo = $$[$0-2];
                                   sym.valor = n.valor;
                                   sym.constante = ($$[$0-5].toUpperCase() == 'CONST')?true:false;
                                   if(entorno != 'global') sym.entorno = entorno;
                                   tab.insert(sym);

                                  var r = [];
                                  r[3] = valor;
                                  r[0] = '';
                                  r[1] = temp1;
                                  r[2] = '';
                                  r[4] = '';
                                  r[5] = '';
                                  r[6] = '';
                                  r[7] = '';


                                  this.$ = r;

                                  //if(pos >0 && pos != 0) pos++;
                                  //if (pos == 0) pos++;
                                  break;

                             DEFAULT:
                              semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no puedes asignar ${$$[$0][0]}, a una variable de tipo arreglo;`+'\"}');
                              this.$ = ['','','',''];
                              break;
                         }
                     }
                     else
                     {
                         semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no puedes asignar ${$$[$0][0]}, a una variable de tipo ${$$[$0-2]};`+'\"}');
                         this.$ = ['','','',''];
                     }

                 }
                 else
                 {
                     semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no puedes asignar ${$$[$0][0]}, a una variable de tipo ${$$[$0-2]};`+'\"}');
                     this.$ = ['','','',''];
                 }
            }
             else
             {
                 semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no puedes asignar ${$$[$0][0]}, a una variable de tipo ${$$[$0-2]};`+'\"}');
                 this.$ = ['','','',''];
             }
        }
        else
        {
            semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, ya existe una variable con el nombre ${$$[$0-4]};`+'\"}');
            this.$ = ['','','',''];
        }


break;
case 36: case 37:


        var s =  eval('$$');
        var posd = -1;
        var att = false;
        var att1 = false;
        var att2 = false;
        var att3 = false;
        var att4 = false;
        for(var a = 0; a<s.length; a++)
        {
            if(s[a] != null)
            {
                if(s[a] == ('function') && !func)
                {
                    posd = a+1;
                    tab.ambitoLevel = tab.ambitoLevel+1;
                    func = !func;
                    var name = '';
                    if(posd!=-1) name = s[posd];
                    entorno = 'function_'+name;
                    break;
                }
                else if( s[a] == 'if' && !ifs)
                {
                    posd = a+1;
                    tab.ambitoLevel = tab.ambitoLevel+1;
                    entorno = entorno + '_if';
                    ifs = !ifs;
                    if(att) att = !att;
                    break;
                }
                else if( s[a] == 'if' && ifs )
                {
                    att = true;
                    ifs = !ifs;
                }
                else if( s[a] == 'while' && !whiles)
                {
                    posd = a+1;
                    tab.ambitoLevel = tab.ambitoLevel+1;
                    entorno = entorno + '_while';
                    whiles = !whiles;
                    if(att1) att1 = !att1;
                    break;
                }
                else if( s[a] == 'whiles' && whiles )
                {
                    att1 = true;
                    whiles = !whiles;
                }
                else if( s[a] == 'for' && !fores)
                {
                    posd = a+1;
                    tab.ambitoLevel = tab.ambitoLevel+1;
                    entorno = entorno + '_for';
                    fores = !fores;
                    if(att2) att2 = !att2;
                    break;
                }
                else if( s[a] == 'for' && fores )
                {
                    att2 = true;
                    fores = !fores;
                }
                else if( s[a].toString().toLowerCase() == 'do' && !does)
                {
                    posd = a+1;
                    tab.ambitoLevel = tab.ambitoLevel+1;
                    entorno = entorno + '_do';
                    does = !does;
                    if(att3) att3 = !att3;
                    break;
                }
                else if( s[a].toString().toLowerCase() == 'do' && does )
                {
                    att3 = true;
                    does = !does;
                }
                else if( s[a] == 'switch' && !switches)
                {
                    posd = a+1;
                    tab.ambitoLevel = tab.ambitoLevel+1;
                    entorno = entorno + '_switch';
                    switches = !switches;
                    if(att4) att4 = !att4;
                    break;
                }
                else if( s[a] == 'switch' && switches )
                {
                    att4 = true;
                    switches = !switches;
                }
            }
        }
        if(att)
        {
            ifs = !ifs;
            tab.ambitoLevel = tab.ambitoLevel+1;
        }
        if(att1)
        {
            whiles = !whiles;
            tab.ambitoLevel = tab.ambitoLevel+1;
        }
        if(att2)
        {
            fores = !fores;
            tab.ambitoLevel = tab.ambitoLevel+1;
        }
        if(att3)
        {
            does = !does;
            tab.ambitoLevel = tab.ambitoLevel+1;
        }
        if(att4)
        {
            switches = !switches;
            tab.ambitoLevel = tab.ambitoLevel+1;
        }

        var n = tab.getPositionAmbito($$[$0-2]);
        var pass = false;
        if(n==null)
        {
            pass = true;
        }
        else
        {
            if(n.ambito < tab.ambitoLevel) pass = true;
        }

        if(pass)
        {
            if($$[$0][0].toString().toUpperCase() != '')
            {
                switch($$[$0][0].toString().toUpperCase())
                {
                    case "STRING":
                        var val = $$[$0][6].toString();
                        var valor = '';
                        var temp = Temp.getTemporal();
                        //valor += temp + ' = ' + pos + ';';
                        //valor += '\n';
                       var posicion = -1;
                       if(entorno == 'global')
                       {
                           posicion = pos;
                           valor += temp + ' = ' + pos +';';
                           valor += '\n';
                           pos++;
                       }
                       else
                       {
                           posicion = stac;
                           valor += temp + ' =  P;';
                           valor += '\n';
                           valor += 'P = P + 1;\n';
                           stac++;
                      }

                      var temp1 = Temp.getTemporal();
                      valor += temp1 + ' = ' + posS + ';';
                      valor += '\n';
                      var temp0 = Temp.getTemporal();
                      valor += temp0 + ' = ' + posS + ';';
                      valor += '\n';
                      if(entorno == 'global')
                      {
                         valor += 'heap[(int)'+temp+'] = ' + temp1 + ';';
                         valor += '\n';
                      }
                      else
                      {
                         valor += 'stack[(int)'+temp+'] = ' + temp1 + ';';
                         valor += '\n';
                      }

                      valor += temp1 + ' = ' + temp1 + ' + 1;';
                      valor += '\n';
                      valor += 'heap[(int)'+temp0+'] = ' + temp1 + ';\n';
                      var temp2 = Temp.getTemporal();
                      valor += temp2 + ' = '+ val.length + ';';
                      valor += '\n';
                      valor += 'heap[(int)'+temp1+'] = ' + temp2 + ';';
                      valor += '\n';
                      valor += $$[$0][1] + ' = ' + temp1 + ';';
                      valor += '\n';
                      valor += $$[$0][3];

                        var r = [];
                        r[3] = valor;
                        r[0] = '';
                        r[1] = temp2;
                        r[2] = label1;
                        r[4] = '';
                        r[5] = '';
                        r[6] = '';
                        r[7] = '';

                        var sym = new intermedia.simbolo();
                        sym.ambito = tab.ambitoLevel;
                        sym.name = $$[$0-2];
                        sym.position = posicion;
                        sym.rol = 'variable';
                        sym.direccion = posicion;
                        sym.direccionrelativa = posicion;
                        sym.tipo = $$[$0][0];
                        sym.valor = $$[$0][6];
                        sym.constante = ($$[$0-3].toUpperCase() == 'CONST')?true:false;
                        if(entorno != 'global') sym.entorno = entorno;
                        tab.insert(sym);

                        this.$ = r;

                        //if(pos >0 && pos != 0) pos++;
                        //if (pos == 0) pos++;
                        posS += 5000;
                        break;

                    case "NUMBER":
                        var valor = '';
                        var temp = Temp.getTemporal();
                        //valor += temp + ' = ' + pos + ';';
                        //valor += '\n';
                           var posicion = -1;
                           if(entorno == 'global')
                           {
                               posicion = pos;
                               valor += temp + ' = ' + pos +';';
                               valor += '\n';
                               pos++;
                           }
                           else
                           {
                               posicion = stac;
                               valor += temp + ' =  P;';
                               valor += '\n';
                               valor += 'P = P + 1;\n';
                               stac++;
                          }
                        valor += $$[$0][3];
                        valor += '\n';
                        if(entorno == 'global')
                        {
                            valor += 'heap[(int)'+ temp + '] = ' + $$[$0][1] +';';
                            valor += '\n';
                        }
                        else
                        {
                            valor += 'stack[(int)'+ temp + '] = ' + $$[$0][1] +';';
                            valor += '\n';
                        }


                         var sym = new intermedia.simbolo();
                         sym.ambito = tab.ambitoLevel;
                         sym.name = $$[$0-2];
                         sym.position = posicion;
                         sym.rol = 'variable';
                         sym.direccion = posicion;
                         sym.direccionrelativa = posicion;
                         sym.tipo = $$[$0][0];
                         sym.valor = $$[$0][6];
                         sym.constante = ($$[$0-3].toUpperCase() == 'CONST')?true:false;
                         if(entorno != 'global') sym.entorno = entorno ;
                         tab.insert(sym);

                        var r = [];
                        r[3] = valor;
                        r[0] = '';
                        r[1] = temp;
                        r[2] = '';
                        r[4] = '';
                        r[5] = '';
                        r[6] = '';
                        r[7] = '';


                        this.$ = r;

                        //if(pos >0 && pos != 0) pos++;
                        //if (pos == 0) pos++;
                        break;

                    case 'BOOLEAN':
                        var valor = '';
                        var temp = Temp.getTemporal();
                        //valor += temp + ' = ' + pos + ';';
                        //valor += '\n';
                           var posicion = -1;
                           if(entorno == 'global')
                           {
                               posicion = pos;
                               valor += temp + ' = ' + pos +';';
                               valor += '\n';
                               pos++;
                           }
                           else
                           {
                               posicion = stac;
                               valor += temp + ' =  P;';
                               valor += '\n';
                               valor += 'P = P + 1;\n';
                               stac++;
                          }
                        valor += $$[$0][3];
                        valor += '\n';
                        if(entorno == 'global')
                        {
                            valor += 'heap[(int)'+ temp + '] = ' + $$[$0][1] +';';
                            valor += '\n';
                        }
                        else
                        {
                            valor += 'stack[(int)'+ temp + '] = ' + $$[$0][1] +';';
                            valor += '\n';
                        }


                         var sym = new intermedia.simbolo();
                         sym.ambito = tab.ambitoLevel;
                         sym.name = $$[$0-2];
                         sym.position = posicion;
                         sym.rol = 'variable';
                         sym.direccion = posicion;
                         sym.direccionrelativa = posicion;
                         sym.tipo = $$[$0][0];
                         sym.valor = $$[$0][6];
                         sym.constante = ($$[$0-3].toUpperCase() == 'CONST')?true:false;
                         if(entorno != 'global') sym.entorno = entorno;
                         tab.insert(sym);

                        var r = [];
                        r[3] = valor;
                        r[0] = '';
                        r[1] = temp;
                        r[2] = '';
                        r[4] = '';
                        r[5] = '';
                        r[6] = '';
                        r[7] = '';


                        this.$ = r;

                        //if(pos >0 && pos != 0) pos++;
                        //if (pos == 0) pos++;
                        break;

                    case "FLOAT":
                        var valor = '';
                        var temp = Temp.getTemporal();
                        //valor += temp + ' = ' + pos + ';';
                        //valor += '\n';
                           var posicion = -1;
                           if(entorno == 'global')
                           {
                               posicion = pos;
                               valor += temp + ' = ' + pos +';';
                               valor += '\n';
                               pos++;
                           }
                           else
                           {
                               posicion = stac;
                               valor += temp + ' =  P;';
                               valor += '\n';
                               valor += 'P = P + 1;\n';
                               stac++;
                          }
                        valor += $$[$0][3];
                        valor += '\n';
                        if(entorno == 'global')
                        {
                            valor += 'heap[(int)'+ temp + '] = ' + $$[$0][1] +';';
                            valor += '\n';
                        }
                        else
                        {
                            valor += 'stack[(int)'+ temp + '] = ' + $$[$0][1] +';';
                            valor += '\n';
                        }


                         var sym = new intermedia.simbolo();
                         sym.ambito = tab.ambitoLevel;
                         sym.name = $$[$0-2];
                         sym.position = posicion;
                         sym.rol = 'variable';
                         sym.direccion = posicion;
                         sym.direccionrelativa = posicion;
                         sym.tipo = $$[$0][0];
                         sym.valor = $$[$0][6];
                         sym.constante = ($$[$0-3].toUpperCase() == 'CONST')?true:false;
                         if(entorno != 'global') sym.entorno = entorno;
                         tab.insert(sym);

                        var r = [];
                        r[3] = valor;
                        r[0] = '';
                        r[1] = temp;
                        r[2] = '';
                        r[4] = '';
                        r[5] = '';
                        r[6] = '';
                        r[7] = '';


                        this.$ = r;

                        //if(pos >0 && pos != 0) pos++;
                        //if (pos == 0) pos++;
                        break;

                    case 'ARREGLO':
                        var val = $$[$0][6].toString();
                        var valor = '';
                        var temp = Temp.getTemporal();
                        //valor += temp + ' = ' + pos + ';';
                        //valor += '\n';
                           var posicion = -1;
                           if(entorno == 'global')
                           {
                               posicion = pos;
                               valor += temp + ' = ' + pos +';';
                               valor += '\n';
                               pos++;
                           }
                           else
                           {
                               posicion = stac;
                               valor += temp + ' =  P;';
                               valor += '\n';
                               valor += 'P = P + 1;\n';
                               stac++;
                          }

                        var temp1 = Temp.getTemporal();
                        var temp0 = Temp.getTemporal();
                        valor += temp1 + ' = ' + posA + ';';
                        valor += '\n';
                        valor += temp0+ ' = ' + posA + ';\n';
                        if(entorno == 'global')
                        {
                            valor += 'heap[(int)'+temp+'] = ' + temp1 + ';';
                            valor += '\n';
                        }
                        else
                        {
                            valor += 'stack[(int)'+temp+'] = ' + temp1 + ';';
                            valor += '\n';
                        }

                        valor += temp1 + ' = ' + temp1 + ' + 1;';
                        valor += '\n';
                        valor += 'heap[(int)'+temp0+'] = ' + temp1 + ';\n';

                        var temp2 = Temp.getTemporal();
                        valor += temp2 + ' = '+ $$[$0][7] + ';';
                        valor += '\n';
                        valor += 'heap[(int)'+temp1+'] = ' + temp2 + ';';
                        valor += '\n';
                        valor += $$[$0][1] + ' = ' + temp1 + ';';
                        valor += '\n';
                        valor += $$[$0][3];
                        valor += '\n';

                         var sym = new intermedia.simbolo();
                         sym.ambito = tab.ambitoLevel;
                         sym.name = $$[$0-2];
                         sym.position = posicion;
                         sym.rol = 'arreglo';
                         sym.direccion = posicion;
                         sym.direccionrelativa = posicion;
                         sym.tipo = ($$[$0][8]!='')?$$[$0][8]:$$[$0][0];
                         sym.valor = $$[$0][6];
                         sym.constante = ($$[$0-3].toUpperCase() == 'CONST')?true:false;
                         if(entorno != 'global') sym.entorno = entorno;
                         tab.insert(sym);

                        var r = [];
                        r[3] = valor;
                        r[0] = '';
                        r[1] = temp2;
                        r[2] = '';
                        r[4] = '';
                        r[5] = '';
                        r[6] = '';
                        r[7] = '';

                        $$[$0][6].name = $$[$0-2];
                        var a = new intermedia.arreglo()
                        a.name = $$[$0-2];
                        a.tipo = ($$[$0][8]!='')?$$[$0][8]:$$[$0][0];
                        a.positions = $$[$0][6].positions;
                        a.c3d = valor;
                        a.valor = $$[$0][6].valor;
                        a.temporal = temp2;
                        a.bandera = '';
                        arr.insert(a);

                        this.$ = r;

                        //if(pos >0 && pos != 0) pos++;
                        //if (pos == 0) pos++;
                        posA += 5000;
                        break;

                    DEFAULT:
                        semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no puedes asignar ${$$[$0][0]}, a una variable de tipo arreglo;`+'\"}');
                        this.$ = ['','','',''];

                }
            }
            else if($$[$0][0] == '')
            {
                 var n = tab.getPositionAmbito($$[$0][4]);
                 if(n!=null)
                 {
                     if(n.tipo.toUpperCase()!='')
                     {
                         switch(n.tipo.toUpperCase())
                         {
                             case 'STRING':
                                 var valor = '';
                                  var temp = Temp.getTemporal();
                                  //valor += temp + ' = ' + pos + ';';
                                  //valor += '\n';
                                   var posicion = -1;
                                   if(entorno == 'global')
                                   {
                                       posicion = pos;
                                       valor += temp + ' = ' + pos +';';
                                       valor += '\n';
                                       pos++;
                                   }
                                   else
                                   {
                                       posicion = stac;
                                       valor += temp + ' =  P;';
                                       valor += '\n';
                                       valor += 'P = P + 1;\n';
                                       stac++;
                                  }


                                  var temp1 = Temp.getTemporal();
                                  valor += temp1 + ' = ' + posS + ';';
                                  valor += '\n';
                                  var temp0 = Temp.getTemporal();
                                  valor += temp0 + ' = ' + posS + ';';
                                  valor += '\n';
                                  if(entorno == 'global')
                                  {
                                      valor += 'heap[(int)'+temp+'] = ' + temp1 + ';';
                                      valor += '\n';
                                  }
                                  else
                                  {
                                      valor += 'stack[(int)'+temp+'] = ' + temp1 + ';';
                                      valor += '\n';
                                  }

                                  valor += temp1 + ' = ' + temp1 + ' + 1;';
                                  valor += '\n';
                                  valor += 'heap[(int)'+temp0+'] = ' + temp1 + ';\n';
                                  var temp2 = Temp.getTemporal();
                                  valor += temp2 + ' = '+ n.valor.length + ';';
                                  valor += '\n';
                                  valor += 'heap[(int)'+temp1+'] = ' + temp2 + ';';
                                  valor += '\n';

                                 for(var a = 0; a<n.valor.length; a++)
                                 {
                                     valor += temp1 + ' = ' + temp1 + ' + 1;';
                                     valor += '\n';
                                     valor += 'heap[(int)'+temp1+'] = ' + n.valor.charCodeAt(a) + ';';
                                     valor += '\n'
                                 }
                               var r = [];
                               r[3] = valor;
                               r[0] = '';
                               r[1] = temp1;
                               r[2] = '';
                               r[4] = '';
                               r[5] = '';
                               r[6] = '';
                               r[7] = '';

                               var sym = new intermedia.simbolo();
                               sym.ambito = tab.ambitoLevel;
                               sym.name = $$[$0-2];
                               sym.position = posicion;
                               sym.rol = 'variable';
                               sym.direccion = posicion;
                               sym.direccionrelativa = posicion;
                               sym.tipo = n.tipo;
                               sym.valor = n.valor;
                               sym.constante = ($$[$0-3].toUpperCase() == 'CONST')?true:false;
                               if(entorno != 'global') sym.entorno = entorno;
                               tab.insert(sym);

                               this.$ = r;

                               //if(pos >0 && pos != 0) pos++;
                               //if (pos == 0) pos++;
                               posS += 5000;
                               break;

                             case 'NUMBER':
                                  var valor = '';
                                  var temp = Temp.getTemporal();
                                  //valor += temp + ' = ' + pos + ';';
                                  //valor += '\n';
                                   var posicion = -1;
                                   if(entorno == 'global')
                                   {
                                       posicion = pos;
                                       valor += temp + ' = ' + pos +';';
                                       valor += '\n';
                                       pos++;
                                   }
                                   else
                                   {
                                       posicion = stac;
                                       valor += temp + ' =  P;';
                                       valor += '\n';
                                       valor += 'P = P + 1;\n';
                                       stac++;
                                  }
                                  var temp1 = Temp.getTemporal();
                                  if(n.entorno == 'global')
                                  {
                                      valor += temp1 + ' = heap[(int)'+n.position+'];';
                                      valor += '\n';
                                  }
                                  else
                                  {
                                      valor += temp1 + ' = stack[(int)'+n.position+'];';
                                      valor += '\n';
                                  }

                                  if(entorno == 'global')
                                  {
                                      valor += 'heap[(int)'+ temp + '] = ' + temp1 +';';
                                      valor += '\n';
                                  }
                                  else
                                  {
                                      valor += 'stack[(int)'+ temp + '] = ' + temp1 +';';
                                      valor += '\n';
                                  }


                                   var sym = new intermedia.simbolo();
                                   sym.ambito = tab.ambitoLevel;
                                   sym.name = $$[$0-2];
                                   sym.position = posicion;
                                   sym.rol = 'variable';
                                   sym.direccion = posicion;
                                   sym.direccionrelativa = posicion;
                                   sym.tipo = n.tipo;
                                   sym.valor = n.valor;
                                   sym.constante = ($$[$0-3].toUpperCase() == 'CONST')?true:false;
                                   if(entorno != 'global') sym.entorno = entorno;
                                   tab.insert(sym);

                                  var r = [];
                                  r[3] = valor;
                                  r[0] = '';
                                  r[1] = temp1;
                                  r[2] = '';
                                  r[4] = '';
                                  r[5] = '';
                                  r[6] = '';
                                  r[7] = '';


                                  this.$ = r;

                                  //if(pos >0 && pos != 0) pos++;
                                  //if (pos == 0) pos++;
                                  break;
                             case 'BOOLEAN':
                                  var valor = '';
                                  var temp = Temp.getTemporal();
                                   var posicion = -1;
                                   if(entorno == 'global')
                                   {
                                       posicion = pos;
                                       valor += temp + ' = ' + pos +';';
                                       valor += '\n';
                                       pos++;
                                   }
                                   else
                                   {
                                       posicion = stac;
                                       valor += temp + ' =  P;';
                                       valor += '\n';
                                       valor += 'P = P + 1;\n';
                                       stac++;
                                  }
                                  var temp1 = Temp.getTemporal();
                                  if(n.entorno == 'global')
                                  {
                                      valor += temp1 + ' = heap[(int)'+n.position+'];';
                                      valor += '\n';
                                  }
                                  else
                                  {
                                      valor += temp1 + ' = stack[(int)'+n.position+'];';
                                      valor += '\n';
                                  }

                                  if(entorno == 'global')
                                  {
                                      valor += 'heap[(int)'+ temp + '] = ' + temp1 +';';
                                      valor += '\n';
                                  }
                                  else
                                  {
                                      valor += 'stack[(int)'+ temp + '] = ' + temp1 +';';
                                      valor += '\n';
                                  }
                                  /*
                                      valor += temp + ' = ' + pos + ';';
                                      valor += '\n';
                                      var temp1 = Temp.getTemporal();
                                      valor += temp1 + ' = stack[(int)'+n.position+'];';
                                      valor += '\n';
                                      valor += 'stack[(int)'+ temp + '] = ' + temp1 +';';
                                      valor += '\n';
                                  */

                                   var sym = new intermedia.simbolo();
                                   sym.ambito = tab.ambitoLevel;
                                   sym.name = $$[$0-2];
                                   sym.position = posicion;
                                   sym.rol = 'variable';
                                   sym.direccion = posicion;
                                   sym.direccionrelativa = posicion;
                                   sym.tipo = n.tipo;
                                   sym.valor = n.valor;
                                   sym.constante = ($$[$0-3].toUpperCase() == 'CONST')?true:false;
                                   if(entorno != 'global') sym.entorno = entorno;
                                   tab.insert(sym);

                                  var r = [];
                                  r[3] = valor;
                                  r[0] = '';
                                  r[1] = temp1;
                                  r[2] = '';
                                  r[4] = '';
                                  r[5] = '';
                                  r[6] = '';
                                  r[7] = '';


                                  this.$ = r;

                                  //if(pos >0 && pos != 0) pos++;
                                  //if (pos == 0) pos++;
                                  break;
                             DEFAULT:
                              semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no puedes asignar ${$$[$0][0]}, a una variable de tipo arreglo;`+'\"}');
                              this.$ = ['','','',''];
                              break;
                         }
                     }
                     else
                     {
                         semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no puedes asignar ${$$[$0][0]}, a una variable de tipo ${$$[$0]};`+'\"}');
                         this.$ = ['','','',''];
                     }

                 }
                 else
                 {
                     semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no puedes asignar ${$$[$0][0]}, a una variable de tipo ${$$[$0]};`+'\"}');
                     this.$ = ['','','',''];
                 }
            }
            else
            {
                semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no puedes asignar ${$$[$0][6]}, a una variable de tipo ${$$[$0][0]};d`+'\"}');
                this.$ = ['','','',''];
            }
        }
        else
        {
            semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, ya existe una variable con el nombre ${$$[$0-2]};`+'\"}');
            this.$ = ['','','',''];
        }

break;
case 46:

        var valor = '';
        valor += `void ${$$[$0-5]}()\n{\n`;

        var label;
        if(returns != '')
        {
            label = returns;
        }
        else
        {
            label = Label.getBandera();
        }
        valor += $$[$0-1][3] + '\n';
        valor += `goto ${label};\n`;
        valor += `${label}:\n`;
        valor += `return;\n`;
        valor += `}`;

        ff.push(valor);

        var sym = new intermedia.simbolo();
        sym.ambito = 0;
        sym.name = $$[$0-5];
        sym.params = 0;
        sym.position = -1;
        sym.rol = 'funcion';
        sym.direccion = -1;
        sym.direccionrelativa = -1;
        sym.tipo = 'void';
        sym.valor = null;
        sym.constante = ($$[$0-6].toUpperCase() == 'CONST')?true:false;
        sym.entorno = 'global';
        tab.insert(sym);
        this.$ = ['','','','','',''];

break;
case 47:

        var valor = '';
        valor += `void ${$$[$0-6]}()\n{\n`;

        var label;
        if(returns != '')
        {
            label = returns;
        }
        else
        {
            label = Label.getBandera();
        }
        valor += $$[$0-4][3] + '\n';
        valor += $$[$0-1][3] + '\n';
        valor += `goto ${label};\n`;
        valor += `${label}:\n`;
        valor += `return;\n`;
        valor += `}`;

        ff.push(valor);

        var sym = new intermedia.simbolo();
        sym.ambito = 0;
        sym.name = $$[$0-6];
        sym.params = 0;
        sym.position = -1;
        sym.rol = 'funcion';
        sym.direccion = -1;
        sym.direccionrelativa = -1;
        sym.tipo = 'void';
        sym.valor = null;
        sym.constante = ($$[$0-7].toUpperCase() == 'CONST')?true:false;
        sym.entorno = 'global';
        tab.insert(sym);
        this.$ = ['','','','','',''];

break;
case 48:

        var valor = '';
        valor += `void ${$$[$0-7]}()\n{\n`;

        var label;
        if(returns != '')
        {
            label = returns;
        }
        else
        {
            label = Label.getBandera();
        }
        valor += $$[$0-1][3] + '\n';
        valor += `goto ${label};\n`;
        valor += `${label}:\n`;
        valor += `return;\n`;
        valor += `}`;

        ff.push(valor);

        var sym = new intermedia.simbolo();
        sym.ambito = 0;
        sym.name = $$[$0-7];
        sym.params = 0;
        sym.position = -1;
        sym.rol = 'funcion';
        sym.direccion = -1;
        sym.direccionrelativa = -1;
        sym.tipo = $$[$0-3];
        sym.valor = null;
        sym.constante = ($$[$0-8].toUpperCase() == 'CONST')?true:false;
        sym.entorno = 'global';
        tab.insert(sym);
        this.$ = ['','','','','',''];

break;
case 49: case 51: case 53:


break;
case 50:

        var valor = '';
        valor += `void ${$$[$0-4]}()\n{\n`;

        var label;
        if(returns != '')
        {
            label = returns;
        }
        else
        {
            label = Label.getBandera();
        }

        valor += `goto ${label};\n`;
        valor += `${label}:\n`;
        valor += `return;\n`;
        valor += `}`;

        ff.push(valor);

        var sym = new intermedia.simbolo();
        sym.ambito = 0;
        sym.name = $$[$0-4];
        sym.params = 0;
        sym.position = -1;
        sym.rol = 'funcion';
        sym.direccion = -1;
        sym.direccionrelativa = -1;
        sym.tipo = 'void';
        sym.valor = null;
        sym.constante = ($$[$0-5].toUpperCase() == 'CONST')?true:false;
        sym.entorno = 'global';
        tab.insert(sym);
        this.$ = ['','','','','',''];

break;
case 52:

        var valor = '';
        valor += `void ${$$[$0-6]}()\n{\n`;

        var label;
        if(returns != '')
        {
            label = returns;
        }
        else
        {
            label = Label.getBandera();
        }
        valor += `goto ${label};\n`;
        valor += `${label}:\n`;
        valor += `return;\n`;
        valor += `}`;

        ff.push(valor);

        var sym = new intermedia.simbolo();
        sym.ambito = 0;
        sym.name = $$[$0-6];
        sym.params = 0;
        sym.position = -1;
        sym.rol = 'funcion';
        sym.direccion = -1;
        sym.direccionrelativa = -1;
        sym.tipo = 'void';
        sym.valor = null;
        sym.constante = ($$[$0-7].toUpperCase() == 'CONST')?true:false;
        sym.entorno = 'global';
        tab.insert(sym);
        this.$ = ['','','','','',''];

break;
case 54: case 55: case 56: case 57: case 58: case 59: case 60: case 61:

        this.$ = ['','','','','','',''];

break;
case 69:

        if(tab.ambitoLevel > 0) tab.ambitoLevel = tab.ambitoLevel-1;
        ifs = !ifs;
        tab.deleteAmbitoLast();
        entorno = entorno.slice(3,-3);
        var r = [];
        r[0]  = $$[$0][0];
        r[1] = $$[$0][1];
        r[2] = $$[$0][2];
        r[3] = $$[$0][3];

        this.$ = r;

break;
case 98:

        var valor = '';
        var r = [];

        var label = Label.getBandera();
        if($$[$0-2][0] != '')
        {
             valor += $$[$0-2][3] +'\n';
             valor += `if(${$$[$0-2][1]}==0) goto ${label};\n`;
             valor += $$[$0][3] + '\n';
             valor += `${label}:\n`;
        }
        else
        {
            var n = tab.getPositionAmbito($$[$0-2][4]);
            if(n!=null)
            {
                 var temp = Temp.getTemporal();
                 if(n.rol == 'Parametro')
                 {
                    valor += `${temp} = ${n.valor};\n`;
                 }
                 else
                 {
                    if(entorno == 'global')
                    {
                        valor += `${temp} = heap[${n.position}];\n`;
                    }
                    else
                    {
                        valor += `${temp} = stack[${n.position}];\n`;
                    }
                 }
                 valor += `if(${temp}==0) goto ${label};\n`;
                 valor += $$[$0][3] + '\n';
                 valor += `${label}:\n`;
            }
        }



        r[0] = '';
        r[1] = '';
        r[2] = '';
        r[3] = valor;
        r[4] = '';
        this.$ = r;


break;
case 99:

        var valor = '';
        var r = [];

        var label = Label.getBandera();
        var label1 = Label.getBandera();

        if($$[$0-4][0] != '')
        {
            valor += $$[$0-4][3] +'\n';
            valor += `if(${$$[$0-4][1]}==0) goto ${label};\n`;
            valor += $$[$0-2][3] + '\n';
            valor += `goto ${label1};\n`;
            valor += `${label}:\n`;
            valor += $$[$0][3] + '\n';
            valor += `goto ${label1};\n`
            valor += `${label1}:\n`;
        }
        else
        {
            var n = tab.getPositionAmbito($$[$0-4][4]);
            if(n!=null)
            {
                 var temp = Temp.getTemporal();
                 if(n.rol == 'Parametro')
                 {
                    valor += `${temp} = ${n.valor};\n`;
                 }
                 else
                 {
                    if(entorno == 'global')
                    {
                        valor += `${temp} = heap[${n.position}];\n`;
                    }
                    else
                    {
                        valor += `${temp} = stack[${n.position}];\n`;
                    }
                 }

                valor += `if(${temp}==0) goto ${label};\n`;
                valor += $$[$0-2][3] + '\n';
                valor += `goto ${label1};\n`;
                valor += `${label}:\n`;
                valor += $$[$0][3] + '\n';
                valor += `goto ${label1};\n`
                valor += `${label1}:\n`;
            }
        }



        r[0] = '';
        r[1] = '';
        r[2] = '';
        r[3] = valor;
        r[4] = '';
        this.$ = r;


break;
case 100:

        var valor = '';
        var r = [];
        var label;
        if(continues != '')
        {
            label = continues;
        }
        else
        {
            label = Label.getBandera();
        }

        var label1;
        if(breaks!= '')
        {
            label1 = breaks;
        }
        else
        {
            label1 = Label.getBandera();
        }

        if($$[$0-4][3] != '')
        {

            if($$[$0-3][0] != '')
            {
                valor += `${label}:\n`;
                valor += `${$$[$0-4][3]}\n`;
                valor += `${$$[$0-1][3]}\n`;
                valor += `if(${$$[$0-1][1]}==0) goto ${label1};\n`;
                valor += `goto ${label};\n`;
                valor += `${label1}:\n`;
            }
            else
            {
                var n = tab.getPositionAmbito($$[$0-3][4]);
                if(n!=null)
                {
                     valor += `${label}:\n`;
                     var temp = Temp.getTemporal();
                     if(n.rol == 'Parametro')
                     {
                        valor += `${temp} = ${n.valor};\n`;
                     }
                     else
                     {
                        if(entorno == 'global')
                        {
                            valor += `${temp} = heap[${n.position}];\n`;
                        }
                        else
                        {
                            valor += `${temp} = stack[${n.position}];\n`;
                        }
                     }

                    valor += `${$$[$0-1][3]}\n`;
                    valor += `if(${temp}==0) goto ${label1};\n`;
                    valor += `goto ${label};\n`;
                    valor += `${label1}:\n`;
                }
            }


            r[0] = '';
            r[1] = '';
            r[2] = '';
            r[3] = valor;
            breaks = '';
            continues = '';
            this.$ = r;
        }
        else
        {
            this.$ = ['','','','',''];
        }


break;
case 101:

        var valor = '';
        var r = [];
        var label;
        if(continues != '')
        {
            label = continues;
        }
        else
        {
            label = Label.getBandera();
        }

        var label1;
        if(breaks!= '')
        {
            label1 = breaks;
        }
        else
        {
            label1 = Label.getBandera();
        }
        if($$[$0-2][0] != '')
        {
            valor += `${label}:\n`;
            valor += $$[$0-2][3] + '\n';
            valor += `if(${$$[$0-2][1]} == 0) goto ${label1};\n`;
            valor += $$[$0][3] +'\n';
            valor += `goto ${label};\n`;
            valor += `${label1}:\n`;
        }
        else
        {
            var n = tab.getPositionAmbito($$[$0-2][4]);
            if(n!=null)
            {
                 valor += `${label}:\n`;
                 var temp = Temp.getTemporal();
                 if(n.rol == 'Parametro')
                 {
                    valor += `${temp} = ${n.valor};\n`;
                 }
                 else
                 {
                    if(entorno == 'global')
                    {
                        valor += `${temp} = heap[${n.position}];\n`;
                    }
                    else
                    {
                        valor += `${temp} = stack[${n.position}];\n`;
                    }
                 }


                valor += `if(${temp} == 0) goto ${label1};\n`;
                valor += $$[$0][3] +'\n';
                valor += `goto ${label};\n`;
                valor += `${label1}:\n`;
            }
        }


        r[0] = '';
        r[1] = '';
        r[2] = '';
        r[3] = valor;
        breaks = '';
        continues = '';
        this.$ = r;


break;
case 102:

        var valor = '';
        var r = [];
        if($$[$0-6][3] != '' && $$[$0-4][3] != '' && $$[$0-2][3] != '')
        {
            valor += $$[$0-6][3] + '\n';

            var label;
            if(continues != '')
            {
                label = continues;
            }
            else
            {
                label = Label.getBandera();
            }

            var label0 = Label.getBandera();

            var label1;
            if(breaks!= '')
            {
                label1 = breaks;
            }
            else
            {
                label1 = Label.getBandera();
            }


            valor += `${label}:\n`;
            valor += $$[$0-4][3] + '\n';
            valor += `if(${$$[$0-4][1]} == 0) goto ${label1};\n`;
            valor += $$[$0][3] + '\n';
            valor += `goto ${label0};\n`;
            valor += `${label0}:\n`;
            valor += $$[$0-2][3] + '\n';
            valor += `goto ${label};\n`;
            valor += `${label1}:\n`;

            r[0] = '';
            r[1] = '';
            r[2] = '';
            r[3] = valor;
            breaks = '';
            continues = '';
            this.$ = r;
        }
        else
        {
            this.$ = ['','','','',''];
        }



break;
case 103:

        var valor = '';
        var r = [];

        if($$[$0-2][0] == 'ARREGLO')
        {
            var k = $$[$0-2][6].getValores();
            var temp = Temp.getTemporal();

            var temp1 = Temp.getTemporal();
            valor += temp1 + ' = ' + posA + ';\n';
            posA = posA + 5000;

            var temp2 = Temp.getTemporal();
            valor += `${temp2} = ${temp1} + 1;\n`;
            valor += `heap[(int) ${temp1}] = ${temp2};\n`;
            valor += `heap[(int)${temp2}] = ${k.length};\n`;



            valor += `${$$[$0-2][1]} = ${temp1};\n`;
            valor += $$[$0-2][3] + '\n';

            valor += `${temp} = ${k.length};\n`;
            var temp3 = Temp.getTemporal();
            valor += `${temp3} = -1;\n`;

            var label;
            if(continues != '')
            {
                label = continues;
            }
            else
            {
                label = Label.getBandera();
            }

            var label0 = Label.getBandera();

            var label1;
            if(breaks!= '')
            {
                label1 = breaks;
            }
            else
            {
                label1 = Label.getBandera();
            }

            var temp4 = Temp.getTemporal();

            var posicion = stac;
            valor += temp4 + ' =  P;';
            valor += '\n';
            valor += 'P = P + 1;\n';
            stac++;
            valor += 'stack[(int)'+ temp4 + '] = -1;\n';

            tab.ambitoLevel = tab.ambitoLevel + 1;
            entorno = entorno + '_forin';
            var sym = new intermedia.simbolo();
            sym.ambito = tab.ambitoLevel;
            sym.name = $$[$0-4];
            sym.position = posicion;
            sym.rol = 'variable';
            sym.direccion = posicion;
            sym.direccionrelativa = posicion;
            sym.tipo = 'NUMBER';
            sym.valor = -1;
            sym.constante = false;
            if(entorno != 'global') sym.entorno = entorno ;
            tab.insert(sym);

            valor += `${label}:\n`;
            valor += `if(${temp3} == ${temp}) goto ${label1};\n`;
            valor += `${temp3} = ${temp3} + 1;\n`;
            valor += `stack[${posicion}] = ${temp3};\n`;
            valor += $$[$0][3] + '\n';
            valor += `goto ${label};\n`;
            valor += `${label1}:\n`;

            r[0] = '';
            r[1] = '';
            r[2] = '';
            r[3] = valor;
            breaks = '';
            continues = '';
            this.$ = r;

        }
        else if($$[$0-2][0] == '')
        {

        }
        else
        {
            this.$ = ['','','',''];
        }

break;
case 108:

        var r  = [];
        r[0] = 'ARPRINT';
        r[1] = [];

        if($$[$0-2][0] == 'ARPRINT')
        {
            for(let m of $$[$0-2][1])
            {
                r[1].push(m);
            }
            r[1].push($$[$0]);
        }
        else
        {
            r[1].push($$[$0-2]);
            r[1].push($$[$0]);
        }
        this.$ = r;


break;
case 111:

        var s = eval('$$');
        var valor = '';
        var posm = 0;
        for(let param of $$[$0])
        {
            valor += `P = P + ${posm};\n`;
            var temp = Temp.getTemporal();
            valor += `${temp} = stack[(int) P];\n`;

            var sym = new intermedia.simbolo();
            sym.ambito = 0;
            sym.name = param[4];
            sym.position = posm;
            sym.rol = 'Parametro';
            sym.direccion = posm;
            sym.direccionrelativa = posm;
            sym.tipo = (param[7]=='')?'let':param[7];
            sym.valor = temp;
            sym.constante = false;
            sym.entorno = 'funcion_'+s[s.length-3];
            tab.insert(sym);
            posm++;
        }
        var r = [];
        r[0] = '';
        r[1] = '';
        r[2] = '';
        r[3] = valor;
        this.$ = r;

break;
case 112:

        this.$ = $$[$0-2];
        this.$.push($$[$0]);

break;
case 113:

        this.$ = [];
        this.$.push($$[$0]);

break;
case 114:


        var r = [];
        r[0] = '';
        r[1] = '';
        r[2] = '';
        r[3] = '';
        r[4] = $$[$0-2];
        r[5] = '';
        r[6] = '';
        r[7] = $$[$0];
        this.$ = r;

break;
case 115:

        var r = [];
        r[0] = '';
        r[1] = '';
        r[2] = '';
        r[3] = '';
        r[4] = $$[$0];
        r[5] = '';
        r[6] = '';
        r[7] = '';
        this.$ = r;

break;
case 135:

        var r = [];
        r[0] = 'BOOLEAN';
        var temp = Temp.getTemporal();
        r[1] = temp;
        r[2] = '';
        var valor = '';
        valor += temp + ' = 1;';
        r[3] = valor;
        r[4] = '';
        r[5] = 1;
        r[6] = true;
        this.$ = r;

break;
case 136:

        var r = [];
        r[0] = 'BOOLEAN';
        var temp = Temp.getTemporal();
        r[1] = temp;
        r[2] = '';
        var valor = '';
        valor += temp + ' = 0;';
        r[3] = valor;
        r[4] = '';
        r[5] = 1;
        r[6] = false;
        this.$ = r;

break;
case 137:

        var r = [];
        r[0] = "NUMBER";
        var temp = Temp.getTemporal();
        r[1] = temp;
        r[2] = '';
        var valor = '';
        valor += temp + ' = ' + $$[$0] + ';';
        r[3] = valor;
        r[4] = '';
        r[5] = $$[$0];
        r[6] = Number($$[$0]);
        this.$ = r;


break;
case 138:

        var temp = Temp.getTemporal();
        var r = [];
        r[0] = "STRING";
        r[1] = temp;
        r[2] = '';

        var valor = '';
        for(var a = 0; a<$$[$0].length; a++)
        {
            valor += temp + ' = ' + temp + ' + 1;';
            valor += '\n';
            valor += 'heap[(int)'+temp+'] = ' + $$[$0].charCodeAt(a) + ';';
            valor += '\n';
        }
        r[3] = valor;
        r[4] = '';
        r[5] = $$[$0];
        r[6] = $$[$0];

        this.$ = r;


break;
case 139:

        var temp = Temp.getTemporal();
        var r = [];
        r[0] = "STRING";
        r[1] = temp;
        r[2] = '';

        var valor = '';
        for(var a = 0; a<$$[$0].length; a++)
        {
            valor += temp + ' = ' + temp + ' + 1;';
            valor += '\n';
            valor += 'heap[(int)'+temp+'] = ' + $$[$0].charCodeAt(a) + ';';
            valor += '\n'
        }
        r[3] = valor;
        r[4] = '';
        r[5] = $$[$0];
        r[6] = $$[$0];

        this.$ = r;


break;
case 146: case 147: case 185: case 187: case 190: case 193:

        this.$ = ['','','','','','']

break;
case 150: case 188: case 191:

        var r = [];
        r[0] = '';
        r[1] = '';
        r[2] = '';
        r[3] = '';
        r[4] = $$[$0];
        r[5] = '';
        r[6] = '';
        this.$ = r;

break;
case 153: case 154: case 155: case 177: case 178:

        this.$ = ['','','','','','','','','','','','','','',''];

break;
case 157:

        this.$ = $$[$0-1];
        var r = [];
        r[10] = 'ARRPOS';
        r[11] = this.$.length+1;
        r[12] = $$[$0];
        this.$.push(r);

break;
case 158:

        var r = [];
        r[10] = 'ARRPOS';
        r[11] = 1;
        r[12] = $$[$0];
        this.$ = [];
        this.$.push(r);


break;
case 160:


         var n = tab.getPositionAmbito($$[$0-1]);
         var arres = [];
         var poses = [];
         var elpepe = [];
         if(n!=null)
         {
             var valor = '';
             var temp  = Temp.getTemporal();
             var l = arr.getProf($$[$0-1]);
             var posss = 0;
             var pass = false;
             if(l>=$$[$0].length)
             {
                 var nivel = 1;
                 for(let posi of $$[$0])
                 {
                     var m = arr.getTam($$[$0-1],nivel);



                     if(posi[12][0] != '')
                     {
                         if(posi[12][0].toUpperCase() == 'NUMBER')
                         {
                             var num = posi[12][6];
                             if(num <= (m-1))
                             {
                                 arres.push(m);
                                 poses.push(posi[12][1]);
                                 valor += posi[12][3] + '\n';
                                 posss = posss * m + num;
                                 elpepe.push(num);
                                 pass = true;
                             }
                             else
                             {
                                 pass = false;
                                 semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, posicion fuera del rango, nivel: ${nivel}, tamaño: ${m}, posicion: ${posi[12][6]}`+'\"}');
                                 this.$ = ['','','',''];
                                 break;
                             }
                         }
                         else
                          {
                              pass = false;
                              semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no se puede realizar la operacion`+'\"}');
                              this.$ = ['','','',''];
                              break;
                          }
                     }
                     else
                     {
                        var n1 = tab.getPositionAmbito(posi[12][4]);
                        if(n1!=null)
                        {
                            if(n1.rol.toUpperCase() != 'ARREGLO')
                            {
                                if(n1.tipo.toUpperCase() == 'NUMBER')
                                {
                                     var num = Number(n1.valor);
                                     if(num <= (m-1))
                                     {
                                         arres.push(m);

                                         var temp = Temp.getTemporal();
                                         posss = posss * m + n1.valor;
                                         poses.push(temp);
                                         elpepe.push(n1.valor);
                                         if(n1.entorno == 'global')
                                         {
                                            valor += `${temp} = heap[${n1.position}];\n`;
                                         }
                                         else
                                         {
                                            valor += `${temp} = heap[${n1.position}];\n`;
                                         }
                                         pass = true;
                                     }
                                     else
                                     {
                                         pass = false;
                                         semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, posicion fuera del rango, nivel: ${nivel}, tamaño: ${m}, posicion: ${n1.valor}`+'\"}');
                                         this.$ = ['','','',''];
                                         break;
                                     }
                                }
                                else
                                {
                                         pass = false;
                                         semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no se puede realizar la operacion.`+'\"}');
                                         this.$ = ['','','',''];
                                         break;
                                }
                            }
                            else
                            {
                                 pass = false;
                                 semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no se puede realizar la operacion.`+'\"}');
                                 this.$ = ['','','',''];
                                 break;
                            }

                        }
                        else
                        {
                             pass = false;
                             semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, variable no existe: ${posi[12][0]}`+'\"}');
                             this.$ = ['','','',''];
                             break;
                        }

                     }
                     nivel++;
                 }
                 if(pass)
                 {
                    var temp0 = Temp.getTemporal();
                    var temp = Temp.getTemporal();
                    var temp1 = Temp.getTemporal();
                    var temp2 = Temp.getTemporal();
                    if(n.entorno == 'global')
                    {
                        valor += `${temp1} = heap[${n.position}];\n`;
                    }
                    else
                    {
                        valor += `${temp1} = stack[${n.position}];\n`;
                    }
                    valor += `${temp2} = heap[(int)${temp1}] + 1;\n`;

                    valor += `${temp} = ${poses[0]} + ${temp2};\n`

                    for(var a = 1; a<arres.length; a++)
                    {
                        valor += `${temp0} = ${temp} * ${arres[a-1]};\n`;
                        valor += `${temp} = ${temp0} + ${poses[a]};\n`;
                        valor += `${temp} = heap[(int) ${temp}] +2;\n`;
                    }

                    //var temp3 = Temp.getTemporal();
                    //valor += `${temp3} = ${temp2};\n`;

                    //var temp4 = Temp.getTemporal();
                    //valor += `${temp4} = heap[(int)${temp}];\n`;

                   var temp5 = Temp.getTemporal();
                   var temp6 = Temp.getTemporal();

                   valor += `${temp5} = ${temp2} + ${poses[0]};\n`;
                   for(var a = 1; a<poses.length; a++)
                   {
                       valor += `${temp6} = heap[(int) ${temp5}] + 2;\n`;
                       valor += `${temp5} = ${temp6} + ${poses[a]};\n`;
                   }

                   valor += `${temp6} = heap[(int) ${temp5}];\n`;

                    var arrayss = arr.getValores(n.name);
                    //console.log(arrayss);
                    //console.log(arrayss[posss]);
                    var arrayssL = arr.getValoresL(n.name);
                    var value = arr.getValue(n.name, elpepe);

                    var arre = '';


                    var r = [];
                    r[0] = (l==$$[$0].length)?(typeof arrayss[0]).toString().toUpperCase():'ARREGLO';
                    r[1] = temp6;
                    r[2] = '';
                    r[3] = (l==$$[$0].length)?valor:arre;
                    r[4] = '';
                    r[5] = (l==$$[$0].length)?arrayss[posss]:value;
                    r[6] = (l==$$[$0].length)?arrayss[posss]:value;
                    this.$ = r;

                 }
                 else
                 {
                    semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no se puede realizar la operacion.`+'\"}');
                    this.$ = ['','','',''];
                 }
             }
             else
             {
                 semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, tamaño muy grande para el arreglo ${$$[$0-1]}, el tamaño del arreglo es de: ${l}`+'\"}');
                 this.$ = ['','','',''];
             }
         }
         else
         {
              semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no existe la variable ${$$[$0-1]}`+'\"}');
              this.$ = ['','','',''];
         }

break;
case 161:

        var n = tab.getPositionAmbito($$[$0-1]);
        if(n!=null)
        {
            if(n.tipo.toUpperCase() == 'NUMBER')
            {
                var r = [];
                var valor = '';
                var temp = Temp.getTemporal();
                if(n.entorno == 'global')
                {
                    valor += `${temp} = heap[${n.position}];\n`;
                }
                else
                {
                    valor += `${temp} = stack[${n.position}];\n`;
                }
                var temp1 = Temp.getTemporal();
                valor += `${temp1} = ${temp} + 1;\n`;
                if(n.entorno == 'global')
                {
                    valor += `heap[${n.position}] = ${temp1};\n`;
                }
                else
                {
                    valor += `stack[${n.position}] = ${temp1};\n`;
                }

                n.valor = n.valor + 1;
                tab.update(n.name,n);

                var r = [];
                r[0] = "NUMBER";
                r[1] = temp;
                r[2] = ''
                r[3] = valor;
                r[4] = '';
                r[5] = n.valor;
                r[6] = n.valor;
                r[7] = '';
                r[8] = '';

                this.$ = r;
            }
            else
            {
                semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no existe la variable ${$$[$0-1]}`+'\"}');
                this.$ = ['','','',''];
            }
        }
        else
        {
            semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no existe la variable ${$$[$0-1]}`+'\"}');
            this.$ = ['','','',''];
        }

break;
case 162:

        var n = tab.getPositionAmbito($$[$0-1]);
        if(n!=null)
        {
            if(n.tipo.toUpperCase() == 'NUMBER')
            {
                var r = [];
                var valor = '';
                var temp = Temp.getTemporal();
                if(n.entorno == 'global')
                {
                    valor += `${temp} = heap[${n.position}];\n`;
                }
                else
                {
                    valor += `${temp} = stack[${n.position}];\n`;
                }
                var temp1 = Temp.getTemporal();
                valor += `${temp1} = ${temp} - 1;\n`;
                if(n.entorno == 'global')
                {
                    valor += `heap[${n.position}] = ${temp1};\n`;
                }
                else
                {
                    valor += `stack[${n.position}] = ${temp1};\n`;
                }

                n.valor = n.valor - 1;
                tab.update(n.name,n);

                var r = [];
                r[0] = "NUMBER";
                r[1] = temp;
                r[2] = ''
                r[3] = valor;
                r[4] = '';
                r[5] = n.valor;
                r[6] = n.valor;
                r[7] = '';
                r[8] = '';

                this.$ = r;
            }
            else
            {
                semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no existe la variable ${$$[$0-1]}`+'\"}');
                this.$ = ['','','',''];
            }
        }
        else
        {
            semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no existe la variable ${$$[$0-1]}`+'\"}');
            this.$ = ['','','',''];
        }

break;
case 163:

        var n = tab.getPositionAmbito($$[$0]);
        if(n!=null)
        {
            if(n.tipo.toUpperCase() == 'NUMBER')
            {
                var r = [];
                var valor = '';
                var temp = Temp.getTemporal();
                if(n.entorno == 'global')
                {
                    valor += `${temp} = heap[${n.position}];\n`;
                }
                else
                {
                    valor += `${temp} = stack[${n.position}];\n`;
                }
                var temp1 = Temp.getTemporal();
                valor += `${temp1} = ${temp} - 1;\n`;
                if(n.entorno == 'global')
                {
                    valor += `heap[${n.position}] = ${temp1};\n`;
                }
                else
                {
                    valor += `stack[${n.position}] = ${temp1};\n`;
                }

                n.valor = n.valor - 1;
                tab.update(n.name,n);

                var r = [];
                r[0] = "NUMBER";
                r[1] = temp1;
                r[2] = ''
                r[3] = valor;
                r[4] = '';
                r[5] = n.valor;
                r[6] = n.valor;
                r[7] = '';
                r[8] = '';

                this.$ = r;
            }
            else
            {
                semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no existe la variable ${$$[$0-1]}`+'\"}');
                this.$ = ['','','',''];
            }
        }
        else
        {
            semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no existe la variable ${$$[$0-1]}`+'\"}');
            this.$ = ['','','',''];
        }

break;
case 164:

        var n = tab.getPositionAmbito($$[$0]);
        if(n!=null)
        {
            if(n.tipo.toUpperCase() == 'NUMBER')
            {
                var r = [];
                var valor = '';
                var temp = Temp.getTemporal();
                if(n.entorno == 'global')
                {
                    valor += `${temp} = heap[${n.position}];\n`;
                }
                else
                {
                    valor += `${temp} = stack[${n.position}];\n`;
                }
                var temp1 = Temp.getTemporal();
                valor += `${temp1} = ${temp} + 1;\n`;
                if(n.entorno == 'global')
                {
                    valor += `heap[${n.position}] = ${temp1};\n`;
                }
                else
                {
                    valor += `stack[${n.position}] = ${temp1};\n`;
                }

                n.valor = n.valor + 1;
                tab.update(n.name,n);

                var r = [];
                r[0] = "NUMBER";
                r[1] = temp1;
                r[2] = ''
                r[3] = valor;
                r[4] = '';
                r[5] = n.valor;
                r[6] = n.valor;
                r[7] = '';
                r[8] = '';

                this.$ = r;
            }
            else
            {
                semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no existe la variable ${$$[$0-1]}`+'\"}');
                this.$ = ['','','',''];
            }
        }
        else
        {
            semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no existe la variable ${$$[$0-1]}`+'\"}');
            this.$ = ['','','',''];
        }

break;
case 165:

         var n = tab.getPositionAmbito($$[$0-2]);
         var arres = [];
         var poses = [];
         if(n!=null)
         {
             var valor = '';
             var temp  = Temp.getTemporal();
             var l = arr.getProf($$[$0-2]);
             var posss = 0;

             if(l>=$$[$0-1].length)
             {
                 var nivel = 1;
                 for(let posi of $$[$0-1])
                 {
                     var m = arr.getTam($$[$0-2],nivel);

                     var pass = false;

                     if(posi[12][0] != '')
                     {
                         if(posi[12][0].toUpperCase() == 'NUMBER')
                         {
                             var num = posi[12][6];
                             if(num <= (m-1))
                             {
                                 arres.push(m);
                                 poses.push(posi[12][1]);
                                 valor += posi[12][3] + '\n';
                                 posss = posss * m + num;
                                 pass = true;
                             }
                             else
                             {
                                 pass = false;
                                 semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, posicion fuera del rango, nivel: ${nivel}, tamaño: ${m}, posicion: ${posi[12][6]}`+'\"}');
                                 this.$ = ['','','',''];
                                 break;
                             }
                         }
                         else
                          {
                              pass = false;
                              semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no se puede realizar la operacion`+'\"}');
                              this.$ = ['','','',''];
                              break;
                          }
                     }
                     else
                     {
                        var n1 = tab.getPositionAmbito(posi[12][4]);
                        if(n1!=null)
                        {
                            if(n1.rol.toUpperCase() != 'ARREGLO')
                            {
                                if(n1.tipo.toUpperCase() == 'NUMBER')
                                {
                                     var num = Number(n1.valor);
                                     if(num <= (m-1))
                                     {
                                         arres.push(m);

                                         var temp = Temp.getTemporal();
                                         posss = posss * m + n1.valor;
                                         poses.push(temp);
                                         if(n1.entorno == 'global')
                                         {
                                            valor += `${temp} = heap[${n1.position}];\n`;
                                         }
                                         else
                                         {
                                            valor += `${temp} = heap[${n1.position}];\n`;
                                         }
                                         pass = true;
                                     }
                                     else
                                     {
                                         pass = false;
                                         semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, posicion fuera del rango, nivel: ${nivel}, tamaño: ${m}, posicion: ${n1.valor}`+'\"}');
                                         this.$ = ['','','',''];
                                         break;
                                     }
                                }
                                else
                                {
                                         pass = false;
                                         semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no se puede realizar la operacion.`+'\"}');
                                         this.$ = ['','','',''];
                                         break;
                                }
                            }
                            else
                            {
                                 pass = false;
                                 semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no se puede realizar la operacion.`+'\"}');
                                 this.$ = ['','','',''];
                                 break;
                            }

                        }
                        else
                        {
                             pass = false;
                             semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, variable no existe: ${posi[12][0]}`+'\"}');
                             this.$ = ['','','',''];
                             break;
                        }

                     }
                     nivel++;
                 }
                 if(pass)
                 {
                    var temp0 = Temp.getTemporal();
                    var temp = Temp.getTemporal();

                    valor += `${temp} = ${poses[0]};\n`

                    for(var a = 1; a<arres.length; a++)
                    {
                        valor += `${temp0} = ${temp} * ${arres[a-1]};\n`;
                        valor += `${temp} = ${temp0} + ${poses[a]};\n`;
                        valor += `${temp} = heap[(int) ${temp}] +2;\n`;
                    }

                    var temp1 = Temp.getTemporal();
                    var temp2 = Temp.getTemporal();
                    if(n.entorno == 'global')
                    {
                        valor += `${temp1} = heap[${n.position}];\n`;
                    }
                    else
                    {
                        valor += `${temp1} = stack[${n.position}];\n`;
                    }
                    valor += `${temp2} = heap[(int)${temp1}] + 1;\n`;

                    var temp3 = Temp.getTemporal();
                    valor += `${temp3} = ${temp2} + ${temp};\n`;

                    var temp4 = Temp.getTemporal();
                    valor += `${temp4} = heap[(int)${temp3}];\n`;

                   var temp5 = Temp.getTemporal();
                   var temp6 = Temp.getTemporal();

                   valor += `${temp5} = ${temp2} + ${poses[0]};\n`;
                   for(var a = 1; a<poses.length; a++)
                   {
                       valor += `${temp6} = heap[(int) ${temp5}] + 2;\n`;
                       valor += `${temp5} = ${temp6} + ${poses[a]};\n`;
                   }

                   valor += `${temp6} = heap[(int) ${temp5}];\n`;


                    var arrayss = arr.getValores(n.name);
                    if(typeof arrayss[0] == 'number')
                    {
                        var temp7 = Temp.getTemporal();
                        valor += `${temp7} = ${temp6} + 1;\n`;
                        valor += `heap[(int) ${temp5}] = ${temp7};\n`;

                        var r = [];
                        r[0] = typeof arrayss[0];
                        r[1] = temp6;
                        r[2] = '';
                        r[3] = valor;
                        r[4] = '';
                        r[5] = arrayss[posss];
                        r[6] = arrayss[posss];
                        this.$ = r;
                    }
                    else
                    {
                        semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no se puede realizar la operacion, tipo invalido: ${typeof arrayss[0]}`+'\"}');
                        this.$ = ['','','',''];
                    }
                 }
                 else
                 {
                    semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no se puede realizar la operacion.`+'\"}');
                    this.$ = ['','','',''];
                 }
             }
             else
             {
                 semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, tamaño muy grande para el arreglo ${$$[$0-2]}, el tamaño del arreglo es de: ${l}`+'\"}');
                 this.$ = ['','','',''];
             }
         }
         else
         {
              semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no existe la variable ${$$[$0-2]}`+'\"}');
              this.$ = ['','','',''];
         }

break;
case 166:

         var n = tab.getPositionAmbito($$[$0-2]);
         var arres = [];
         var poses = [];
         if(n!=null)
         {
             var valor = '';
             var temp  = Temp.getTemporal();
             var l = arr.getProf($$[$0-2]);
             var posss = 0;
             if(l>=$$[$0-1].length)
             {
                 var nivel = 1;
                 for(let posi of $$[$0-1])
                 {
                     var m = arr.getTam($$[$0-2],nivel);

                     var pass = false;

                     if(posi[12][0] != '')
                     {
                         if(posi[12][0].toUpperCase() == 'NUMBER')
                         {
                             var num = posi[12][6];
                             if(num <= (m-1))
                             {
                                 arres.push(m);
                                 poses.push(posi[12][1]);
                                 valor += posi[12][3] + '\n';
                                 posss = posss * m + num;
                                 pass = true;
                             }
                             else
                             {
                                 pass = false;
                                 semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, posicion fuera del rango, nivel: ${nivel}, tamaño: ${m}, posicion: ${posi[12][6]}`+'\"}');
                                 this.$ = ['','','',''];
                                 break;
                             }
                         }
                         else
                          {
                              pass = false;
                              semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no se puede realizar la operacion`+'\"}');
                              this.$ = ['','','',''];
                              break;
                          }
                     }
                     else
                     {
                        var n1 = tab.getPositionAmbito(posi[12][4]);
                        if(n1!=null)
                        {
                            if(n1.rol.toUpperCase() != 'ARREGLO')
                            {
                                if(n1.tipo.toUpperCase() == 'NUMBER')
                                {
                                     var num = Number(n1.valor);
                                     if(num <= (m-1))
                                     {
                                         arres.push(m);

                                         var temp = Temp.getTemporal();
                                         posss = posss * m + n1.valor;
                                         poses.push(temp);
                                         if(n1.entorno == 'global')
                                         {
                                            valor += `${temp} = heap[${n1.position}];\n`;
                                         }
                                         else
                                         {
                                            valor += `${temp} = heap[${n1.position}];\n`;
                                         }
                                         pass = true;
                                     }
                                     else
                                     {
                                         pass = false;
                                         semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, posicion fuera del rango, nivel: ${nivel}, tamaño: ${m}, posicion: ${n1.valor}`+'\"}');
                                         this.$ = ['','','',''];
                                         break;
                                     }
                                }
                                else
                                {
                                         pass = false;
                                         semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no se puede realizar la operacion.`+'\"}');
                                         this.$ = ['','','',''];
                                         break;
                                }
                            }
                            else
                            {
                                 pass = false;
                                 semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no se puede realizar la operacion.`+'\"}');
                                 this.$ = ['','','',''];
                                 break;
                            }

                        }
                        else
                        {
                             pass = false;
                             semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, variable no existe: ${posi[12][0]}`+'\"}');
                             this.$ = ['','','',''];
                             break;
                        }

                     }
                     nivel++;
                 }
                 if(pass)
                 {
                    var temp0 = Temp.getTemporal();
                    var temp = Temp.getTemporal();

                    valor += `${temp} = ${poses[0]};\n`

                    for(var a = 1; a<arres.length; a++)
                    {
                        valor += `${temp0} = ${temp} * ${arres[a-1]};\n`;
                        valor += `${temp} = ${temp0} + ${poses[a]};\n`;
                        valor += `${temp} = heap[(int) ${temp}] +2;\n`;
                    }

                    var temp1 = Temp.getTemporal();
                    var temp2 = Temp.getTemporal();
                    if(n.entorno == 'global')
                    {
                        valor += `${temp1} = heap[${n.position}];\n`;
                    }
                    else
                    {
                        valor += `${temp1} = stack[${n.position}];\n`;
                    }
                    valor += `${temp2} = heap[(int)${temp1}] + 1;\n`;

                    var temp3 = Temp.getTemporal();
                    valor += `${temp3} = ${temp2} + ${temp};\n`;

                    var temp4 = Temp.getTemporal();
                    valor += `${temp4} = heap[(int)${temp3}];\n`;

                   var temp5 = Temp.getTemporal();
                   var temp6 = Temp.getTemporal();

                   valor += `${temp5} = ${temp2} + ${poses[0]};\n`;
                   for(var a = 1; a<poses.length; a++)
                   {
                       valor += `${temp6} = heap[(int) ${temp5}] + 2;\n`;
                       valor += `${temp5} = ${temp6} + ${poses[a]};\n`;
                   }

                   valor += `${temp6} = heap[(int) ${temp5}];\n`;


                    var arrayss = arr.getValores(n.name);
                    if(typeof arrayss[0] == 'number')
                    {
                        var temp7 = Temp.getTemporal();
                        valor += `${temp7} = ${temp6} - 1;\n`;
                        valor += `heap[(int) ${temp5}] = ${temp7};\n`;

                        var r = [];
                        r[0] = typeof arrayss[0];
                        r[1] = temp6;
                        r[2] = '';
                        r[3] = valor;
                        r[4] = '';
                        r[5] = arrayss[posss];
                        r[6] = arrayss[posss];
                        this.$ = r;
                    }
                    else
                    {
                        semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no se puede realizar la operacion, tipo invalido: ${typeof arrayss[0]}`+'\"}');
                        this.$ = ['','','',''];
                    }
                 }
                 else
                 {
                    semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no se puede realizar la operacion.`+'\"}');
                    this.$ = ['','','',''];
                 }
             }
             else
             {
                 semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, tamaño muy grande para el arreglo ${$$[$0-2]}, el tamaño del arreglo es de: ${l}`+'\"}');
                 this.$ = ['','','',''];
             }
         }
         else
         {
              semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no existe la variable ${$$[$0-2]}`+'\"}');
              this.$ = ['','','',''];
         }

break;
case 167:

         var n = tab.getPositionAmbito($$[$0-2]);
         var arres = [];
         var poses = [];
         if(n!=null)
         {
             var valor = '';
             var temp  = Temp.getTemporal();
             var l = arr.getProf($$[$0-2]);
             var posss = 0;

             if(l>=$$[$0-1].length)
             {
                 var nivel = 1;
                 for(let posi of $$[$0-1])
                 {
                     var m = arr.getTam($$[$0-2],nivel);

                     var pass = false;

                     if(posi[12][0] != '')
                     {
                         if(posi[12][0].toUpperCase() == 'NUMBER')
                         {
                             var num = posi[12][6];
                             if(num <= (m-1))
                             {
                                 arres.push(m);
                                 poses.push(posi[12][1]);
                                 valor += posi[12][3] + '\n';
                                 posss = posss * m + num;
                                 pass = true;
                             }
                             else
                             {
                                 pass = false;
                                 semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, posicion fuera del rango, nivel: ${nivel}, tamaño: ${m}, posicion: ${posi[12][6]}`+'\"}');
                                 this.$ = ['','','',''];
                                 break;
                             }
                         }
                         else
                          {
                              pass = false;
                              semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no se puede realizar la operacion`+'\"}');
                              this.$ = ['','','',''];
                              break;
                          }
                     }
                     else
                     {
                        var n1 = tab.getPositionAmbito(posi[12][4]);
                        if(n1!=null)
                        {
                            if(n1.rol.toUpperCase() != 'ARREGLO')
                            {
                                if(n1.tipo.toUpperCase() == 'NUMBER')
                                {
                                     var num = Number(n1.valor);
                                     if(num <= (m-1))
                                     {
                                         arres.push(m);

                                         var temp = Temp.getTemporal();
                                         posss = posss * m + n1.valor;
                                         poses.push(temp);
                                         if(n1.entorno == 'global')
                                         {
                                            valor += `${temp} = heap[${n1.position}];\n`;
                                         }
                                         else
                                         {
                                            valor += `${temp} = heap[${n1.position}];\n`;
                                         }
                                         pass = true;
                                     }
                                     else
                                     {
                                         pass = false;
                                         semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, posicion fuera del rango, nivel: ${nivel}, tamaño: ${m}, posicion: ${n1.valor}`+'\"}');
                                         this.$ = ['','','',''];
                                         break;
                                     }
                                }
                                else
                                {
                                         pass = false;
                                         semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no se puede realizar la operacion.`+'\"}');
                                         this.$ = ['','','',''];
                                         break;
                                }
                            }
                            else
                            {
                                 pass = false;
                                 semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no se puede realizar la operacion.`+'\"}');
                                 this.$ = ['','','',''];
                                 break;
                            }

                        }
                        else
                        {
                             pass = false;
                             semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, variable no existe: ${posi[12][0]}`+'\"}');
                             this.$ = ['','','',''];
                             break;
                        }

                     }
                     nivel++;
                 }
                 if(pass)
                 {
                    var temp0 = Temp.getTemporal();
                    var temp = Temp.getTemporal();

                    valor += `${temp} = ${poses[0]};\n`

                    for(var a = 1; a<arres.length; a++)
                    {
                        valor += `${temp0} = ${temp} * ${arres[a-1]};\n`;
                        valor += `${temp} = ${temp0} + ${poses[a]};\n`;
                        valor += `${temp} = heap[(int) ${temp}] +2;\n`;
                    }

                    var temp1 = Temp.getTemporal();
                    var temp2 = Temp.getTemporal();
                    if(n.entorno == 'global')
                    {
                        valor += `${temp1} = heap[${n.position}];\n`;
                    }
                    else
                    {
                        valor += `${temp1} = stack[${n.position}];\n`;
                    }
                    valor += `${temp2} = heap[(int)${temp1}] + 1;\n`;

                    var temp3 = Temp.getTemporal();
                    valor += `${temp3} = ${temp2} + ${temp};\n`;

                    var temp4 = Temp.getTemporal();
                    valor += `${temp4} = heap[(int)${temp3}];\n`;

                   var temp5 = Temp.getTemporal();
                   var temp6 = Temp.getTemporal();

                   valor += `${temp5} = ${temp2} + ${poses[0]};\n`;
                   for(var a = 1; a<poses.length; a++)
                   {
                       valor += `${temp6} = heap[(int) ${temp5}] + 2;\n`;
                       valor += `${temp5} = ${temp6} + ${poses[a]};\n`;
                   }

                   valor += `${temp6} = heap[(int) ${temp5}];\n`;


                    var arrayss = arr.getValores(n.name);
                    if(typeof arrayss[0] == 'number')
                    {
                        var temp7 = Temp.getTemporal();
                        valor += `${temp7} = ${temp6} - 1;\n`;
                        valor += `heap[(int) ${temp5}] = ${temp7};\n`;

                        var r = [];
                        r[0] = typeof arrayss[0];
                        r[1] = temp7;
                        r[2] = '';
                        r[3] = valor;
                        r[4] = '';
                        r[5] = arrayss[posss];
                        r[6] = arrayss[posss];
                        this.$ = r;
                    }
                    else
                    {
                        semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no se puede realizar la operacion, tipo invalido: ${typeof arrayss[0]}`+'\"}');
                        this.$ = ['','','',''];
                    }
                 }
                 else
                 {
                    semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no se puede realizar la operacion.`+'\"}');
                    this.$ = ['','','',''];
                 }
             }
             else
             {
                 semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, tamaño muy grande para el arreglo ${$$[$0-2]}, el tamaño del arreglo es de: ${l}`+'\"}');
                 this.$ = ['','','',''];
             }
         }
         else
         {
              semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no existe la variable ${$$[$0-2]}`+'\"}');
              this.$ = ['','','',''];
         }

break;
case 168:

         var n = tab.getPositionAmbito($$[$0-2]);
         var arres = [];
         var poses = [];
         if(n!=null)
         {
             var valor = '';
             var temp  = Temp.getTemporal();
             var l = arr.getProf($$[$0-2]);
             var posss = 0;

             if(l>=$$[$0-1].length)
             {
                 var nivel = 1;
                 for(let posi of $$[$0-1])
                 {
                     var m = arr.getTam($$[$0-2],nivel);

                     var pass = false;

                     if(posi[12][0] != '')
                     {
                         if(posi[12][0].toUpperCase() == 'NUMBER')
                         {
                             var num = posi[12][6];
                             if(num <= (m-1))
                             {
                                 arres.push(m);
                                 poses.push(posi[12][1]);
                                 valor += posi[12][3] + '\n';
                                 posss = posss * m + num;
                                 pass = true;
                             }
                             else
                             {
                                 pass = false;
                                 semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, posicion fuera del rango, nivel: ${nivel}, tamaño: ${m}, posicion: ${posi[12][6]}`+'\"}');
                                 this.$ = ['','','',''];
                                 break;
                             }
                         }
                         else
                          {
                              pass = false;
                              semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no se puede realizar la operacion`+'\"}');
                              this.$ = ['','','',''];
                              break;
                          }
                     }
                     else
                     {
                        var n1 = tab.getPositionAmbito(posi[12][4]);
                        if(n1!=null)
                        {
                            if(n1.rol.toUpperCase() != 'ARREGLO')
                            {
                                if(n1.tipo.toUpperCase() == 'NUMBER')
                                {
                                     var num = Number(n1.valor);
                                     if(num <= (m-1))
                                     {
                                         arres.push(m);

                                         var temp = Temp.getTemporal();
                                         posss = posss * m + n1.valor;
                                         poses.push(temp);
                                         if(n1.entorno == 'global')
                                         {
                                            valor += `${temp} = heap[${n1.position}];\n`;
                                         }
                                         else
                                         {
                                            valor += `${temp} = heap[${n1.position}];\n`;
                                         }
                                         pass = true;
                                     }
                                     else
                                     {
                                         pass = false;
                                         semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, posicion fuera del rango, nivel: ${nivel}, tamaño: ${m}, posicion: ${n1.valor}`+'\"}');
                                         this.$ = ['','','',''];
                                         break;
                                     }
                                }
                                else
                                {
                                         pass = false;
                                         semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no se puede realizar la operacion.`+'\"}');
                                         this.$ = ['','','',''];
                                         break;
                                }
                            }
                            else
                            {
                                 pass = false;
                                 semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no se puede realizar la operacion.`+'\"}');
                                 this.$ = ['','','',''];
                                 break;
                            }

                        }
                        else
                        {
                             pass = false;
                             semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, variable no existe: ${posi[12][0]}`+'\"}');
                             this.$ = ['','','',''];
                             break;
                        }

                     }
                     nivel++;
                 }
                 if(pass)
                 {
                    var temp0 = Temp.getTemporal();
                    var temp = Temp.getTemporal();

                    valor += `${temp} = ${poses[0]};\n`

                    for(var a = 1; a<arres.length; a++)
                    {
                        valor += `${temp0} = ${temp} * ${arres[a-1]};\n`;
                        valor += `${temp} = ${temp0} + ${poses[a]};\n`;
                        valor += `${temp} = heap[(int) ${temp}] +2;\n`;
                    }

                    var temp1 = Temp.getTemporal();
                    var temp2 = Temp.getTemporal();
                    if(n.entorno == 'global')
                    {
                        valor += `${temp1} = heap[${n.position}];\n`;
                    }
                    else
                    {
                        valor += `${temp1} = stack[${n.position}];\n`;
                    }
                    valor += `${temp2} = heap[(int)${temp1}] + 1;\n`;

                    var temp3 = Temp.getTemporal();
                    valor += `${temp3} = ${temp2} + ${temp};\n`;

                    var temp4 = Temp.getTemporal();
                    valor += `${temp4} = heap[(int)${temp3}];\n`;

                   var temp5 = Temp.getTemporal();
                   var temp6 = Temp.getTemporal();

                   valor += `${temp5} = ${temp2} + ${poses[0]};\n`;
                   for(var a = 1; a<poses.length; a++)
                   {
                       valor += `${temp6} = heap[(int) ${temp5}] + 2;\n`;
                       valor += `${temp5} = ${temp6} + ${poses[a]};\n`;
                   }

                   valor += `${temp6} = heap[(int) ${temp5}];\n`;


                    var arrayss = arr.getValores(n.name);
                    if(typeof arrayss[0] == 'number')
                    {
                        var temp7 = Temp.getTemporal();
                        valor += `${temp7} = ${temp6} + 1;\n`;
                        valor += `heap[(int) ${temp5}] = ${temp7};\n`;

                        var r = [];
                        r[0] = typeof arrayss[0];
                        r[1] = temp7;
                        r[2] = '';
                        r[3] = valor;
                        r[4] = '';
                        r[5] = arrayss[posss];
                        r[6] = arrayss[posss];
                        this.$ = r;
                    }
                    else
                    {
                        semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no se puede realizar la operacion, tipo invalido: ${typeof arrayss[0]}`+'\"}');
                        this.$ = ['','','',''];
                    }
                 }
                 else
                 {
                    semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no se puede realizar la operacion.`+'\"}');
                    this.$ = ['','','',''];
                 }
             }
             else
             {
                 semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, tamaño muy grande para el arreglo ${$$[$0-2]}, el tamaño del arreglo es de: ${l}`+'\"}');
                 this.$ = ['','','',''];
             }
         }
         else
         {
              semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no existe la variable ${$$[$0-2]}`+'\"}');
              this.$ = ['','','',''];
         }

break;
case 169:

        var n = tab.getPositionAmbito($$[$0-4]);
        if(n!=null)
        {
            if(n.tipo.toUpperCase() == 'STRING')
            {

                    var valor = '';
                    var temp = Temp.getTemporal();
                    if(n.entorno == 'global')
                    {
                        valor += `${temp} = heap[${n.position}];\n`;
                    }
                    else
                    {
                        valor += `${temp} = stack[${n.position}];\n`;
                    }
                    valor += `${temp} = ${temp} + 1;\n`;
                    var temp1 = Temp.getTemporal();
                    valor += `${temp1} = heap[(int)${temp}];\n`;
                    valor += `${temp} = ${temp} + 1;\n`;
                    var temp2  = Temp.getTemporal();
                    valor += `${temp2} = 0;\n`;

                    var r = [];
                    var label = Label.getBandera();
                    var label1 = Label.getBandera();
                    var label2 = Label.getBandera();
                    var label3 = Label.getBandera();
                    var temp3 = Temp.getTemporal();
                    var temp4 = Temp.getTemporal();

                    valor += `${label}:\n`;
                    valor += `\tif(${temp2}==${temp1}) goto ${label1};\n`;
                    valor += `\t${temp4} = ${temp} + ${temp2};\n`
                    valor += `\t${temp3} = heap[(int)${temp4}];\n`;
                    valor += `\tif(${temp3}>=97) goto ${label2};\n`;
                    valor += `\t${temp2} = ${temp2} + 1;\n`;
                    valor += `\tgoto ${label};\n`;
                    valor += `${label2}:\n`;
                    valor += `\tif(${temp3}<=122) goto ${label3};\n`;
                    valor += `\t${temp2} = ${temp2} + 1;\n`;
                    valor += `\tgoto ${label};\n`;
                    valor += `${label3}:\n`;
                    valor += `\t${temp3} = ${temp3} - 32;\n`;
                    valor += `\theap[(int)${temp4}] = ${temp3};\n`;
                    valor += `\t${temp2} = ${temp2} + 1;\n`;
                    valor += `\tgoto ${label};\n`;
                    valor += `${label1}:\n`;

                    n.valor = n.valor.toString().toUpperCase();

                    tab.update(n.name,n);
                    r[0] = "STRING";
                    r[1] = temp2;
                    r[2] = label1;
                    r[3] = valor;
                    r[4] = '';
                    r[7] = '';
                    r[8] = '';

                    this.$ = r;

            }
            else
            {
                semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, la variable no es de tipo string`+'\"}');
                this.$ = ['','','',''];
            }
        }
        else
        {
             semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no existe la variable ${$$[$0-4]}`+'\"}');
             this.$ = ['','','',''];
        }

break;
case 170:

        var n = tab.getPositionAmbito($$[$0-4]);
        if(n!=null)
        {
            if(n.tipo.toUpperCase() == 'STRING')
            {

                    var valor = '';
                    var temp = Temp.getTemporal();
                    if(n.entorno == 'global')
                    {
                        valor += `${temp} = heap[${n.position}];\n`;
                    }
                    else
                    {
                        valor += `${temp} = stack[${n.position}];\n`;
                    }
                    valor += `${temp} = ${temp} + 1;\n`;
                    var temp1 = Temp.getTemporal();
                    valor += `${temp1} = heap[(int)${temp}];\n`;
                    valor += `${temp} = ${temp} + 1;\n`;
                    var temp2  = Temp.getTemporal();
                    valor += `${temp2} = 0;\n`;

                    var r = [];
                    var label = Label.getBandera();
                    var label1 = Label.getBandera();
                    var label2 = Label.getBandera();
                    var label3 = Label.getBandera();
                    var temp3 = Temp.getTemporal();
                    var temp4 = Temp.getTemporal();

                    valor += `${label}:\n`;
                    valor += `\tif(${temp2}==${temp1}) goto ${label1};\n`;
                    valor += `\t${temp4} = ${temp} + ${temp2};\n`
                    valor += `\t${temp3} = heap[(int)${temp4}];\n`;
                    valor += `\tif(${temp3}>=65) goto ${label2};\n`;
                    valor += `\t${temp2} = ${temp2} + 1;\n`;
                    valor += `\tgoto ${label};\n`;
                    valor += `${label2}:\n`;
                    valor += `\tif(${temp3}<=90) goto ${label3};\n`;
                    valor += `\t${temp2} = ${temp2} + 1;\n`;
                    valor += `\tgoto ${label};\n`;
                    valor += `${label3}:\n`;
                    valor += `\t${temp3} = ${temp3} + 32;\n`;
                    valor += `\theap[(int)${temp4}] = ${temp3};\n`;
                    valor += `\t${temp2} = ${temp2} + 1;\n`;
                    valor += `\tgoto ${label};\n`;
                    valor += `${label1}:\n`;

                    n.valor = n.valor.toString().toLowerCase();

                    tab.update(n.name,n);
                    r[0] = "STRING";
                    r[1] = temp2;
                    r[2] = label1;
                    r[3] = valor;
                    r[4] = '';
                    r[7] = '';
                    r[8] = '';

                    this.$ = r;

            }
            else
            {
                semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, la variable no es de tipo string`+'\"}');
                this.$ = ['','','',''];
            }
        }
        else
        {
             semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no existe la variable ${$$[$0-4]}`+'\"}');
             this.$ = ['','','',''];
        }

break;
case 171:

        var n = tab.getPositionAmbito($$[$0-2]);
        if(n!=null)
        {
            if(n.rol.toUpperCase() == 'ARREGLO')
            {
                 var valor = '';
                 var temp1 = Temp.getTemporal();
                 valor += temp1 + ' = ' + n.position +';';
                 valor += '\n';
                 var temp2 = Temp.getTemporal();
                 var temp3 = Temp.getTemporal();
                 if(n.entorno == 'global')
                 {
                     valor += temp2 + ' = heap[(int)'+temp1+'];';
                     valor += '\n';
                 }
                 else
                 {
                     valor += temp2 + ' = stack[(int)'+temp1+'];';
                     valor += '\n';
                 }

                 valor += temp3+' = heap[(int)' + temp2 +'];';
                 valor += '\n';
                 var k = arr.getTamposd($$[$0-2]);
                 valor += `${temp2} = ${k};\n`

                 var r = [];
                 r[0] = "NUMBER";
                 r[1] = temp2;
                 r[2] = ''
                 r[3] = valor;
                 r[4] = '';
                 r[5] = Number(arr.getTamposd($$[$0-2]));
                 r[6] = Number(arr.getTamposd($$[$0-2]));
                 r[7] = '';
                 r[8] = '';

                 this.$ = r;

            }
            else
            {
                if(n.tipo.toUpperCase() == 'STRING')
                {
                      var valor = '';
                      var temp1 = Temp.getTemporal();
                      valor += temp1 + ' = ' + n.position +';';
                      valor += '\n';
                      var temp2 = Temp.getTemporal();
                      var temp3 = Temp.getTemporal();
                      if(n.entorno == 'global')
                      {
                          valor += temp2 + ' = heap[(int)'+temp1+'];';
                          valor += '\n';
                      }
                      else
                      {
                          valor += temp2 + ' = stack[(int)'+temp1+'];';
                          valor += '\n';
                      }

                      valor += temp3+' = heap[(int)' + temp2 +'];';
                      valor += '\n';
                      valor += `${temp2} = heap[(int)${temp3}];`

                      var r = [];
                      r[0] = "NUMBER";
                      r[1] = temp2;
                      r[2] = ''
                      r[3] = valor;
                      r[4] = '';
                      r[5] = n.valor.length;
                      r[6] = n.valor.length;
                      r[7] = '';
                      r[8] = '';

                      this.$ = r;
                }
                else
                {
                    semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no se puede realizar la operacion`+'\"}');
                    this.$ = ['','','',''];
                }
            }
        }
        else
        {
             semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no existe la variable ${$$[$0-2]}`+'\"}');
             this.$ = ['','','',''];
        }

break;
case 172:

        var n = tab.getPositionAmbito($$[$0-5]);

        if(n!=null)
        {
            if(n.tipo.toUpperCase() == 'STRING')
            {
                var expr = $$[$0-1];

                    var valor = '';
                    var temp = Temp.getTemporal();
                    if(n.entorno == 'global')
                    {
                        valor += `${temp} = heap[${n.position}];\n`;
                    }
                    else
                    {
                        valor += `${temp} = stack[${n.position}];\n`;
                    }
                    valor += `${temp} = ${temp} + 1;\n`;
                    var temp1 = Temp.getTemporal();
                    valor += `${temp1} = heap[(int)${temp}];\n`;
                    var temp2  = Temp.getTemporal();
                    valor += `${temp2} = ${temp} + ${temp1};\n`;
                    var r = [];

                    if(expr[0].toUpperCase() != '')
                    {
                        for(var a = 0; a<expr[5].toString().length; a++)
                        {
                            valor += `${temp2} = ${temp2} + 1;\n`;
                            valor += `heap[(int)${temp2}] = ${expr[5].toString().charCodeAt(a)};\n`
                        }
                        valor += `${temp1} = ${temp1} + ${expr[5].toString().length};\n`;
                        valor += `heap[(int)${temp}] = ${temp1};\n`;
                        r[5] = n.valor.toString() + expr[5].toString();
                        r[6] = n.valor.toString() + expr[5].toString();
                        n.valor = n.valor.toString() + expr[5].toString();

                    }
                    else
                    {
                        var n1 = tab.getPositionAmbito(expr[4]);
                        if(n1!=null)
                        {
                            if(n1.rol != 'ARREGLO')
                            {
                                 for(var a = 0; a<n1.valor.toString().length; a++)
                                {
                                    valor += `${temp2} = ${temp2} + 1;\n`;
                                    valor += `heap[(int)${temp2}] = ${n1.valor.toString().charCodeAt(a)};\n`
                                }
                                valor += `${temp1} = ${temp1} + ${n1.valor.toString().length};\n`;
                                valor += `heap[(int)${temp}] = ${temp1};\n`;
                                r[5] = n.valor.toString() + n1.valor.toString();
                                r[6] = n.valor.toString() + n1.valor.toString();
                                n.valor = n.valor.toString() + n1.valor.toString();
                            }
                        }
                        else
                        {
                            semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, la variable no es de tipo string`+'\"}');
                            this.$ = ['','','',''];
                        }
                    }

                    tab.update(n.name,n);
                    r[0] = "STRING";
                    r[1] = temp2;
                    r[2] = ''
                    r[3] = valor;
                    r[4] = '';
                    r[7] = '';
                    r[8] = '';

                    this.$ = r;

            }
            else
            {
                semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, la variable no es de tipo string`+'\"}');
                this.$ = ['','','',''];
            }
        }
        else
        {
             semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no existe la variable ${$$[$0-5]}`+'\"}');
             this.$ = ['','','',''];
        }

break;
case 173:

        var n = tab.getPositionAmbito($$[$0-5]);
        if(n!=null)
        {
            if(n.tipo.toUpperCase() == 'STRING')
            {
                var expr = $$[$0-1];
                if(expr[5] < n.valor.length)
                {
                    var valor = '';
                    var temp = Temp.getTemporal();
                    if(n.entorno == 'global')
                    {
                        valor += `${temp} = heap[${n.position}];\n`;
                    }
                    else
                    {
                        valor += `${temp} = stack[${n.position}];\n`;
                    }
                    valor += `${temp} = ${temp} + 1;\n`;
                    var temp1 = Temp.getTemporal();
                    valor += `${temp1} = ${temp} + ${expr[5]};\n`;

                    var r = [];
                    r[0] = "STRING";
                    r[1] = temp1;
                    r[2] = ''
                    r[3] = valor;
                    r[4] = '';
                    r[5] = n.valor.charAt(expr[5]);
                    r[6] = n.valor.charAt(expr[5]);
                    r[7] = '';
                    r[8] = '';

                    this.$ = r;

                }
                else
                {
                    semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, la posicion no se encuentra entre el rango del tamaño de la cadena.`+'\"}');
                    this.$ = ['','','',''];
                }
            }
            else
            {
                semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, la variable no es de tipo string`+'\"}');
                this.$ = ['','','',''];
            }
        }
        else
        {
             semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no existe la variable ${$$[$0-5]}`+'\"}');
             this.$ = ['','','',''];
        }

break;
case 174:

         var n = tab.getPositionAmbito($$[$0-5]);
         var arres = [];
         var poses = [];
         var poses1 = [];
         if(n!=null)
         {
             var valor = '';
             var temp  = Temp.getTemporal();
             var l = arr.getProf($$[$0-5]);
             var posss = 0;
             if(l>=$$[$0-4].length)
             {
                 var nivel = 1;
                 for(let posi of $$[$0-4])
                 {
                     var m = arr.getTam($$[$0-5],nivel);
                     var pass = false;

                     if(posi[12][0] != '')
                     {
                         if(posi[12][0].toUpperCase() == 'NUMBER')
                         {
                             var num = posi[12][6];
                             if(num <= (m-1))
                             {
                                 arres.push(m);
                                 poses.push(posi[12][1]);
                                 poses1.push(posi[12][6]);
                                 valor += posi[12][3] + '\n';
                                 posss = posss * m + num;
                                 pass = true;
                             }
                             else
                             {
                                 pass = false;
                                 semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, posicion fuera del rango, nivel: ${nivel}, tamaño: ${m}, posicion: ${posi[12][6]}`+'\"}');
                                 this.$ = ['','','',''];
                                 break;
                             }
                         }
                         else
                          {
                              pass = false;
                              semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no se puede realizar la operacion`+'\"}');
                              this.$ = ['','','',''];
                              break;
                          }
                     }
                     else
                     {
                        var n1 = tab.getPositionAmbito(posi[12][4]);
                        if(n1!=null)
                        {
                            if(n1.rol.toUpperCase() != 'ARREGLO')
                            {
                                if(n1.tipo.toUpperCase() == 'NUMBER')
                                {
                                     var num = Number(n1.valor);
                                     if(num <= (m-1))
                                     {
                                         arres.push(m);

                                         var temp = Temp.getTemporal();
                                         posss = posss * m + n1.valor;
                                         poses.push(temp);
                                         poses1.push(n1.valor);
                                         if(n1.entorno == 'global')
                                         {
                                            valor += `${temp} = heap[${n1.position}];\n`;
                                         }
                                         else
                                         {
                                            valor += `${temp} = heap[${n1.position}];\n`;
                                         }
                                         pass = true;
                                     }
                                     else
                                     {
                                         pass = false;
                                         semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, posicion fuera del rango, nivel: ${nivel}, tamaño: ${m}, posicion: ${n1.valor}`+'\"}');
                                         this.$ = ['','','',''];
                                         break;
                                     }
                                }
                                else
                                {
                                         pass = false;
                                         semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no se puede realizar la operacion.`+'\"}');
                                         this.$ = ['','','',''];
                                         break;
                                }
                            }
                            else
                            {
                                 pass = false;
                                 semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no se puede realizar la operacion.`+'\"}');
                                 this.$ = ['','','',''];
                                 break;
                            }

                        }
                        else
                        {
                             pass = false;
                             semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, variable no existe: ${posi[12][0]}`+'\"}');
                             this.$ = ['','','',''];
                             break;
                        }

                     }
                     nivel++;
                 }
                 if(pass)
                 {
                    var temp0 = Temp.getTemporal();
                    var temp = Temp.getTemporal();

                    valor += `${temp} = ${poses[0]};\n`

                    for(var a = 1; a<arres.length; a++)
                    {
                        valor += `${temp0} = ${temp} * ${arres[a-1]};\n`;
                        valor += `${temp} = ${temp0} + ${poses[a]};\n`;
                        valor += `${temp} = heap[(int) ${temp}] +2;\n`;
                    }

                    var temp1 = Temp.getTemporal();
                    var temp2 = Temp.getTemporal();
                    if(n.entorno == 'global')
                    {
                        valor += `${temp1} = heap[${n.position}];\n`;
                    }
                    else
                    {
                        valor += `${temp1} = stack[${n.position}];\n`;
                    }
                    valor += `${temp2} = heap[(int)${temp1}] + 1;\n`;

                    var temp3 = Temp.getTemporal();
                    valor += `${temp3} = ${temp2} + ${temp};\n`;

                    var temp4 = Temp.getTemporal();
                    valor += `${temp4} = heap[(int)${temp3}];\n`;

                   var temp5 = Temp.getTemporal();
                   var temp6 = Temp.getTemporal();

                   valor += `${temp5} = ${temp2} + ${poses[0]};\n`;
                   for(var a = 1; a<poses.length; a++)
                   {
                       valor += `${temp6} = heap[(int) ${temp5}] + 2;\n`;
                       valor += `${temp5} = ${temp6} + ${poses[a]};\n`;
                   }

                   valor += `${temp6} = heap[(int) ${temp5}];\n`;


                    var arrayss = arr.getValores(n.name);
                    if(typeof arrayss[0] == 'string')
                    {
                        var temp7 = Temp.getTemporal();
                        valor += `${temp7} = 0;\n`;

                        var temp8 = Temp.getTemporal();
                        valor += `${temp8} = heap[(int)${temp6}];\n`;
                        valor += `${temp6} = ${temp6} + 1;\n`;

                        var temp9 = Temp.getTemporal();
                        valor += `${temp9} = ${temp8} + 1;\n`;

                        var temp10 = Temp.getTemporal();
                        var temp11 = Temp.getTemporal();

                        var label = Label.getBandera();
                        var label1 = Label.getBandera();
                        var label2 = Label.getBandera();
                        var label3 = Label.getBandera();


                        valor += `${label}:\n`;
                        valor += `\tif(${temp7}==${temp9}) goto ${label1};\n`;
                        valor += `\t${temp10} = ${temp6} + ${temp7};\n`
                        valor += `\t${temp11} = heap[(int)${temp10}];\n`;
                        valor += `\tif(${temp11}>=97) goto ${label2};\n`;
                        valor += `\t${temp7} = ${temp7} + 1;\n`;
                        valor += `\tgoto ${label};\n`;
                        valor += `${label2}:\n`;
                        valor += `\tif(${temp11}<=122) goto ${label3};\n`;
                        valor += `\t${temp7} = ${temp7} + 1;\n`;
                        valor += `\tgoto ${label};\n`;
                        valor += `${label3}:\n`;
                        valor += `\t${temp11} = ${temp11} - 32;\n`;
                        valor += `\theap[(int)${temp10}] = ${temp11};\n`;
                        valor += `\t${temp7} = ${temp7} + 1;\n`;
                        valor += `\tgoto ${label};\n`;
                        valor += `${label1}:\n`;

                        arr.changeValue(n.name, arrayss[posss].toUpperCase(), poses1);
                        var r = [];
                        r[0] = typeof arrayss[0];
                        r[1] = temp11;
                        r[2] = '';
                        r[3] = valor;
                        r[4] = '';
                        r[5] = arrayss[posss].toUpperCase();
                        r[6] = arrayss[posss].toUpperCase();
                        this.$ = r;
                    }
                    else
                    {
                        semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no se puede realizar la operacion, tipo invalido: ${typeof arrayss[0]}`+'\"}');
                        this.$ = ['','','',''];
                    }
                 }
                 else
                 {
                    semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no se puede realizar la operacion.`+'\"}');
                    this.$ = ['','','',''];
                 }
             }
             else
             {
                 semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, tamaño muy grande para el arreglo ${$$[$0-5]}, el tamaño del arreglo es de: ${l}`+'\"}');
                 this.$ = ['','','',''];
             }
         }
         else
         {
              semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no existe la variable ${$$[$0-5]}`+'\"}');
              this.$ = ['','','',''];
         }

break;
case 175:

         var n = tab.getPositionAmbito($$[$0-5]);
         var arres = [];
         var poses = [];
         var poses1 = [];
         if(n!=null)
         {
             var valor = '';
             var temp  = Temp.getTemporal();
             var l = arr.getProf($$[$0-5]);
             var posss = 0;
             if(l>=$$[$0-4].length)
             {
                 var nivel = 1;
                 for(let posi of $$[$0-4])
                 {
                     var m = arr.getTam($$[$0-5],nivel);
                     var pass = false;

                     if(posi[12][0] != '')
                     {
                         if(posi[12][0].toUpperCase() == 'NUMBER')
                         {
                             var num = posi[12][6];
                             if(num <= (m-1))
                             {
                                 arres.push(m);
                                 poses.push(posi[12][1]);
                                 poses1.push(posi[12][6]);
                                 valor += posi[12][3] + '\n';
                                 posss = posss * m + num;
                                 pass = true;
                             }
                             else
                             {
                                 pass = false;
                                 semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, posicion fuera del rango, nivel: ${nivel}, tamaño: ${m}, posicion: ${posi[12][6]}`+'\"}');
                                 this.$ = ['','','',''];
                                 break;
                             }
                         }
                         else
                          {
                              pass = false;
                              semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no se puede realizar la operacion`+'\"}');
                              this.$ = ['','','',''];
                              break;
                          }
                     }
                     else
                     {
                        var n1 = tab.getPositionAmbito(posi[12][4]);
                        if(n1!=null)
                        {
                            if(n1.rol.toUpperCase() != 'ARREGLO')
                            {
                                if(n1.tipo.toUpperCase() == 'NUMBER')
                                {
                                     var num = Number(n1.valor);
                                     if(num <= (m-1))
                                     {
                                         arres.push(m);

                                         var temp = Temp.getTemporal();
                                         posss = posss * m + n1.valor;
                                         poses.push(temp);
                                         poses1.push(n1.valor);
                                         if(n1.entorno == 'global')
                                         {
                                            valor += `${temp} = heap[${n1.position}];\n`;
                                         }
                                         else
                                         {
                                            valor += `${temp} = heap[${n1.position}];\n`;
                                         }
                                         pass = true;
                                     }
                                     else
                                     {
                                         pass = false;
                                         semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, posicion fuera del rango, nivel: ${nivel}, tamaño: ${m}, posicion: ${n1.valor}`+'\"}');
                                         this.$ = ['','','',''];
                                         break;
                                     }
                                }
                                else
                                {
                                         pass = false;
                                         semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no se puede realizar la operacion.`+'\"}');
                                         this.$ = ['','','',''];
                                         break;
                                }
                            }
                            else
                            {
                                 pass = false;
                                 semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no se puede realizar la operacion.`+'\"}');
                                 this.$ = ['','','',''];
                                 break;
                            }

                        }
                        else
                        {
                             pass = false;
                             semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, variable no existe: ${posi[12][0]}`+'\"}');
                             this.$ = ['','','',''];
                             break;
                        }

                     }
                     nivel++;
                 }
                 if(pass)
                 {
                    var temp0 = Temp.getTemporal();
                    var temp = Temp.getTemporal();

                    valor += `${temp} = ${poses[0]};\n`

                    for(var a = 1; a<arres.length; a++)
                    {
                        valor += `${temp0} = ${temp} * ${arres[a-1]};\n`;
                        valor += `${temp} = ${temp0} + ${poses[a]};\n`;
                        valor += `${temp} = heap[(int) ${temp}] +2;\n`;
                    }

                    var temp1 = Temp.getTemporal();
                    var temp2 = Temp.getTemporal();
                    if(n.entorno == 'global')
                    {
                        valor += `${temp1} = heap[${n.position}];\n`;
                    }
                    else
                    {
                        valor += `${temp1} = stack[${n.position}];\n`;
                    }
                    valor += `${temp2} = heap[(int)${temp1}] + 1;\n`;

                    var temp3 = Temp.getTemporal();
                    valor += `${temp3} = ${temp2} + ${temp};\n`;

                    var temp4 = Temp.getTemporal();
                    valor += `${temp4} = heap[(int)${temp3}];\n`;

                   var temp5 = Temp.getTemporal();
                   var temp6 = Temp.getTemporal();

                   valor += `${temp5} = ${temp2} + ${poses[0]};\n`;
                   for(var a = 1; a<poses.length; a++)
                   {
                       valor += `${temp6} = heap[(int) ${temp5}] + 2;\n`;
                       valor += `${temp5} = ${temp6} + ${poses[a]};\n`;
                   }

                   valor += `${temp6} = heap[(int) ${temp5}];\n`;


                    var arrayss = arr.getValores(n.name);
                    if(typeof arrayss[0] == 'string')
                    {
                        var temp7 = Temp.getTemporal();
                        valor += `${temp7} = 0;\n`;

                        var temp8 = Temp.getTemporal();
                        valor += `${temp8} = heap[(int)${temp6}];\n`;
                        valor += `${temp6} = ${temp6} + 1;\n`;

                        var temp9 = Temp.getTemporal();
                        valor += `${temp9} = ${temp8} + 1;\n`;

                        var temp10 = Temp.getTemporal();
                        var temp11 = Temp.getTemporal();

                        var label = Label.getBandera();
                        var label1 = Label.getBandera();
                        var label2 = Label.getBandera();
                        var label3 = Label.getBandera();


                        valor += `${label}:\n`;
                        valor += `\tif(${temp7}==${temp9}) goto ${label1};\n`;
                        valor += `\t${temp10} = ${temp6} + ${temp7};\n`
                        valor += `\t${temp11} = heap[(int)${temp10}];\n`;
                        valor += `\tif(${temp11}>=65) goto ${label2};\n`;
                        valor += `\t${temp7} = ${temp7} + 1;\n`;
                        valor += `\tgoto ${label};\n`;
                        valor += `${label2}:\n`;
                        valor += `\tif(${temp11}<=90) goto ${label3};\n`;
                        valor += `\t${temp7} = ${temp7} + 1;\n`;
                        valor += `\tgoto ${label};\n`;
                        valor += `${label3}:\n`;
                        valor += `\t${temp11} = ${temp11} + 32;\n`;
                        valor += `\theap[(int)${temp10}] = ${temp11};\n`;
                        valor += `\t${temp7} = ${temp7} + 1;\n`;
                        valor += `\tgoto ${label};\n`;
                        valor += `${label1}:\n`;

                        arr.changeValue(n.name, arrayss[posss].toLowerCase(), poses1);
                        var r = [];
                        r[0] = typeof arrayss[0];
                        r[1] = temp11;
                        r[2] = '';
                        r[3] = valor;
                        r[4] = '';
                        r[5] = arrayss[posss].toLowerCase();
                        r[6] = arrayss[posss].toLowerCase();
                        this.$ = r;
                    }
                    else
                    {
                        semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no se puede realizar la operacion, tipo invalido: ${typeof arrayss[0]}`+'\"}');
                        this.$ = ['','','',''];
                    }
                 }
                 else
                 {
                    semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no se puede realizar la operacion.`+'\"}');
                    this.$ = ['','','',''];
                 }
             }
             else
             {
                 semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, tamaño muy grande para el arreglo ${$$[$0-5]}, el tamaño del arreglo es de: ${l}`+'\"}');
                 this.$ = ['','','',''];
             }
         }
         else
         {
              semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no existe la variable ${$$[$0-5]}`+'\"}');
              this.$ = ['','','',''];
         }

break;
case 176:

        var n = tab.getPositionAmbito($$[$0-3]);
        if(n!=null)
        {
            var valor = '';
            var temp  = Temp.getTemporal();
            var l = arr.getProf($$[$0-3]);
            if(l>=$$[$0-2].length)
            {
                var nivel = 1;
                k = null;
                for(let posi of $$[$0-2])
                {
                    var m = arr.getTam($$[$0-3],nivel);
                    var pass = false;

                    if(posi[12][0] != '')
                    {
                        if(posi[12][0].toUpperCase() == 'NUMBER')
                        {
                            var num = posi[12][6];
                            if(num <= (m-1))
                            {
                                //console.log(k!=null);
                                if(k!=null)
                                {
                                    //console.log(k);
                                    k = arr.getsize1(k,posi[12][6]);
                                }
                                else
                                {
                                    k = arr.getTampos($$[$0-3],nivel, posi[12][6]);
                                }
                                pass = true;
                            }
                            else
                            {
                                pass = false;
                                semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, posicion fuera del rango, nivel: ${nivel}, tamaño: ${m}, posicion: ${posi[12][6]}`+'\"}');
                                this.$ = ['','','',''];
                            }
                        }
                    }
                    else
                    {

                    }
                    nivel++;
                }
                if(pass)
                {
                   //console.log(k);
                   if(k!=null && k[0] instanceof intermedia.arreglo)
                   {
                        var valor = '\n';
                        var temp = Temp.getTemporal();
                        var temp1 = Temp.getTemporal();
                        var temp2 = Temp.getTemporal();
                        valor += `${temp} = ${n.position};\n`;
                        if(n.entorno == 'global')
                        {
                            valor += `${temp1} = heap[(int)${temp}];\n`;
                        }
                        else
                        {
                            valor += `${temp1} = stack[(int)${temp}];\n`;
                        }

                        valor += `${temp2} = heap[(int)${temp1}];\n`;
                        var temp3 = Temp.getTemporal();
                        valor += `${temp3} = ${k[0].positions[0]};\n`;

                         var r = [];
                         r[0] = "NUMBER";
                         r[1] = temp3;
                         r[2] = ''
                         r[3] = valor;
                         r[4] = '';
                         r[5] = Number(k[0].positions[0]);
                         r[6] = Number(k[0].positions[0]);
                         r[7] = '';
                         r[8] = '';

                         this.$ = r;

                   }
                   else
                   {
                        semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, el valor en la ultima posicion no es un arreglo.`+'\"}');
                        this.$ = ['','','',''];
                   }
                }
            }
            else
            {
                semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, tamaño muy grande para el arreglo ${$$[$0-3]}, el tamaño del arreglo es de: ${l}`+'\"}');
                this.$ = ['','','',''];
            }
        }
        else
        {
             semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no existe la variable ${$$[$0-3]}`+'\"}');
             this.$ = ['','','',''];
        }

break;
case 179:

         var n = tab.getPositionAmbito($$[$0-3]);
         //console.log(n);
         var arres = [];
         var poses = [];
         var poses1 = [];
         if(n!=null)
         {
             var valor = '';
             var temp  = Temp.getTemporal();
             var l = arr.getProf($$[$0-3]);
             var posss = 0;
             if(l>=$$[$0-2].length)
             {
                 var nivel = 1;
                 for(let posi of $$[$0-2])
                 {
                     var m = arr.getTam($$[$0-3],nivel);
                     var pass = false;

                     if(posi[12][0] != '')
                     {
                         if(posi[12][0].toUpperCase() == 'NUMBER')
                         {
                             var num = posi[12][6];
                             if(num <= (m-1))
                             {
                                 arres.push(m);
                                 poses.push(posi[12][1]);
                                 poses1.push(posi[12][6]);
                                 valor += posi[12][3] + '\n';
                                 posss = posss * m + num;
                                 pass = true;
                             }
                             else
                             {
                                 pass = false;
                                 semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, posicion fuera del rango, nivel: ${nivel}, tamaño: ${m}, posicion: ${posi[12][6]}`+'\"}');
                                 this.$ = ['','','',''];
                                 break;
                             }
                         }
                         else
                          {
                              pass = false;
                              semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no se puede realizar la operacion, ${posi[12][0]}`+'\"}');
                              this.$ = ['','','',''];
                              break;
                          }
                     }
                     else
                     {
                        var n1 = tab.getPositionAmbito(posi[12][4]);
                        if(n1!=null)
                        {
                            if(n1.rol.toUpperCase() != 'ARREGLO')
                            {
                                if(n1.tipo.toUpperCase() == 'NUMBER')
                                {
                                     var num = Number(n1.valor);
                                     if(num <= (m-1))
                                     {
                                         arres.push(m);

                                         var temp = Temp.getTemporal();
                                         posss = posss * m + n1.valor;
                                         poses.push(temp);
                                         poses1.push(n1.valor);
                                         if(n1.entorno == 'global')
                                         {
                                            valor += `${temp} = heap[${n1.position}];\n`;
                                         }
                                         else
                                         {
                                            valor += `${temp} = heap[${n1.position}];\n`;
                                         }
                                         pass = true;
                                     }
                                     else
                                     {
                                         pass = false;
                                         semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, posicion fuera del rango, nivel: ${nivel}, tamaño: ${m}, posicion: ${n1.valor}`+'\"}');
                                         this.$ = ['','','',''];
                                         break;
                                     }
                                }
                                else
                                {
                                         pass = false;
                                         semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no se puede realizar la operacion.`+'\"}');
                                         this.$ = ['','','',''];
                                         break;
                                }
                            }
                            else
                            {
                                 pass = false;
                                 semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no se puede realizar la operacion.`+'\"}');
                                 this.$ = ['','','',''];
                                 break;
                            }

                        }
                        else
                        {
                             pass = false;
                             semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, variable no existe: ${posi[12][0]}`+'\"}');
                             this.$ = ['','','',''];
                             break;
                        }

                     }
                     nivel++;
                 }
                 if(pass)
                 {
                    var temp0 = Temp.getTemporal();
                    var temp = Temp.getTemporal();

                    valor += `${temp} = ${poses[0]};\n`

                    for(var a = 1; a<arres.length; a++)
                    {
                        valor += `${temp0} = ${temp} * ${arres[a-1]};\n`;
                        valor += `${temp} = ${temp0} + ${poses[a]};\n`;
                        valor += `${temp} = heap[(int) ${temp}] +2;\n`;
                    }

                    var temp1 = Temp.getTemporal();
                    var temp2 = Temp.getTemporal();
                    if(n.entorno == 'global')
                    {
                        valor += `${temp1} = heap[${n.position}];\n`;
                    }
                    else
                    {
                        valor += `${temp1} = stack[${n.position}];\n`;
                    }
                    valor += `${temp2} = heap[(int)${temp1}] + 1;\n`;

                   // var temp3 = Temp.getTemporal();
                    //valor += `${temp3} = ${temp2} + ${temp};\n`;

                    //var temp4 = Temp.getTemporal();
                    //valor += `${temp4} = heap[(int)${temp3}];\n`;

                   var temp5 = Temp.getTemporal();
                   var temp6 = Temp.getTemporal();

                   valor += `${temp5} = ${temp2} + ${poses[0]};\n`;
                   for(var a = 1; a<poses.length; a++)
                   {
                       valor += `${temp6} = heap[(int) ${temp5}] + 2;\n`;
                       valor += `${temp5} = ${temp6} + ${poses[a]};\n`;
                   }

                   valor += `${temp6} = heap[(int) ${temp5}];\n`;


                    var arrayss = arr.getValores(n.name);
                    if((typeof arrayss[0]).toString().toLowerCase() == $$[$0][0].toLowerCase())
                    {
                        if($$[$0][0].toUpperCase() == 'STRING')
                        {
                           var temp7 = Temp.getTemporal();
                           valor += temp7 + ' = ' + temp5 + ';';
                           var temp8 = Temp.getTemporal();
                           valor += temp8 + ' = ' + posS + ';';
                           valor += '\n';
                           var temp9 = Temp.getTemporal();
                           valor += temp9 + ' = ' + posS + ';';
                           valor += '\n';
                           if(entorno == 'global')
                           {
                               valor += 'heap[(int)'+temp7+'] = ' + temp8 + ';';
                               valor += '\n';
                           }
                           else
                           {
                               valor += 'stack[(int)'+temp7+'] = ' + temp8 + ';';
                               valor += '\n';
                           }

                           valor += temp8 + ' = ' + temp8 + ' + 1;';
                           valor += '\n';
                           valor += 'heap[(int)'+temp9+'] = ' + temp8 + ';\n';
                           var temp10 = Temp.getTemporal();
                           valor += temp10 + ' = '+ $$[$0][5].length + ';';
                           valor += '\n';
                           valor += 'heap[(int)'+temp8+'] = ' + temp10 + ';';
                           valor += '\n';

                          for(var a = 0; a<$$[$0][5].length; a++)
                          {
                              valor += temp8 + ' = ' + temp8 + ' + 1;';
                              valor += '\n';
                              valor += 'heap[(int)'+temp8+'] = ' + $$[$0][5].charCodeAt(a) + ';';
                              valor += '\n'
                          }
                        }
                        else
                        {
                            valor += $$[$0][3] + '\n';
                            valor += `heap[(int)${temp5}] = ${$$[$0][1]};\n`;
                        }

                        arr.changeValue(n.name, $$[$0][5], poses1);

                        var values = arr.get(n.name);
                        n.valor = values;
                        tab.update(n.name,n);
                        arr.update(n.name,values);

                        var r = [];
                        r[0] = typeof arrayss[0];
                        r[1] = temp6;
                        r[2] = '';
                        r[3] = valor;
                        r[4] = '';
                        r[5] = $$[$0][5];
                        r[6] = $$[$0][5];
                        this.$ = r;
                    }
                    else if($$[$0][0].toUpperCase() == 'ARREGLO')
                    {
                        var temp7 = Temp.getTemporal();
                        valor += temp7 + ' = ' + temp5 + ';';
                        valor += '\n';

                        var temp8 = Temp.getTemporal();
                        var temp9 = Temp.getTemporal();
                        valor += temp8 + ' = ' + posA + ';';
                        valor += '\n';
                        valor += temp9+ ' = ' + posA + ';\n';
                        valor += 'heap[(int)'+temp7+'] = ' + temp8 + ';';
                        valor += '\n';

                        valor += temp8 + ' = ' + temp8 + ' + 1;';
                        valor += '\n';
                        valor += 'heap[(int)'+temp9+'] = ' + temp8 + ';\n';

                        var temp2 = Temp.getTemporal();
                        valor += temp2 + ' = '+ $$[$0][7] + ';';
                        valor += '\n';
                        valor += 'heap[(int)'+temp8+'] = ' + temp2 + ';';
                        valor += '\n';
                        valor += $$[$0][1] + ' = ' + temp8 + ';';
                        valor += '\n';
                        valor += $$[$0][3];
                        valor += '\n';

                        arr.changeValue(n.name, $$[$0][6], poses1);

                        var values = arr.get(n.name);
                        n.valor = values;
                        tab.update(n.name,n);
                        arr.update(n.name,values);

                        var r = [];
                        r[0] = 'ARREGLO';
                        r[1] = temp6;
                        r[2] = '';
                        r[3] = valor;
                        r[4] = '';
                        r[5] = $$[$0][6];
                        r[6] = $$[$0][6];
                        this.$ = r;

                    }
                    else if($$[$0][0] == '')
                    {
                        var nn = tab.getPositionAmbito($$[$0][4]);
                        if(nn!= null)
                        {
                            if((typeof arrayss[0]).toString().toLowerCase() == $$[$0][0].toLowerCase())
                            {
                                switch(nn.tipo.toUpperCase())
                                {
                                    case 'STRING':
                                        if(nn.rol == 'Parametro')
                                        {
                                            var temp20 = Temp.getTemporal();
                                            var temp21 = Temp.getTemporal();
                                            var temp22 = Temp.getTemporal();

                                            valor += `${temp20} = ${n.valor};\n`;
                                            valor += `${temp21} = heap[(int) ${temp20}];\n`;
                                            valor +=
                                            valor += `heap[(int)${temp5}] = \n`;
                                        }
                                        else
                                        {

                                        }
                                        break;
                                    case 'NUMBER':
                                        break;
                                    case 'BOOLEAN':
                                        break;
                                    default:
                                        semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no existe puede ejecutarse la operacion.`+'\"}');
                                        this.$ = ['','','',''];
                                        break;
                                }
                            }
                            else
                            {
                                semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no se puede realizar la operacion, tipo invalido: ${typeof arrayss[0]}`+'\"}');
                                this.$ = ['','','',''];
                            }
                        }
                        else
                        {
                            semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no existe la variable: ${$$[$0][4]}`+'\"}');
                            this.$ = ['','','',''];
                        }
                    }
                    else
                    {
                        semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no se puede realizar la operacion, tipo invalido: ${typeof arrayss[0]}`+'\"}');
                        this.$ = ['','','',''];
                    }
                 }
                 else
                 {
                    semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no se puede realizar la operacion.`+'\"}');
                    this.$ = ['','','',''];
                 }
             }
             else
             {
                 semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, tamaño muy grande para el arreglo ${$$[$0-3]}, el tamaño del arreglo es de: ${l}`+'\"}');
                 this.$ = ['','','',''];
             }
         }
         else
         {
              semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no existe la variable ${$$[$0-3]}`+'\"}');
              this.$ = ['','','',''];
         }

break;
case 180:

        var temp = Temp.getTemporal();
        var r = [];
        r[0] = "ARREGLO";
        r[1] = temp;
        r[2] = '';

        var valor = '';
        valor += temp + ' = ' + temp + ' + 1;';
        valor += '\n';
        valor += 'heap[(int)'+temp+'] = -1;';
        valor += '\n';
        var a = new intermedia.arreglo();
        a.c3d = valor;
        a.positions.push(0);

        r[3] = valor;
        r[4] = '';
        r[5] = [];
        r[6] = a;
        r[7] = 0;
        r[8] = '';

        this.$ = r;

break;
case 181:


        var temp = Temp.getTemporal();
        var r = [];
        r[0] = "ARREGLO";
        r[1] = temp;
        r[2] = '';
        var lm = false;
        var valor = '';
        var arreglito = new intermedia.arreglo();
        var vals = [];
        if($$[$0-1][0][6] instanceof intermedia.arreglo)
        {
            var tipo = $$[$0-1][0][6].tipo.toUpperCase();
            var pass = false;
            r[8] = tipo;

            for(let pos of $$[$0-1])
            {
                lm = true;

                valor += temp + ' = ' + temp + ' + 1;';
                valor += '\n';
                if(pos[6] instanceof intermedia.arreglo)
                {
                    vals.push(pos[6]);
                    if(pos[6].tipo.toUpperCase() == tipo)
                    {
                        pass = true;
                        var aux = pos[6].tipo.toUpperCase();
                        switch(aux)
                        {
                            case 'STRING':
                                var val = pos[6].valor;
                                var temp0 = Temp.getTemporal();
                                var temp1 = Temp.getTemporal();
                                valor += temp1 + ' = ' + posS + ';';
                                valor += temp0 + ' = ' + posS + ';';
                                valor += '\n';
                                valor += 'heap[(int)'+temp+'] = ' + temp1 + ';';
                                valor += '\n';
                                valor += temp1 + ' = ' + temp1 + ' + 1;';
                                valor += '\n';
                                var temp2 = Temp.getTemporal();
                                valor += temp2 + ' = '+ val.length + ';';
                                valor += '\n';
                                valor += 'heap[(int)'+temp1+'] = ' + temp2 + ';';
                                valor += '\n';
                                valor += pos[6].temporal + ' = ' + temp1 + ';';
                                valor += '\n';
                                valor += pos[6].c3d;
                                valor += '\n';
                                valor += 'heap[(int)'+temp+'] = '+temp0+';';
                                valor += '\n';

                                //if(pos >0 && pos != 0) pos++;
                                //if (pos == 0) pos++;
                                posS += 5000;
                                break;
                            case 'NUMBER':
                                valor += pos[6].c3d;
                                valor += '\n';
                                valor += 'heap[(int)'+temp+'] = '+pos[6].temporal+';';
                                valor += '\n';
                                break;
                            case 'BOOLEAN':
                                valor += pos[6].c3d;
                                valor += '\n';
                                valor += 'heap[(int)'+temp+'] = '+pos[6].temporal+';';
                                valor += '\n';
                                break;

                            case 'ARREGLO':
                                var val = pos[6].positions;
                                var post = 1;
                                for(let m of val) post *= m;

                                var temp0 = Temp.getTemporal();
                                var temp1 = Temp.getTemporal();
                                valor += temp1 + ' = ' + posA + ';\n';
                                valor += temp0 + ' = ' + posA + ';\n';

                                var temp2 = Temp.getTemporal();
                                valor += temp2 + ' = '+ post + ';';
                                valor += '\n';
                                valor += `${temp1} = ${temp1} + 1;\n`
                                valor += 'heap[(int)'+temp0+'] = ' + temp1 + ';';
                                valor += '\n';
                                valor += `heap[(int)${temp1}] = ${temp2};\n`;
                                valor += pos[6].temporal + ' = ' + temp1 + ';';
                                valor += '\n';
                                valor += pos[6].c3d;
                                valor += '\n';
                                valor += 'heap[(int)'+temp+'] = '+temp0+';';
                                valor += '\n';

                                //if(pos >0 && pos != 0) pos++;
                                //if (pos == 0) pos++;
                                posA += 5000;
                                break;
                        }
                    }
                    else
                    {
                        pass = false;
                        break;
                    }
                }
                else
                {
                    pass = false;
                    break;
                }
            }
            if(pass)
            {
                arreglito.c3d = valor;
                arreglito.temporal = temp;
                arreglito.bandera = '';
                arreglito.tipo = 'ARREGLO';
                arreglito.valor = vals;
                r[3] = valor;
                r[4] = '';
                r[5] = [];

                var posis = [];
                posis.push($$[$0-1].length);
                if( $$[$0-1][0][6].tipo.toUpperCase() == 'ARREGLO' )
                {
                    for(let o of $$[$0-1][0][6].positions)
                    {
                        posis.push(o);
                    }
                }
                arreglito.positions = posis;
                r[6] = arreglito;
                var rra = 1;
                for(let v of arreglito.positions)rra *= v;
                r[7] = rra;
                this.$ = r;
            }
            else
            {
                    semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no se puede realizar dicha operacion., error en implementacion de tipos.`+'\"}');
                    this.$ = ['','','',''];
            }
        }

        if(!lm)
        {
            semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no se puede realizar dicha operacion.`+'\"}');
            this.$ = ['','','','','','','',''];
        }


break;
case 182:

        this.$ = [];
        var r = [];

          if($$[$0][0] != '')
          {   var arrs = new intermedia.arreglo();
              if($$[$0][0].tipo == 'ARREGLO')
              {
                  arrs.positions.push($$[$0][7]);
              }
              arrs.valor.push($$[$0][6]);
              arrs.tipo = $$[$0][0];
              arrs.c3d = $$[$0][3];
              arrs.temporal = $$[$0][1];
              arrs.bandera = $$[$0][2];
              r[0] = 'ARREGLO';
              r[1] = $$[$0][1];
              r[2] = $$[$0][2];
              r[3] = $$[$0][3];
              r[4] = '';
              r[5] = $$[$0][6];
              r[6] = arrs;
              r[7] = 1;

          }
          else
          {
                var n = tab.getPositionAmbito($$[$0][4]);
                if(n!=null)
                {

                }
                else
                {
                    semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no existe la variable ${$$[$0][4]}.`+'\"}');
                    r = ['','','','','','','',''];
                }
          }
        this.$.push(r);

break;
case 183:


        r1 = $$[$0-2];
        if($$[$0][0].tipo != '')
         {
             var r = [];
             var arrs = new intermedia.arreglo();
             if($$[$0][0].tipo == 'ARREGLO')
             {
                 arrs.positions.push($$[$0][7]);
             }
             arrs.valor.push($$[$0][6]);
             arrs.tipo = $$[$0][0];
             arrs.c3d = $$[$0][3];
             arrs.temporal = $$[$0][1];
             arrs.bandera = $$[$0][2];

             r[0] = 'ARREGLO';
             r[1] = $$[$0][1];
             r[2] = $$[$0][2];
             r[3] = $$[$0][3];
             r[4] = '';
             r[5] = '';
             r[6] = arrs;
             r[7] = 1;
             this.$.push(r);
         }
        else
        {

        }


        this.$ = r1;


break;
case 204:

        if($$[$0][0] == '')
        {
            var n = tab.getPositionAmbito($$[$0][4]);
            if(n != null)
            {
                var r = [];
                var valor = '';
                r[0] = n.tipo;

                var temp0 = Temp.getTemporal();
                var temp = Temp.getTemporal();
                valor += $$[$0][3];

                valor += temp0 + ' = '+n.position +';\n';
                if(n.entorno == 'global')
                {
                    valor += temp + ' = heap[(int)'+temp0+'];\n';
                }
                else
                {
                    valor += temp + ' = stack[(int)'+temp0+'];\n';
                }


                r[1] = temp;
                r[2] = '';
                r[3] = valor;
                r[4] = '';
                r[5] = '';
                r[6] = n.valor;

                this.$ = r;
            }
            else
            {
                semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no se puede realizar dicha operacion., la variable ${$$[$0][4]} no existe.`+'\"}');
                this.$ = ['','','',''];
            }
        }
        else if($$[$0][0] != 'STRING' && $$[$0][0] != 'BOOLEAN')
        {
            this.$ = $$[$0];
        }


break;
case 205:

        if($$[$0][0] != 'STRING' && $$[$0][0] != 'BOOLEAN')
        {
            if($$[$0][0] == '')
            {
                var n = tab.getPositionAmbito($$[$0][4]);
                if( n != null)
                {
                    if(n.tipo.toUpperCase() != 'STRING' && n.tipo.toUpperCase() != 'BOOLEAN')
                    {
                        var r = [];
                        var valor = '';
                        var temp0 = Temp.getTemporal();
                        valor += temp0 + ' = ' + n.position + ';\n';
                        valor += '';

                        var temp = Temp.getTemporal();
                        if(n.entorno == 'global')
                        {
                            valor += temp + ' = heap[(int)'+temp0+'];\n';
                        }
                        else
                        {
                            valor += temp + ' = stack[(int)'+temp0+'];\n';
                        }


                        var temp1 = Temp.getTemporal();
                        valor += temp1 + ' = -1 * ' + temp + ';\n';

                        r[0] = 'NUMBER';
                        r[1] = temp1;
                        r[2] = '';
                        r[3] = valor;
                        r[4] = '';
                        r[5] = '';
                        r[6] = Number(n.valor) * -1;

                        this.$ = r;
                    }
                    else
                    {
                        semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no se puede realizar dicha operacion.`+'\"}');
                        this.$ = ['','','',''];
                    }
                }
                else
                {
                    semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no se puede realizar dicha operacion., no existe la variable ${$$[$0][4]}.`+'\"}');
                    this.$ = ['','','',''];
                }
            }
            else
            {
                var r = [];
                var valor = '';
                valor += $$[$0][3];
                valor += '\n';

                var temp = Temp.getTemporal();
                valor += temp + ' = -1 * ' + $$[$0][1] + ';';

                r[0] = 'NUMBER';
                r[1] = temp;
                r[2] = '';
                r[3] = valor;
                r[4] = '';
                r[5] = '';
                r[6] = Number($$[$0][6]) * -1;

                this.$ = r;
            }
        }
        else
        {
            semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no se puede realizar dicha operacion.`+'\"}');
            this.$ = ['','','',''];
        }

break;
case 206:

        if($$[$0][0] !='STRING' && $$[$0][0] != 'NUMBER')
        {
            if($$[$0][0] == 'BOOLEAN')
            {
                var r = [];
                var valor = '';
                r[0] = 'BOOLEAN';

                var temp = Temp.getTemporal();
                var label = Label.getBandera();
                var label1 = Label.getBandera();
                valor += $$[$0][3];

                valor += 'if('+$$[$0][1]+' == 0) goto '+label+';\n';
                valor += temp + ' = 0;\n';
                valor += 'goto '+label1+';\n';

                valor += label + ':\n';
                valor += '\t'+temp + ' = 1;\n';
                valor += '\tgoto '+label1+';\n';

                valor += label1 + ':\n';

                r[1] = temp;
                r[2] = label1;
                r[3] = valor;
                r[4] = '';
                r[5] = '';
                r[6] = !$$[$0][6];

                this.$ = r;

            }
            else
            {
                var n = tab.getPositionAmbito($$[$0][4]);
                if(n != null)
                {
                    if(n.tipo.toUpperCase() == 'BOOLEAN')
                    {
                        var r = [];
                        var valor = '';
                        r[0] = 'BOOLEAN';

                        var temp0 = Temp.getTemporal();
                        var temp1 = Temp.getTemporal();
                        var temp = Temp.getTemporal();
                        var label = Label.getBandera();
                        var label1 = Label.getBandera();
                        valor += $$[$0][3];

                        valor += temp0 + ' = '+n.position +';\n';
                        if(n.entorno == 'global')
                        {
                            valor += temp1 + ' = heap[(int)'+temp0+'];\n';
                        }
                        else
                        {
                            valor += temp1 + ' = stack[(int)'+temp0+'];\n';
                        }


                        valor += 'if('+temp1+' == 0) goto '+label+';\n';
                        valor += temp + ' = 0;\n';
                        valor += 'goto '+label1+';\n';

                        valor += label + ':\n';
                        valor += '\t'+temp + ' = 1;\n';
                        valor += '\tgoto '+label1+';\n';

                        valor += label1 + ':\n';

                        r[1] = temp;
                        r[2] = label1;
                        r[3] = valor;
                        r[4] = '';
                        r[5] = '';
                        r[6] = !n.valor;

                        this.$ = r;
                    }
                    else
                    {
                        semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no se puede realizar dicha operacion.`+'\"}');
                        this.$ = ['','','',''];
                    }
                }
                else
                {
                    semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no se puede realizar dicha operacion., la variable ${$$[$0][4]} no existe.`+'\"}');
                    this.$ = ['','','',''];
                }
            }
        }
        else
        {
            semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no se puede realizar dicha operacion.`+'\"}');
            this.$ = ['','','',''];
        }

break;
case 212:

        if($$[$0-2][0] != 'STRING' && $$[$0][0] != 'STRING')
        {
            if($$[$0-2][0]!= '')
            {
                if($$[$0][0] != '')
                {
                        var valor = '';
                        var r = [];
                        valor += $$[$0-2][3];
                        valor += '\n';
                        valor += $$[$0][3];
                        valor += '\n';

                        var temp = Temp.getTemporal();
                        valor += temp +'='+$$[$0-2][1]+'*'+$$[$0][1]+';';

                        r[0] = 'NUMBER';
                        r[1] = temp;
                        r[2] = '';
                        r[3] = valor;
                        r[4] = '';
                        r[5] = '';
                        r[6] = Number($$[$0-2][6])*Number($$[$0][6]);
                        this.$ = r;
                }
                else
                {
                    var n = tab.getPositionAmbito($$[$0][4]);
                    if(n!=null)
                    {
                        var valor = '';
                        var r = [];
                        valor += $$[$0-2][3];
                        valor += '\n';

                        var tempant = Temp.getTemporal();
                        var tempant1 = Temp.getTemporal();

                        valor += tempant +'='+n.position+';\n';
                        if(n.entorno == 'global')
                        {
                            valor += tempant1 +'=heap[(int)'+tempant+'];\n';
                        }
                        else
                        {
                            valor += tempant1 +'=stack[(int)'+tempant+'];\n';
                        }


                        var temp = Temp.getTemporal();
                        valor += temp +'='+$$[$0-2][1]+'*'+tempant1+';';

                        r[0] = 'NUMBER';
                        r[1] = temp;
                        r[2] = '';
                        r[3] = valor;
                        r[4] = '';
                        r[5] = '';
                        r[6] = Number($$[$0-2][6])*Number(n.valor);
                        this.$ = r;
                    }
                    else
                    {
                        semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no existe la variable: ${$$[$0][4]}`+'\"}');
                        this.$ = ['','','',''];
                    }
                }
            }
            else
            {
                var n = tab.getPositionAmbito($$[$0-2][4]);
                if(n!=null)
                {
                    if($$[$0][0] != '')
                    {
                            var valor = '';
                            var r = [];
                            var tempant = Temp.getTemporal();
                            var tempant1 = Temp.getTemporal();

                            valor += tempant +'='+n.position+';\n';
                            valor += tempant1 +'=stack[(int)'+tempant+'];\n';
                            valor += $$[$0][3];
                            valor += '\n';

                            var temp = Temp.getTemporal();
                            valor += temp+'='+tempant1+'*'+$$[$0][1]+';';

                            r[0] = 'NUMBER';
                            r[1] = temp;
                            r[2] = '';
                            r[3] = valor;
                            r[4] = '';
                            r[5] = '';
                            r[6] = Number(n.valor)*Number($$[$0][6]);
                            this.$ = r;
                    }
                    else
                    {
                        var n1 = tab.getPositionAmbito($$[$0][4]);
                        if(n1!=null)
                        {
                            var valor = '';
                            var r = [];
                            var tempant = Temp.getTemporal();
                            var tempant1 = Temp.getTemporal();

                            valor += tempant +'='+n.position+';\n';
                            if(n.entorno == 'global')
                            {
                                valor += tempant1 +'=heap[(int)'+tempant+'];\n';
                                valor += '\n';
                            }
                            else
                            {
                                valor += tempant1 +'=stack[(int)'+tempant+'];\n';
                                valor += '\n';
                            }


                            var tempant11 = Temp.getTemporal();
                            var tempant111 = Temp.getTemporal();

                            valor += tempant11 +'='+n1.position+';\n';
                            if(n1.entorno == 'global')
                            {
                                valor += tempant111 +'=heap[(int)'+tempant11+'];\n';
                            }
                            else
                            {
                                valor += tempant111 +'=stack[(int)'+tempant11+'];\n';
                            }


                            var temp = Temp.getTemporal();
                            valor += temp +'='+tempant1+'*'+tempant111+';';

                            r[0] = 'NUMBER';
                            r[1] = temp;
                            r[2] = '';
                            r[3] = valor;
                            r[4] = '';
                            r[5] = '';
                            r[6] = Number(n.valor)*Number(n1.valor);
                            this.$ = r;
                        }
                        else
                        {
                            semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no existe la variable: ${$$[$0][4]}`+'\"}');
                            this.$ = ['','','',''];
                        }
                    }
                }
                else
                {
                    semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no existe la variable: ${$$[$0-2][4]}`+'\"}');
                    this.$ = ['','','',''];
                }
            }
        }
        else
        {
            semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no se puede ejecutar la operacion, no se puede aplicar  a variables de tipo STRING`+'\"}');
            this.$ = ['','','',''];
        }

break;
case 213: case 218:

        if($$[$0-2][0] != 'STRING' && $$[$0][0] != 'STRING')
        {
            if($$[$0-2][0]!= '')
            {
                if($$[$0][0] != '')
                {
                        var valor = '';
                        var r = [];
                        valor += $$[$0-2][3];
                        valor += '\n';
                        valor += $$[$0][3];
                        valor += '\n';

                        var temp = Temp.getTemporal();
                        valor += temp +'='+$$[$0-2][1]+'/'+$$[$0][1]+';';

                        r[0] = 'NUMBER';
                        r[1] = temp;
                        r[2] = '';
                        r[3] = valor;
                        r[4] = '';
                        r[5] = '';
                        r[6] = Number($$[$0-2][6])/Number($$[$0][6]);
                        this.$ = r;
                }
                else
                {
                    var n = tab.getPositionAmbito($$[$0][4]);
                    if(n!=null)
                    {
                        var valor = '';
                        var r = [];
                        valor += $$[$0-2][3];
                        valor += '\n';

                        var tempant = Temp.getTemporal();
                        var tempant1 = Temp.getTemporal();

                        valor += tempant +'='+n.position+';\n';
                        if(n.entorno == 'global')
                        {
                            valor += tempant1 +'=heap[(int)'+tempant+'];\n';
                        }
                        else
                        {
                            valor += tempant1 +'=stack[(int)'+tempant+'];\n';
                        }


                        var temp = Temp.getTemporal();
                        valor += temp +'='+$$[$0-2][1]+'/'+tempant1+';';

                        r[0] = 'NUMBER';
                        r[1] = temp;
                        r[2] = '';
                        r[3] = valor;
                        r[4] = '';
                        r[5] = '';
                        r[6] = Number($$[$0-2][6])/Number(n.valor);
                        this.$ = r;
                    }
                    else
                    {
                        semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no existe la variable: ${$$[$0][4]}`+'\"}');
                        this.$ = ['','','',''];
                    }
                }
            }
            else
            {
                var n = tab.getPositionAmbito($$[$0-2][4]);
                if(n!=null)
                {
                    if($$[$0][0] != '')
                    {
                            var valor = '';
                            var r = [];
                            var tempant = Temp.getTemporal();
                            var tempant1 = Temp.getTemporal();

                            valor += tempant +'='+n.position+';\n';
                            if(n.entorno == 'global')
                            {
                                valor += tempant1 +'=heap[(int)'+tempant+'];\n';
                            }
                            else
                            {
                                valor += tempant1 +'=stack[(int)'+tempant+'];\n';
                            }

                            valor += $$[$0][3];
                            valor += '\n';

                            var temp = Temp.getTemporal();
                            valor += temp+'='+tempant1+'/'+$$[$0][1]+';';

                            r[0] = 'NUMBER';
                            r[1] = temp;
                            r[2] = '';
                            r[3] = valor;
                            r[4] = '';
                            r[5] = '';
                            r[6] = Number(n.valor)/Number($$[$0][6]);
                            this.$ = r;
                    }
                    else
                    {
                        var n1 = tab.getPositionAmbito($$[$0][4]);
                        if(n1!=null)
                        {
                            var valor = '';
                            var r = [];
                            var tempant = Temp.getTemporal();
                            var tempant1 = Temp.getTemporal();

                            valor += tempant +'='+n.position+';\n';
                            if(n.entorno == 'global')
                            {
                                valor += tempant1 +'=heap[(int)'+tempant+'];\n';
                            }
                            else
                            {
                                valor += tempant1 +'=stack[(int)'+tempant+'];\n';
                            }


                            var tempant11 = Temp.getTemporal();
                            var tempant111 = Temp.getTemporal();

                            valor += tempant11 +'='+n1.position+';\n';
                            if(n1.entorno == 'global')
                            {
                                valor += tempant111 +'=heap[(int)'+tempant11+'];\n';
                            }
                            else
                            {
                                valor += tempant111 +'=stack[(int)'+tempant11+'];\n';
                            }


                            var temp = Temp.getTemporal();
                            valor += temp +'='+tempant1+'/'+tempant111+';';

                            r[0] = 'NUMBER';
                            r[1] = temp;
                            r[2] = '';
                            r[3] = valor;
                            r[4] = '';
                            r[5] = '';
                            r[6] = Number(n.valor)/Number(n1.valor);
                            this.$ = r;
                        }
                        else
                        {
                            semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no existe la variable: ${$$[$0][4]}`+'\"}');
                            this.$ = ['','','',''];
                        }
                    }
                }
                else
                {
                    semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no existe la variable: ${$$[$0-2][4]}`+'\"}');
                    this.$ = ['','','',''];
                }
            }
        }
        else
        {
            semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no se puede ejecutar la operacion, no se puede aplicar  a variables de tipo STRING`+'\"}');
            this.$ = ['','','',''];
        }

break;
case 214: case 219:

        if($$[$0-2][0] != 'STRING' && $$[$0][0] != 'STRING')
        {
            if($$[$0-2][0]!= '')
            {
                if($$[$0][0] != '')
                {
                        var valor = '';
                        var r = [];
                        valor += $$[$0-2][3];
                        valor += '\n';
                        valor += $$[$0][3];
                        valor += '\n';

                        var temp = Temp.getTemporal();
                        var temp1 = Temp.getTemporal();
                        var label0 = Temp.getTemporal();
                        var label1 = Temp.getTemporal();
                        var label2 = Temp.getTemporal();

                        valor += 'if('+$$[$0][1]+'==0) goto '+label1+';\n';
                        valor += temp + ' = 1;\n';
                        valor += temp1 + ' = '+$$[$0-2][1] +';\n';
                        valor += label0 + ':\n';
                        valor += '\t'+'if('+$$[$0][1]+'=='+temp+') goto '+label2+';\n';
                        valor += '\t'+temp1 + ' = '+temp1+'*'+$$[$0-2][1]+';\n';
                        valor += '\t'+temp+'='+temp+'+'+1+';\n';
                        valor += '\tgoto '+label0+';\n';
                        valor += label1 +':\n';
                        valor += '\t'+temp1+'=1;\n';
                        valor += '\tgoto '+label2+';\n';
                        valor += label2 + ':\n';


                        r[0] = 'NUMBER';
                        r[1] = temp1;
                        r[2] = label2;
                        r[3] = valor;
                        r[4] = '';
                        r[5] = '';
                        r[6] = Math.pow(Number($$[$0-2][6]),Number($$[$0][6]));
                        this.$ = r;
                }
                else
                {
                    var n = tab.getPositionAmbito($$[$0][4]);
                    if(n!=null)
                    {
                        var valor = '';
                        var r = [];
                        valor += $$[$0-2][3];
                        valor += '\n';

                        var tempant = Temp.getTemporal();
                        var tempant1 = Temp.getTemporal();

                        valor += tempant +'='+n.position+';\n';
                        if(n.entorno == 'global')
                        {
                            valor += tempant1 +'=heap[(int)'+tempant+'];\n';
                        }
                        else
                        {
                            valor += tempant1 +'=stack[(int)'+tempant+'];\n';
                        }


                        var temp = Temp.getTemporal();
                        var temp1 = Temp.getTemporal();
                        var label0 = Temp.getTemporal();
                        var label1 = Temp.getTemporal();
                        var label2 = Temp.getTemporal();

                        valor += 'if('+tempant1+'==0) goto '+label1+';\n';
                        valor += temp + ' = 1;\n';
                        valor += temp1 + ' = '+$$[$0-2][1] +';\n';
                        valor += label0 + ':\n';
                        valor += '\t'+'if('+tempant1+'=='+temp+') goto '+label2+';\n';
                        valor += '\t'+temp1 + ' = '+temp1+'*'+$$[$0-2][1]+';\n';
                        valor += '\t'+temp+'='+temp+'+'+1+';\n';
                        valor += '\tgoto '+label0+';\n';
                        valor += label1 +':\n';
                        valor += '\t'+temp1+'=1;\n';
                        valor += '\tgoto '+label2+';\n';
                        valor += label2 + ':\n';


                        r[0] = 'NUMBER';
                        r[1] = temp1;
                        r[2] = label2;
                        r[3] = valor;
                        r[4] = '';
                        r[5] = '';
                        r[6] = Math.pow(Number($$[$0-2][6]),Number(n.valor));
                        this.$ = r;
                    }
                    else
                    {
                        semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no existe la variable: ${$$[$0][4]}`+'\"}');
                        this.$ = ['','','',''];
                    }
                }
            }
            else
            {
                var n = tab.getPositionAmbito($$[$0-2][4]);
                if(n!=null)
                {
                    if($$[$0][0] != '')
                    {
                            var valor = '';
                            var r = [];
                            var tempant = Temp.getTemporal();
                            var tempant1 = Temp.getTemporal();

                            valor += tempant +'='+n.position+';\n';
                            if(n.entorno == 'global')
                            {
                                valor += tempant1 +'=heap[(int)'+tempant+'];\n';
                            }
                            else
                            {
                                valor += tempant1 +'=stack[(int)'+tempant+'];\n';
                            }

                            valor += $$[$0][3];
                            valor += '\n';

                            var temp = Temp.getTemporal();
                            var temp1 = Temp.getTemporal();
                            var label0 = Temp.getTemporal();
                            var label1 = Temp.getTemporal();
                            var label2 = Temp.getTemporal();

                            valor += 'if('+$$[$0][1]+'==0) goto '+label1+';\n';
                            valor += temp + ' = 1;\n';
                            valor += temp1 + ' = '+tempant1+';\n';
                            valor += label0 + ':\n';
                            valor += '\t'+'if('+$$[$0][1]+'=='+temp+') goto '+label2+';\n';
                            valor += '\t'+temp1 + ' = '+temp1+'*'+tempant1+';\n';
                            valor += '\t'+temp+'='+temp+'+'+1+';\n';
                            valor += '\tgoto '+label0+';\n';
                            valor += label1 +':\n';
                            valor += '\t'+temp1+'=1;\n';
                            valor += '\tgoto '+label2+';\n';
                            valor += label2 + ':\n';


                            r[0] = 'NUMBER';
                            r[1] = temp1;
                            r[2] = label2;
                            r[3] = valor;
                            r[4] = '';
                            r[5] = '';
                            r[6] = Math.pow(Number(n.valor),Number($$[$0][6]));
                            this.$ = r;
                    }
                    else
                    {
                        var n1 = tab.getPositionAmbito($$[$0][4]);
                        if(n1!=null)
                        {
                            var valor = '';
                            var r = [];
                            var tempant = Temp.getTemporal();
                            var tempant1 = Temp.getTemporal();

                            valor += tempant +'='+n.position+';\n';
                            if(n.entorno == 'global')
                            {
                                valor += tempant1 +'=heap[(int)'+tempant+'];\n';
                            }
                            else
                            {
                                valor += tempant1 +'=stack[(int)'+tempant+'];\n';
                            }


                            var tempant11 = Temp.getTemporal();
                            var tempant111 = Temp.getTemporal();

                            valor += tempant11 +'='+n1.position+';\n';
                            if(n1.entorno == 'global')
                            {
                                valor += tempant111 +'=heap[(int)'+tempant11+'];\n';
                            }
                            else
                            {
                                valor += tempant111 +'=stack[(int)'+tempant11+'];\n';
                            }


                            var temp = Temp.getTemporal();
                            var temp1 = Temp.getTemporal();
                            var label0 = Temp.getTemporal();
                            var label1 = Temp.getTemporal();
                            var label2 = Temp.getTemporal();

                            valor += 'if('+tempant111+'==0) goto '+label1+';\n';
                            valor += temp + ' = 1;\n';
                            valor += temp1 + ' = '+tempant1 +';\n';
                            valor += label0 + ':\n';
                            valor += '\t'+'if('+tempant111+'=='+temp+') goto '+label2+';\n';
                            valor += '\t'+temp1 + ' = '+temp1+'*'+tempant1+';\n';
                            valor += '\t'+temp+'='+temp+'+'+1+';\n';
                            valor += '\tgoto '+label0+';\n';
                            valor += label1 +':\n';
                            valor += '\t'+temp1+'=1;\n';
                            valor += '\tgoto '+label2+';\n';
                            valor += label2 + ':\n';


                            r[0] = 'NUMBER';
                            r[1] = temp1;
                            r[2] = label2;
                            r[3] = valor;
                            r[4] = '';
                            r[5] = '';
                            r[6] = Math.pow(Number(n.valor),Number(n1.valor));
                            this.$ = r;
                        }
                        else
                        {
                            semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no existe la variable: ${$$[$0][4]}`+'\"}');
                            this.$ = ['','','',''];
                        }
                    }
                }
                else
                {
                    semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no existe la variable: ${$$[$0-2][4]}`+'\"}');
                    this.$ = ['','','',''];
                }
            }
        }
        else
        {
            semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no se puede ejecutar la operacion, no se puede aplicar  a variables de tipo STRING`+'\"}');
            this.$ = ['','','',''];
        }

break;
case 215:

        if($$[$0-2][0] != 'STRING' && $$[$0][0] != 'STRING')
        {
            if($$[$0-2][0]!= '')
            {
                if($$[$0][0] != '')
                {
                        var valor = '';
                        var r = [];
                        valor += $$[$0-2][3];
                        valor += '\n';
                        valor += $$[$0][3];
                        valor += '\n';

                        var temp = Temp.getTemporal();
                        valor += temp +'=(int)'+$$[$0-2][1]+'%(int)'+$$[$0][1]+';';

                        r[0] = 'NUMBER';
                        r[1] = temp;
                        r[2] = '';
                        r[3] = valor;
                        r[4] = '';
                        r[5] = '';
                        r[6] = Number($$[$0-2][6])%Number($$[$0][6]);
                        this.$ = r;
                }
                else
                {
                    var n = tab.getPositionAmbito($$[$0][4]);
                    if(n!=null)
                    {
                        var valor = '';
                        var r = [];
                        valor += $$[$0-2][3];
                        valor += '\n';

                        var tempant = Temp.getTemporal();
                        var tempant1 = Temp.getTemporal();

                        valor += tempant +'='+n.position+';\n';
                        if(n.entorno == 'global')
                        {
                            valor += tempant1 +'=heap[(int)'+tempant+'];\n';
                        }
                        else
                        {
                            valor += tempant1 +'=stack[(int)'+tempant+'];\n';
                        }


                        var temp = Temp.getTemporal();
                        valor += temp +'='+$$[$0-2][1]+'%'+tempant1+';';

                        r[0] = 'NUMBER';
                        r[1] = temp;
                        r[2] = '';
                        r[3] = valor;
                        r[4] = '';
                        r[5] = '';
                        r[6] = Number($$[$0-2][6])%Number(n.valor);
                        this.$ = r;
                    }
                    else
                    {
                        semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no existe la variable: ${$$[$0][4]}`+'\"}');
                        this.$ = ['','','',''];
                    }
                }
            }
            else
            {
                var n = tab.getPositionAmbito($$[$0-2][4]);
                if(n!=null)
                {
                    if($$[$0][0] != '')
                    {
                            var valor = '';
                            var r = [];
                            var tempant = Temp.getTemporal();
                            var tempant1 = Temp.getTemporal();

                            valor += tempant +'='+n.position+';\n';
                            if(n.entorno == 'global')
                            {
                                valor += tempant1 +'=heap[(int)'+tempant+'];\n';
                            }
                            else
                            {
                                valor += tempant1 +'=stack[(int)'+tempant+'];\n';
                            }

                            valor += $$[$0][3];
                            valor += '\n';

                            var temp = Temp.getTemporal();
                            valor += temp+'='+tempant1+'%'+$$[$0][1]+';';

                            r[0] = 'NUMBER';
                            r[1] = temp;
                            r[2] = '';
                            r[3] = valor;
                            r[4] = '';
                            r[5] = '';
                            r[6] = Number(n.valor)%Number($$[$0][6]);
                            this.$ = r;
                    }
                    else
                    {
                        var n1 = tab.getPositionAmbito($$[$0][4]);
                        if(n1!=null)
                        {
                            var valor = '';
                            var r = [];
                            var tempant = Temp.getTemporal();
                            var tempant1 = Temp.getTemporal();

                            valor += tempant +'='+n.position+';\n';
                            if(n.entorno == 'global')
                            {
                                valor += tempant1 +'=heap[(int)'+tempant+'];\n';
                            }
                            else
                            {
                                valor += tempant1 +'=stack[(int)'+tempant+'];\n';
                            }


                            var tempant11 = Temp.getTemporal();
                            var tempant111 = Temp.getTemporal();

                            valor += tempant11 +'='+n1.position+';\n';
                            if(n1.entorno == 'global')
                            {
                                valor += tempant111 +'=heap[(int)'+tempant11+'];\n';
                            }
                            else
                            {
                                valor += tempant111 +'=stack[(int)'+tempant11+'];\n';
                            }


                            var temp = Temp.getTemporal();
                            valor += temp +'='+tempant1+'%'+tempant111+';';

                            r[0] = 'NUMBER';
                            r[1] = temp;
                            r[2] = '';
                            r[3] = valor;
                            r[4] = '';
                            r[5] = '';
                            r[6] = Number(n.valor)%Number(n1.valor);
                            this.$ = r;
                        }
                        else
                        {
                            semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no existe la variable: ${$$[$0][4]}`+'\"}');
                            this.$ = ['','','',''];
                        }
                    }
                }
                else
                {
                    semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no existe la variable: ${$$[$0-2][4]}`+'\"}');
                    this.$ = ['','','',''];
                }
            }
        }
        else
        {
            semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no se puede ejecutar la operacion, no se puede aplicar  a variables de tipo STRING`+'\"}');
            this.$ = ['','','',''];
        }

break;
case 217:

        if($$[$0-2][0] != 'STRING' && $$[$0][0] != 'STRING')
        {
            if($$[$0-2][0]!= '')
            {
                if($$[$0][0] != '')
                {
                        var valor = '';
                        var r = [];
                        valor += $$[$0-2][3];
                        valor += '\n';
                        valor += $$[$0][3];
                        valor += '\n';

                        var temp = Temp.getTemporal();
                        valor += temp +'='+$$[$0-2][1]+'*'+$$[$0][1]+';';

                        r[0] = 'NUMBER';
                        r[1] = temp;
                        r[2] = '';
                        r[3] = valor;
                        r[4] = '';
                        r[5] = '';
                        r[6] = Number($$[$0-2][6])*Number($$[$0][6]);
                        this.$ = r;
                }
                else
                {
                    var n = tab.getPositionAmbito($$[$0][4]);
                    if(n!=null)
                    {
                        var valor = '';
                        var r = [];
                        valor += $$[$0-2][3];
                        valor += '\n';

                        var tempant = Temp.getTemporal();
                        var tempant1 = Temp.getTemporal();

                        valor += tempant +'='+n.position+';\n';
                        if(n.entorno == 'global')
                        {
                            valor += tempant1 +'=heap[(int)'+tempant+'];\n';
                        }
                        else
                        {
                            valor += tempant1 +'=stack[(int)'+tempant+'];\n';
                        }


                        var temp = Temp.getTemporal();
                        valor += temp +'='+$$[$0-2][1]+'*'+tempant1+';';

                        r[0] = 'NUMBER';
                        r[1] = temp;
                        r[2] = '';
                        r[3] = valor;
                        r[4] = '';
                        r[5] = '';
                        r[6] = Number($$[$0-2][6])*Number(n.valor);
                        this.$ = r;
                    }
                    else
                    {
                        semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no existe la variable: ${$$[$0][4]}`+'\"}');
                        this.$ = ['','','',''];
                    }
                }
            }
            else
            {
                var n = tab.getPositionAmbito($$[$0-2][4]);
                if(n!=null)
                {
                    if($$[$0][0] != '')
                    {
                            var valor = '';
                            var r = [];
                            var tempant = Temp.getTemporal();
                            var tempant1 = Temp.getTemporal();

                            valor += tempant +'='+n.position+';\n';
                            if(n.entorno == 'global')
                            {
                                valor += tempant1 +'=heap[(int)'+tempant+'];\n';
                            }
                            else
                            {
                                valor += tempant1 +'=stack[(int)'+tempant+'];\n';
                            }

                            valor += $$[$0][3];
                            valor += '\n';

                            var temp = Temp.getTemporal();
                            valor += temp+'='+tempant1+'*'+$$[$0][1]+';';

                            r[0] = 'NUMBER';
                            r[1] = temp;
                            r[2] = '';
                            r[3] = valor;
                            r[4] = '';
                            r[5] = '';
                            r[6] = Number(n.valor)*Number($$[$0][6]);
                            this.$ = r;
                    }
                    else
                    {
                        var n1 = tab.getPositionAmbito($$[$0][4]);
                        if(n1!=null)
                        {
                            var valor = '';
                            var r = [];
                            var tempant = Temp.getTemporal();
                            var tempant1 = Temp.getTemporal();

                            valor += tempant +'='+n.position+';\n';
                            if(n.entorno == 'global')
                            {
                                valor += tempant1 +'=heap[(int)'+tempant+'];\n';
                            }
                            else
                            {
                                valor += tempant1 +'=stack[(int)'+tempant+'];\n';
                            }


                            var tempant11 = Temp.getTemporal();
                            var tempant111 = Temp.getTemporal();

                            valor += tempant11 +'='+n1.position+';\n';
                            if(n1.entorno == 'global')
                            {
                                valor += tempant111 +'=heap[(int)'+tempant11+'];\n';
                            }
                            else
                            {
                                valor += tempant111 +'=stack[(int)'+tempant11+'];\n';
                            }


                            var temp = Temp.getTemporal();
                            valor += temp +'='+tempant1+'*'+tempant111+';';

                            r[0] = 'NUMBER';
                            r[1] = temp;
                            r[2] = '';
                            r[3] = valor;
                            r[4] = '';
                            r[5] = '';
                            r[6] = Number(n.valor)*Number(n1.valor);
                            this.$ = r;
                        }
                        else
                        {
                            semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no existe la variable: ${$$[$0][4]}`+'\"}');
                            this.$ = ['','','',''];
                        }
                    }
                }
                else
                {
                    semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no existe la variable: ${$$[$0-2][4]}`+'\"}');
                    this.$ = ['','','',''];
                }
            }
        }
        else
        {
            semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no se puede ejecutar la operacion, no se puede aplicar  a variables de tipo STRING`+'\"}');
            this.$ = ['','','',''];
        }

break;
case 220:

        if($$[$0-2][0] != 'STRING' && $$[$0][0] != 'STRING')
        {
            if($$[$0-2][0]!= '')
            {
                if($$[$0][0] != '')
                {
                        var valor = '';
                        var r = [];
                        valor += $$[$0-2][3];
                        valor += '\n';
                        valor += $$[$0][3];
                        valor += '\n';

                        var temp = Temp.getTemporal();
                        valor += temp +'=(int)'+$$[$0-2][1]+'%'(int)+$$[$0][1]+';';

                        r[0] = 'NUMBER';
                        r[1] = temp;
                        r[2] = '';
                        r[3] = valor;
                        r[4] = '';
                        r[5] = '';
                        r[6] = Number($$[$0-2][6])%Number($$[$0][6]);
                        this.$ = r;
                }
                else
                {
                    var n = tab.getPositionAmbito($$[$0][4]);
                    if(n!=null)
                    {
                        var valor = '';
                        var r = [];
                        valor += $$[$0-2][3];
                        valor += '\n';

                        var tempant = Temp.getTemporal();
                        var tempant1 = Temp.getTemporal();

                        valor += tempant +'='+n.position+';\n';
                        if(n.entorno == 'global')
                        {
                            valor += tempant1 +'=heap[(int)'+tempant+'];\n';
                        }
                        else
                        {
                            valor += tempant1 +'=stack[(int)'+tempant+'];\n';
                        }


                        var temp = Temp.getTemporal();
                        valor += temp +'='+$$[$0-2][1]+'%'+tempant1+';';

                        r[0] = 'NUMBER';
                        r[1] = temp;
                        r[2] = '';
                        r[3] = valor;
                        r[4] = '';
                        r[5] = '';
                        r[6] = Number($$[$0-2][6])%Number(n.valor);
                        this.$ = r;
                    }
                    else
                    {
                        semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no existe la variable: ${$$[$0][4]}`+'\"}');
                        this.$ = ['','','',''];
                    }
                }
            }
            else
            {
                var n = tab.getPositionAmbito($$[$0-2][4]);
                if(n!=null)
                {
                    if($$[$0][0] != '')
                    {
                            var valor = '';
                            var r = [];
                            var tempant = Temp.getTemporal();
                            var tempant1 = Temp.getTemporal();

                            valor += tempant +'='+n.position+';\n';
                            if(n.entorno == 'global')
                            {
                                valor += tempant1 +'=heap[(int)'+tempant+'];\n';
                            }
                            else
                            {
                                valor += tempant1 +'=stack[(int)'+tempant+'];\n';
                            }

                            valor += $$[$0][3];
                            valor += '\n';

                            var temp = Temp.getTemporal();
                            valor += temp+'='+tempant1+'%'+$$[$0][1]+';';

                            r[0] = 'NUMBER';
                            r[1] = temp;
                            r[2] = '';
                            r[3] = valor;
                            r[4] = '';
                            r[5] = '';
                            r[6] = Number(n.valor)%Number($$[$0][6]);
                            this.$ = r;
                    }
                    else
                    {
                        var n1 = tab.getPositionAmbito($$[$0][4]);
                        if(n1!=null)
                        {
                            var valor = '';
                            var r = [];
                            var tempant = Temp.getTemporal();
                            var tempant1 = Temp.getTemporal();

                            valor += tempant +'='+n.position+';\n';
                            if(n.entorno == 'global')
                            {
                                 valor += tempant1 +'=heap[(int)'+tempant+'];\n';
                            }
                            else
                            {
                                 valor += tempant1 +'=stack[(int)'+tempant+'];\n';
                            }


                            var tempant11 = Temp.getTemporal();
                            var tempant111 = Temp.getTemporal();

                            valor += tempant11 +'='+n1.position+';\n';
                            if(n1.entorno == 'global')
                            {
                                 valor += tempant111 +'=heap[(int)'+tempant11+'];\n';
                            }
                            else
                            {
                                 valor += tempant111 +'=stack[(int)'+tempant11+'];\n';
                            }


                            var temp = Temp.getTemporal();
                            valor += temp +'='+tempant1+'%'+tempant111+';';

                            r[0] = 'NUMBER';
                            r[1] = temp;
                            r[2] = '';
                            r[3] = valor;
                            r[4] = '';
                            r[5] = '';
                            r[6] = Number(n.valor)%Number(n1.valor);
                            this.$ = r;
                        }
                        else
                        {
                            semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no existe la variable: ${$$[$0][4]}`+'\"}');
                            this.$ = ['','','',''];
                        }
                    }
                }
                else
                {
                    semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no existe la variable: ${$$[$0-2][4]}`+'\"}');
                    this.$ = ['','','',''];
                }
            }
        }
        else
        {
            semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no se puede ejecutar la operacion, no se puede aplicar  a variables de tipo STRING`+'\"}');
            this.$ = ['','','',''];
        }

break;
case 222:

        console.log('++', $$[$0-2], $$[$0]);
        if($$[$0-2][0] == 'STRING'  && $$[$0][0] == 'STRING')
        {
            var r = [];
            r[0] = "STRING";
            r[1] = $$[$0-2][1];
            var valor = '';
            valor += $$[$0-2][3];
            for(var a = 0; a<$$[$0][5].length; a++)
             {
                 valor += $$[$0-2][1] + ' = ' + $$[$0-2][1] + ' + 1;';
                 valor += '\n';
                 valor += 'heap[(int)'+$$[$0-2][1]+'] = ' + $$[$0][5].charCodeAt(a) + ';';
                 valor += '\n'
             }
            r[2] = '';
            r[3] = valor;
            r[4] = '';
            r[5] = $$[$0-2][5] + $$[$0][5];
            r[6] = $$[$0-2][6] + $$[$0][6];
            this.$ = r;
        }
        else if($$[$0-2][0] == 'STRING' && $$[$0][0] != '')
        {
             var r = [];
             r[0] = "STRING";
             r[1] = $$[$0-2][1];
             var valor = '';
             valor += $$[$0-2][3];
             var val = $$[$0][6].toString();
             for(var a = 0; a<val.length; a++)
              {
                  valor += $$[$0-2][1] + ' = ' + $$[$0-2][1] + ' + 1;';
                  valor += '\n';
                  valor += 'heap[(int)'+$$[$0-2][1]+'] = ' + val.charCodeAt(a) + ';';
                  valor += '\n'
              }
             r[2] = '';
             r[3] = valor;
             r[4] = '';
             r[5] = $$[$0-2][5] + $$[$0][5].toString();
             r[6] = $$[$0-2][6] + $$[$0][6].toString();
             this.$ = r;
        }
        else if($$[$0-2][0] != '' && $$[$0][0] == 'STRING')
        {
             var r = [];
             r[0] = "STRING";
             r[1] = $$[$0-2][1];
             var valor = '';
             var val = $$[$0-2][6].toString();
             for(var a = 0; a<val.length; a++)
              {
                  valor += $$[$0-2][1] + ' = ' + $$[$0-2][1] + ' + 1;';
                  valor += '\n';
                  valor += 'heap[(int)'+$$[$0-2][1]+'] = ' + val.charCodeAt(a) + ';';
                  valor += '\n'
              }
              valor += $$[$0][3];
             r[2] = '';
             r[3] = valor;
             r[4] = '';
             r[5] = $$[$0-2][5].toString() + $$[$0][5];
             r[6] = $$[$0-2][6].toString() + $$[$0][6];
             this.$ = r;
        }
        else if ($$[$0-2][0] != '' && $$[$0][0] != '')
        {
            var valor = '';
            var r = [];
            valor += $$[$0-2][3];
            valor += '\n';
            valor += $$[$0][3];
            valor += '\n';

            var temp = Temp.getTemporal();
            valor += temp + ' = ' + $$[$0-2][1] + ' + ' + $$[$0][1] + ';';

            r[0] = 'NUMBER';
            r[1] = temp;
            r[2] = '';
            r[3] = valor;
            r[4] = '';
            r[5] = '';
            r[6] = Number($$[$0-2][6]) + Number($$[$0][6]);
            this.$ = r;
        }
        else if ($$[$0-2][0] == '' && $$[$0][0] == '')
        {
            var n = tab.getPositionAmbito($$[$0-2][4]);
            if(n!=null)
            {
                var n1 = tab.getPositionAmbito($$[$0][4]);
                if(n1!=null)
                {
                    if(n.tipo.toUpperCase() != 'STRING' && n1.tipo.toUpperCase() != 'STRING')
                    {
                        var valor = '';
                        var r = [];

                        var temp = Temp.getTemporal();
                        valor += temp + ' = ' + n.position + ';';
                        valor += '\n';
                        var temp1 = Temp.getTemporal();
                        if(n.entorno == 'global')
                        {
                            valor += temp1 + ' = heap[(int)'+temp+'];';
                        }
                        else
                        {
                            valor += temp1 + ' = stack[(int)'+temp+'];';
                        }

                        valor += '\n';

                        var temp2 = Temp.getTemporal();
                        valor += temp2 + ' = ' + n1.position + ';';
                        valor += '\n';
                        var temp3 = Temp.getTemporal();
                        if(n1.entorno == 'global')
                        {
                            valor += temp3 + ' = heap[(int)'+temp2+'];';
                        }
                        else
                        {
                            valor += temp3 + ' = stack[(int)'+temp2+'];';
                        }

                        valor += '\n';

                        var temp4 = Temp.getTemporal();
                        valor += temp4 + ' = ' + temp1 + ' + ' + temp3 + ';';

                        r[0] = 'NUMBER';
                        r[1] = temp4;
                        r[2] = '';
                        r[3] = valor;
                        r[4] = '';
                        r[5] = '';
                        r[6] = Number(n.valor) + Number(n1.valor);
                        this.$ = r;
                    }
                    else
                    {
                        if(n.valor != null && n1.valor != null)
                        {
                            var temp = Temp.getTemporal();
                            var r = [];
                            r[0] = "STRING";
                            r[1] = temp;
                            r[2] = '';

                            var valor = '';
                            for(var a = 0; a<n.toString().length; a++)
                            {
                                valor += temp + ' = ' + temp + ' + 1;';
                                valor += '\n';
                                valor += 'heap[(int)'+temp+'] = ' + n.toString().charCodeAt(a) + ';';
                                valor += '\n';
                            }
                            for(var a = 0; a<n1.toString().length; a++)
                            {
                                valor += temp + ' = ' + temp + ' + 1;';
                                valor += '\n';
                                valor += 'heap[(int)'+temp+'] = ' + n1.toString().charCodeAt(a) + ';';
                                valor += '\n';
                            }
                            r[3] = valor;
                            r[4] = '';
                            r[5] = n.valor.toString() + n1.valor.toString();
                            r[6] = n.valor.toString() + n1.valor.toString();

                            this.$ = r;
                        }
                        else
                        {
                            semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no se operar con variables nulas;`+'\"}');
                            this.$ = ['','','',''];
                        }
                    }
                }
                else
                {
                    semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no existe una variable con el identificador: ${$$[$0][4]};`+'\"}');
                    this.$ = ['','','',''];
                }
            }
            else
            {
                semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no existe una variable con el identificador:  ${$$[$0-2][4]};`+'\"}');
                this.$ = ['','','',''];
            }
        }
        else
        {
            if($$[$0-2][0] == '' && $$[$0][0] != '')
            {
                var n = tab.getPositionAmbito($$[$0-2][4]);
                if(n!=null)
                {
                    if(n.tipo.toUpperCase() == "STRING")
                    {
                         var r = [];
                         r[0] = "STRING";

                         var temp = Temp.getTemporal();
                         var valor = '';
                         for(var a = 0; a<n.valor.toString().length; a++)
                         {
                            valor += temp + ' = ' + temp + ' + 1;';
                            valor += '\n';
                            valor += 'heap[(int)'+temp+'] = ' + n.valor.toString().charCodeAt(a) + ';';
                            valor += '\n';
                         }

                         for(var a = 0; a<$$[$0][6].toString().length; a++)
                         {
                            valor += temp + ' = ' + temp + ' + 1;';
                            valor += '\n';
                            valor += 'heap[(int)'+temp+'] = ' + $$[$0][6].toString().charCodeAt(a) + ';';
                            valor += '\n';
                         }
                         r[1] = temp;
                         r[2] = '';
                         r[3] = valor;
                         r[4] = '';
                         r[5] = n.valor.toString() + $$[$0][6].toString();
                         r[6] = n.valor.toString() + $$[$0][6].toString();
                         this.$ = r;
                    }
                    else if ( $$[$0][0] == 'STRING')
                    {
                         var r = [];
                         r[0] = "STRING";

                         var temp = Temp.getTemporal();
                         var valor = '';
                         for(var a = 0; a<n.valor.toString().length; a++)
                         {
                            valor += temp + ' = ' + temp + ' + 1;';
                            valor += '\n';
                            valor += 'heap[(int)'+temp+'] = ' + n.valor.toString().charCodeAt(a) + ';';
                            valor += '\n';
                         }

                         for(var a = 0; a<$$[$0][6].toString().length; a++)
                         {
                            valor += temp + ' = ' + temp + ' + 1;';
                            valor += '\n';
                            valor += 'heap[(int)'+temp+'] = ' + $$[$0][6].toString().charCodeAt(a) + ';';
                            valor += '\n';
                         }
                         r[1] = temp;
                         r[2] = '';
                         r[3] = valor;
                         r[4] = '';
                         r[5] = n.valor.toString() + $$[$0][6].toString();
                         r[6] = n.valor.toString() + $$[$0][6];
                         this.$ = r;
                    }
                    else
                    {
                        var valor = '';
                        var r = [];

                        var temp = Temp.getTemporal();
                        valor += temp + ' = ' + n.position + ';';
                        valor += '\n';
                        var temp1 = Temp.getTemporal();
                        if(n.entorno == 'global')
                        {
                            valor += temp1 + ' = heap[(int)'+temp+'];';
                        }
                        else
                        {
                            valor += temp1 + ' = stack[(int)'+temp+'];';
                        }

                        valor += '\n';

                        valor += $$[$0][3];
                        valor += '\n';

                        var temp4 = Temp.getTemporal();
                        valor += temp4 + ' = ' + temp1 + ' + ' + $$[$0][1] + ';';

                        r[0] = 'NUMBER';
                        r[1] = temp4;
                        r[2] = '';
                        r[3] = valor;
                        r[4] = '';
                        r[5] = Number(n.valor) + Number($$[$0][6]);
                        r[6] = Number(n.valor) + Number($$[$0][6]);
                        this.$ = r;
                    }
                }
                else
                {
                   semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no existe una variable con el identificador:  ${$$[$0-2][4]};`+'\"}');
                   this.$ = ['','','',''];
                }
            }
            else if($$[$0-2][0] != '' && $$[$0][0] == '')
            {
                var n = tab.getPositionAmbito($$[$0][4]);
                if(n!=null)
                {
                    if(n.tipo.toUpperCase() == "STRING")
                    {
                         var r = [];
                         r[0] = "STRING";

                         var temp = Temp.getTemporal();
                         var valor = '';


                         for(var a = 0; a<$$[$0-2][6].toString().length; a++)
                         {
                            valor += temp + ' = ' + temp + ' + 1;';
                            valor += '\n';
                            valor += 'heap[(int)'+temp+'] = ' + $$[$0-2][6].toString().charCodeAt(a) + ';';
                            valor += '\n';
                         }

                        for(var a = 0; a<n.valor.toString().length; a++)
                         {
                            valor += temp + ' = ' + temp + ' + 1;';
                            valor += '\n';
                            valor += 'heap[(int)'+temp+'] = ' + n.valor.toString().charCodeAt(a) + ';';
                            valor += '\n';
                         }

                         r[1] = temp;
                         r[2] = '';
                         r[3] = valor;
                         r[4] = '';
                         r[5] = $$[$0-2][6].toString() + n.valor.toString();
                         r[6] = $$[$0-2][6].toString() + n.valor.toString();
                         this.$ = r;
                    }
                    else if ( $$[$0-2][0] == 'STRING')
                    {
                         var r = [];
                         r[0] = "STRING";

                         var temp = Temp.getTemporal();
                         var valor = '';
                          var val = $$[$0-2][6].toString();
                          for(var a = 0; a<val.length; a++)
                          {
                             valor += temp + ' = ' + temp + ' + 1;';
                             valor += '\n';
                             valor += 'heap[(int)'+temp+'] = ' + val.charCodeAt(a) + ';';
                             valor += '\n';
                          }

                         for(var a = 0; a<n.valor.toString().length; a++)
                         {
                            valor += temp + ' = ' + temp + ' + 1;';
                            valor += '\n';
                            valor += 'heap[(int)'+temp+'] = ' + n.valor.toString().charCodeAt(a) + ';';
                            valor += '\n';
                         }


                         r[1] = temp;
                         r[2] = '';
                         r[3] = valor;
                         r[4] = '';
                         r[5] = $$[$0-2][6].toString() + n.valor.toString();
                         r[6] = $$[$0-2][6].toString() + n.valor.toString();
                         this.$ = r;
                    }
                    else
                    {
                        var valor = '';
                        var r = [];

                        valor += $$[$0-2][3];
                        valor += '\n';

                        var temp = Temp.getTemporal();
                        valor += temp + ' = ' + n.position + ';';
                        valor += '\n';
                        var temp1 = Temp.getTemporal();
                        if(n.entorno == 'global')
                        {
                            valor += temp1 + ' = heap[(int)'+temp+'];';
                        }
                        else
                        {
                            valor += temp1 + ' = stack[(int)'+temp+'];';
                        }

                        valor += '\n';

                        var temp4 = Temp.getTemporal();
                        valor += temp4 + ' = ' + $$[$0-2][1] + ' + ' + temp1 + ';';

                        r[0] = 'NUMBER';
                        r[1] = temp4;
                        r[2] = '';
                        r[3] = valor;
                        r[4] = '';
                        r[5] = '';
                        r[6] = Number($$[$0-2][6]) + Number(n.valor);
                        this.$ = r;
                    }
                }
                else
                {
                   semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no existe una variable con el identificador:  ${$$[$0-2][4]};`+'\"}');
                   this.$ = ['','','',''];
                }
            }
            else
            {
                        var valor = '';
                        var r = [];
                        valor += $$[$0-2][3];
                        valor += '\n';
                        valor += $$[$0][3];
                        valor += '\n';

                        var temp = Temp.getTemporal();
                        valor += temp + ' = ' + $$[$0-2][1] + ' + ' + $$[$0][1] + ';';

                        r[0] = 'NUMBER';
                        r[1] = temp;
                        r[2] = '';
                        r[3] = valor;
                        r[4] = '';
                        r[5] = '';
                        r[6] = Number($$[$0-2][6]) + Number($$[$0][6]);
                        this.$ = r;
            }
        }

break;
case 223: case 226:

        if($$[$0-2][0] != 'STRING' && $$[$0][0] != 'STRING')
        {
            if($$[$0-2][0]!= '')
            {
                if($$[$0][0] != '')
                {
                        var valor = '';
                        var r = [];
                        valor += $$[$0-2][3];
                        valor += '\n';
                        valor += $$[$0][3];
                        valor += '\n';

                        var temp = Temp.getTemporal();
                        valor += temp +'='+$$[$0-2][1]+'-'+$$[$0][1]+';';

                        r[0] = 'NUMBER';
                        r[1] = temp;
                        r[2] = '';
                        r[3] = valor;
                        r[4] = '';
                        r[5] = '';
                        r[6] = Number($$[$0-2][6])-Number($$[$0][6]);
                        this.$ = r;
                }
                else
                {
                    var n = tab.getPositionAmbito($$[$0][4]);
                    if(n!=null)
                    {
                        var valor = '';
                        var r = [];
                        valor += $$[$0-2][3];
                        valor += '\n';

                        var tempant = Temp.getTemporal();
                        var tempant1 = Temp.getTemporal();

                        valor += tempant +'='+n.position+';\n';
                        if(n.entorno == 'global')
                        {
                            valor += tempant1 +'=heap[(int)'+tempant+'];\n';
                        }
                        else
                        {
                            valor += tempant1 +'=stack[(int)'+tempant+'];\n';
                        }


                        var temp = Temp.getTemporal();
                        valor += temp +'='+$$[$0-2][1]+'-'+tempant1+';';

                        r[0] = 'NUMBER';
                        r[1] = temp;
                        r[2] = '';
                        r[3] = valor;
                        r[4] = '';
                        r[5] = '';
                        r[6] = Number($$[$0-2][6])-Number(n.valor);
                        this.$ = r;
                    }
                    else
                    {
                        semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no existe la variable: ${$$[$0][4]}`+'\"}');
                        this.$ = ['','','',''];
                    }
                }
            }
            else
            {
                var n = tab.getPositionAmbito($$[$0-2][4]);
                if(n!=null)
                {
                    if($$[$0][0] != '')
                    {
                            var valor = '';
                            var r = [];
                            var tempant = Temp.getTemporal();
                            var tempant1 = Temp.getTemporal();

                            valor += tempant +'='+n.position+';\n';
                            if(n.entorno == 'global')
                            {
                                valor += tempant1 +'=heap[(int)'+tempant+'];\n';
                            }
                            else
                            {
                                valor += tempant1 +'=stack[(int)'+tempant+'];\n';
                            }

                            valor += $$[$0][3];
                            valor += '\n';

                            var temp = Temp.getTemporal();
                            valor += temp+'='+tempant1+'-'+$$[$0][1]+';';

                            r[0] = 'NUMBER';
                            r[1] = temp;
                            r[2] = '';
                            r[3] = valor;
                            r[4] = '';
                            r[5] = '';
                            r[6] = Number(n.valor)-Number($$[$0][6]);
                            this.$ = r;
                    }
                    else
                    {
                        var n1 = tab.getPositionAmbito($$[$0][4]);
                        if(n1!=null)
                        {
                            var valor = '';
                            var r = [];
                            var tempant = Temp.getTemporal();
                            var tempant1 = Temp.getTemporal();

                            valor += tempant +'='+n.position+';\n';
                            if(n.entorno == 'global')
                            {
                                valor += tempant1 +'=heap[(int)'+tempant+'];\n';
                            }
                            else
                            {
                                valor += tempant1 +'=stack[(int)'+tempant+'];\n';
                            }


                            var tempant11 = Temp.getTemporal();
                            var tempant111 = Temp.getTemporal();

                            valor += tempant11 +'='+n1.position+';\n';
                            if(n1.entorno == 'global')
                            {
                                valor += tempant111 +'=heap[(int)'+tempant11+'];\n';
                            }
                            else
                            {
                                valor += tempant111 +'=stack[(int)'+tempant11+'];\n';
                            }


                            var temp = Temp.getTemporal();
                            valor += temp +'='+tempant1+'-'+tempant111+';';

                            r[0] = 'NUMBER';
                            r[1] = temp;
                            r[2] = '';
                            r[3] = valor;
                            r[4] = '';
                            r[5] = '';
                            r[6] = Number(n.valor)-Number(n1.valor);
                            this.$ = r;
                        }
                        else
                        {
                            semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no existe la variable: ${$$[$0][4]}`+'\"}');
                            this.$ = ['','','',''];
                        }
                    }
                }
                else
                {
                    semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no existe la variable: ${$$[$0-2][4]}`+'\"}');
                    this.$ = ['','','',''];
                }
            }
        }
        else
        {
            semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no se puede ejecutar la operacion, no se puede aplicar  a variables de tipo STRING`+'\"}');
            this.$ = ['','','',''];
        }

break;
case 225:

        if($$[$0-2][0] == 'STRING'  && $$[$0][0] == 'STRING')
        {
            var r = [];
            r[0] = "STRING";
            r[1] = $$[$0-2][1];
            var valor = '';
            valor += $$[$0-2][3];
            for(var a = 0; a<$$[$0][5].length; a++)
             {
                 valor += $$[$0-2][1] + ' = ' + $$[$0-2][1] + ' + 1;';
                 valor += '\n';
                 valor += 'heap[(int)'+$$[$0-2][1]+'] = ' + $$[$0][5].charCodeAt(a) + ';';
                 valor += '\n'
             }
            r[2] = '';
            r[3] = valor;
            r[4] = '';
            r[5] = $$[$0-2][5] + $$[$0][5];
            r[6] = $$[$0-2][6] + $$[$0][6];
            this.$ = r;
        }
        else if($$[$0-2][0] == 'STRING' && $$[$0][0] != '')
        {
             var r = [];
             r[0] = "STRING";
             r[1] = $$[$0-2][1];
             var valor = '';
             valor += $$[$0-2][3];
             var val = $$[$0][6].toString();
             for(var a = 0; a<val.length; a++)
              {
                  valor += $$[$0-2][1] + ' = ' + $$[$0-2][1] + ' + 1;';
                  valor += '\n';
                  valor += 'heap[(int)'+$$[$0-2][1]+'] = ' + val.charCodeAt(a) + ';';
                  valor += '\n'
              }
             r[2] = '';
             r[3] = valor;
             r[4] = '';
             r[5] = $$[$0-2][5] + $$[$0][5].toString();
             r[6] = $$[$0-2][6] + $$[$0][6].toString();
             this.$ = r;
        }
        else if($$[$0-2][0] != '' && $$[$0][0] == 'STRING')
        {
             var r = [];
             r[0] = "STRING";
             r[1] = $$[$0-2][1];
             var valor = '';
             var val = $$[$0-2][6].toString();
             for(var a = 0; a<val.length; a++)
              {
                  valor += $$[$0-2][1] + ' = ' + $$[$0-2][1] + ' + 1;';
                  valor += '\n';
                  valor += 'heap[(int)'+$$[$0-2][1]+'] = ' + val.charCodeAt(a) + ';';
                  valor += '\n'
              }
              valor += $$[$0][3];
             r[2] = '';
             r[3] = valor;
             r[4] = '';
             r[5] = $$[$0-2][5].toString() + $$[$0][5];
             r[6] = $$[$0-2][6].toString() + $$[$0][6];
             this.$ = r;
        }
        else if ($$[$0-2][0] != '' && $$[$0][0] != '')
        {
            var valor = '';
            var r = [];
            valor += $$[$0-2][3];
            valor += '\n';
            valor += $$[$0][3];
            valor += '\n';

            var temp = Temp.getTemporal();
            valor += temp + ' = ' + $$[$0-2][1] + ' + ' + $$[$0][1] + ';';

            r[0] = 'NUMBER';
            r[1] = temp;
            r[2] = '';
            r[3] = valor;
            r[4] = '';
            r[5] = '';
            r[6] = Number($$[$0-2][6]) + Number($$[$0][6]);
            this.$ = r;
        }
        else if ($$[$0-2][0] == '' && $$[$0][0] == '')
        {
            var n = tab.getPositionAmbito($$[$0-2][4]);
            if(n!=null)
            {
                var n1 = tab.getPositionAmbito($$[$0][4]);
                if(n1!=null)
                {
                    if(n.tipo.toUpperCase() != 'STRING' && n1.tipo.toUpperCase() != 'STRING')
                    {
                        var valor = '';
                        var r = [];

                        var temp = Temp.getTemporal();
                        valor += temp + ' = ' + n.position + ';';
                        valor += '\n';
                        var temp1 = Temp.getTemporal();
                        if(n.entorno == 'global')
                        {
                            valor += temp1 + ' = heap[(int)'+temp+'];';
                        }
                        else
                        {
                            valor += temp1 + ' = stack[(int)'+temp+'];';
                        }

                        valor += '\n';

                        var temp2 = Temp.getTemporal();
                        valor += temp2 + ' = ' + n1.position + ';';
                        valor += '\n';
                        var temp3 = Temp.getTemporal();
                        if(n1.entorno == 'global')
                        {
                            valor += temp3 + ' = heap[(int)'+temp2+'];';
                        }
                        else
                        {
                            valor += temp3 + ' = stack[(int)'+temp2+'];';
                        }

                        valor += '\n';

                        var temp4 = Temp.getTemporal();
                        valor += temp4 + ' = ' + temp1 + ' + ' + temp3 + ';';

                        r[0] = 'NUMBER';
                        r[1] = temp4;
                        r[2] = '';
                        r[3] = valor;
                        r[4] = '';
                        r[5] = '';
                        r[6] = Number(n.valor) + Number(n1.valor);
                        this.$ = r;
                    }
                    else
                    {
                        if(n.valor != null && n1.valor != null)
                        {
                            var temp = Temp.getTemporal();
                            var r = [];
                            r[0] = "STRING";
                            r[1] = temp;
                            r[2] = '';

                            var valor = '';
                            for(var a = 0; a<n.toString().length; a++)
                            {
                                valor += temp + ' = ' + temp + ' + 1;';
                                valor += '\n';
                                valor += 'heap[(int)'+temp+'] = ' + n.toString().charCodeAt(a) + ';';
                                valor += '\n';
                            }
                            for(var a = 0; a<n1.toString().length; a++)
                            {
                                valor += temp + ' = ' + temp + ' + 1;';
                                valor += '\n';
                                valor += 'heap[(int)'+temp+'] = ' + n1.toString().charCodeAt(a) + ';';
                                valor += '\n';
                            }
                            r[3] = valor;
                            r[4] = '';
                            r[5] = n.valor.toString() + n1.valor.toString();
                            r[6] = n.valor.toString() + n1.valor.toString();

                            this.$ = r;
                        }
                        else
                        {
                            semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no se operar con variables nulas;`+'\"}');
                            this.$ = ['','','',''];
                        }
                    }
                }
                else
                {
                    semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no existe una variable con el identificador: ${$$[$0][4]};`+'\"}');
                    this.$ = ['','','',''];
                }
            }
            else
            {
                semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no existe una variable con el identificador:  ${$$[$0-2][4]};`+'\"}');
                this.$ = ['','','',''];
            }
        }
        else
        {
            if($$[$0-2][0] == '' && $$[$0][0] != '')
            {
                var n = tab.getPositionAmbito($$[$0-2][4]);
                if(n!=null)
                {
                    if(n.tipo.toUpperCase() == "STRING")
                    {
                         var r = [];
                         r[0] = "STRING";

                         var temp = Temp.getTemporal();
                         var valor = '';
                         for(var a = 0; a<n.valor.toString().length; a++)
                         {
                            valor += temp + ' = ' + temp + ' + 1;';
                            valor += '\n';
                            valor += 'heap[(int)'+temp+'] = ' + n.valor.toString().charCodeAt(a) + ';';
                            valor += '\n';
                         }

                         for(var a = 0; a<$$[$0][6].toString().length; a++)
                         {
                            valor += temp + ' = ' + temp + ' + 1;';
                            valor += '\n';
                            valor += 'heap[(int)'+temp+'] = ' + $$[$0][6].toString().charCodeAt(a) + ';';
                            valor += '\n';
                         }
                         r[1] = temp;
                         r[2] = '';
                         r[3] = valor;
                         r[4] = '';
                         r[5] = n.valor.toString() + $$[$0][6].toString();
                         r[6] = n.valor.toString() + $$[$0][6].toString();
                         this.$ = r;
                    }
                    else if ( $$[$0][0] == 'STRING')
                    {
                         var r = [];
                         r[0] = "STRING";

                         var temp = Temp.getTemporal();
                         var valor = '';
                         for(var a = 0; a<n.valor.toString().length; a++)
                         {
                            valor += temp + ' = ' + temp + ' + 1;';
                            valor += '\n';
                            valor += 'heap[(int)'+temp+'] = ' + n.valor.toString().charCodeAt(a) + ';';
                            valor += '\n';
                         }

                         for(var a = 0; a<$$[$0][6].toString().length; a++)
                         {
                            valor += temp + ' = ' + temp + ' + 1;';
                            valor += '\n';
                            valor += 'heap[(int)'+temp+'] = ' + $$[$0][6].toString().charCodeAt(a) + ';';
                            valor += '\n';
                         }
                         r[1] = temp;
                         r[2] = '';
                         r[3] = valor;
                         r[4] = '';
                         r[5] = n.valor.toString() + $$[$0][6].toString();
                         r[6] = n.valor.toString() + $$[$0][6];
                         this.$ = r;
                    }
                    else
                    {
                        var valor = '';
                        var r = [];

                        var temp = Temp.getTemporal();
                        valor += temp + ' = ' + n.position + ';';
                        valor += '\n';
                        var temp1 = Temp.getTemporal();
                        if(n.entorno == 'global')
                        {
                            valor += temp1 + ' = heap[(int)'+temp+'];';
                        }
                        else
                        {
                            valor += temp1 + ' = stack[(int)'+temp+'];';
                        }

                        valor += '\n';

                        valor += $$[$0][3];
                        valor += '\n';

                        var temp4 = Temp.getTemporal();
                        valor += temp4 + ' = ' + temp1 + ' + ' + $$[$0][1] + ';';

                        r[0] = 'NUMBER';
                        r[1] = temp4;
                        r[2] = '';
                        r[3] = valor;
                        r[4] = '';
                        r[5] = Number(n.valor) + Number($$[$0][6]);
                        r[6] = Number(n.valor) + Number($$[$0][6]);
                        this.$ = r;
                    }
                }
                else
                {
                   semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no existe una variable con el identificador:  ${$$[$0-2][4]};`+'\"}');
                   this.$ = ['','','',''];
                }
            }
            else if($$[$0-2][0] != '' && $$[$0][0] == '')
            {
                var n = tab.getPositionAmbito($$[$0][4]);
                if(n!=null)
                {
                    if(n.tipo.toUpperCase() == "STRING")
                    {
                         var r = [];
                         r[0] = "STRING";

                         var temp = Temp.getTemporal();
                         var valor = '';


                         for(var a = 0; a<$$[$0-2][6].toString().length; a++)
                         {
                            valor += temp + ' = ' + temp + ' + 1;';
                            valor += '\n';
                            valor += 'heap[(int)'+temp+'] = ' + $$[$0-2][6].toString().charCodeAt(a) + ';';
                            valor += '\n';
                         }

                        for(var a = 0; a<n.valor.toString().length; a++)
                         {
                            valor += temp + ' = ' + temp + ' + 1;';
                            valor += '\n';
                            valor += 'heap[(int)'+temp+'] = ' + n.valor.toString().charCodeAt(a) + ';';
                            valor += '\n';
                         }

                         r[1] = temp;
                         r[2] = '';
                         r[3] = valor;
                         r[4] = '';
                         r[5] = $$[$0-2][6].toString() + n.valor.toString();
                         r[6] = $$[$0-2][6].toString() + n.valor.toString();
                         this.$ = r;
                    }
                    else if ( $$[$0-2][0] == 'STRING')
                    {
                         var r = [];
                         r[0] = "STRING";

                         var temp = Temp.getTemporal();
                         var valor = '';
                          var val = $$[$0-2][6].toString();
                          for(var a = 0; a<val.length; a++)
                          {
                             valor += temp + ' = ' + temp + ' + 1;';
                             valor += '\n';
                             valor += 'heap[(int)'+temp+'] = ' + val.charCodeAt(a) + ';';
                             valor += '\n';
                          }

                         for(var a = 0; a<n.valor.toString().length; a++)
                         {
                            valor += temp + ' = ' + temp + ' + 1;';
                            valor += '\n';
                            valor += 'heap[(int)'+temp+'] = ' + n.valor.toString().charCodeAt(a) + ';';
                            valor += '\n';
                         }


                         r[1] = temp;
                         r[2] = '';
                         r[3] = valor;
                         r[4] = '';
                         r[5] = $$[$0-2][6].toString() + n.valor.toString();
                         r[6] = $$[$0-2][6].toString() + n.valor.toString();
                         this.$ = r;
                    }
                    else
                    {
                        var valor = '';
                        var r = [];

                        valor += $$[$0-2][3];
                        valor += '\n';

                        var temp = Temp.getTemporal();
                        valor += temp + ' = ' + n.position + ';';
                        valor += '\n';
                        var temp1 = Temp.getTemporal();
                        if(n.entorno == 'global')
                        {
                            valor += temp1 + ' = heap[(int)'+temp+'];';
                        }
                        else
                        {
                            valor += temp1 + ' = stack[(int)'+temp+'];';
                        }

                        valor += '\n';

                        var temp4 = Temp.getTemporal();
                        valor += temp4 + ' = ' + $$[$0-2][1] + ' + ' + temp1 + ';';

                        r[0] = 'NUMBER';
                        r[1] = temp4;
                        r[2] = '';
                        r[3] = valor;
                        r[4] = '';
                        r[5] = '';
                        r[6] = Number($$[$0-2][6]) + Number(n.valor);
                        this.$ = r;
                    }
                }
                else
                {
                   semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no existe una variable con el identificador:  ${$$[$0-2][4]};`+'\"}');
                   this.$ = ['','','',''];
                }
            }
            else
            {
                        var valor = '';
                        var r = [];
                        valor += $$[$0-2][3];
                        valor += '\n';
                        valor += $$[$0][3];
                        valor += '\n';

                        var temp = Temp.getTemporal();
                        valor += temp + ' = ' + $$[$0-2][1] + ' + ' + $$[$0][1] + ';';

                        r[0] = 'NUMBER';
                        r[1] = temp;
                        r[2] = '';
                        r[3] = valor;
                        r[4] = '';
                        r[5] = '';
                        r[6] = Number($$[$0-2][6]) + Number($$[$0][6]);
                        this.$ = r;
            }
        }

break;
case 228:

        if($$[$0-2][0] != 'STRING' && $$[$0][0] != 'STRING')
        {
            if($$[$0-2][0]!= '')
            {
                if($$[$0][0] != '')
                {
                        var valor = '';
                        var r = [];
                        valor += $$[$0-2][3];
                        valor += '\n';
                        valor += $$[$0][3];
                        valor += '\n';

                        var temp = Temp.getTemporal();
                        valor += temp +'='+$$[$0-2][1]+'<'+$$[$0][1]+';';

                        r[0] = 'NUMBER';
                        r[1] = temp;
                        r[2] = '';
                        r[3] = valor;
                        r[4] = '';
                        r[5] = '';
                        r[6] = Number($$[$0-2][6])<Number($$[$0][6]);
                        this.$ = r;
                }
                else
                {
                    var n = tab.getPositionAmbito($$[$0][4]);
                    if(n!=null)
                    {
                        var valor = '';
                        var r = [];
                        valor += $$[$0-2][3];
                        valor += '\n';

                        var tempant = Temp.getTemporal();
                        var tempant1 = Temp.getTemporal();

                        valor += tempant +'='+n.position+';\n';
                        if(n.entorno == 'global')
                        {
                            valor += tempant1 +'=heap[(int)'+tempant+'];\n';
                        }
                        else
                        {
                            valor += tempant1 +'=stack[(int)'+tempant+'];\n';
                        }


                        var temp = Temp.getTemporal();
                        valor += temp +'='+$$[$0-2][1]+'<'+tempant1+';';

                        r[0] = 'NUMBER';
                        r[1] = temp;
                        r[2] = '';
                        r[3] = valor;
                        r[4] = '';
                        r[5] = '';
                        r[6] = Number($$[$0-2][6])<Number(n.valor);
                        this.$ = r;
                    }
                    else
                    {
                        semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no existe la variable: ${$$[$0][4]}`+'\"}');
                        this.$ = ['','','',''];
                    }
                }
            }
            else
            {
                var n = tab.getPositionAmbito($$[$0-2][4]);
                if(n!=null)
                {
                    if($$[$0][0] != '')
                    {
                            var valor = '';
                            var r = [];
                            var tempant = Temp.getTemporal();
                            var tempant1 = Temp.getTemporal();

                            valor += tempant +'='+n.position+';\n';
                            if(n.entorno == 'global')
                            {
                                valor += tempant1 +'=heap[(int)'+tempant+'];\n';
                            }
                            else
                            {
                                valor += tempant1 +'=stack[(int)'+tempant+'];\n';
                            }

                            valor += $$[$0][3];
                            valor += '\n';

                            var temp = Temp.getTemporal();
                            valor += temp+'='+tempant1+'<'+$$[$0][1]+';';

                            r[0] = 'NUMBER';
                            r[1] = temp;
                            r[2] = '';
                            r[3] = valor;
                            r[4] = '';
                            r[5] = '';
                            r[6] = Number(n.valor)<Number($$[$0][6]);
                            this.$ = r;
                    }
                    else
                    {
                        var n1 = tab.getPositionAmbito($$[$0][4]);
                        if(n1!=null)
                        {
                            var valor = '';
                            var r = [];
                            var tempant = Temp.getTemporal();
                            var tempant1 = Temp.getTemporal();

                            valor += tempant +'='+n.position+';\n';
                            if(n.entorno == 'global')
                            {
                                valor += tempant1 +'=heap[(int)'+tempant+'];\n';
                            }
                            else
                            {
                                valor += tempant1 +'=stack[(int)'+tempant+'];\n';
                            }


                            var tempant11 = Temp.getTemporal();
                            var tempant111 = Temp.getTemporal();

                            valor += tempant11 +'='+n1.position+';\n';
                            if(n1.entorno == 'global')
                            {
                                valor += tempant111 +'=heap[(int)'+tempant11+'];\n';
                            }
                            else
                            {
                                valor += tempant111 +'=stack[(int)'+tempant11+'];\n';
                            }


                            var temp = Temp.getTemporal();
                            valor += temp +'='+tempant1+'<'+tempant111+';';

                            r[0] = 'BOOLEAN';
                            r[1] = temp;
                            r[2] = '';
                            r[3] = valor;
                            r[4] = '';
                            r[5] = '';
                            r[6] = Number(n.valor)<Number(n1.valor);
                            this.$ = r;
                        }
                        else
                        {
                            semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no existe la variable: ${$$[$0][4]}`+'\"}');
                            this.$ = ['','','',''];
                        }
                    }
                }
                else
                {
                    semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no existe la variable: ${$$[$0-2][4]}`+'\"}');
                    this.$ = ['','','',''];
                }
            }
        }
        else
        {
            semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no se puede ejecutar la operacion, no se puede aplicar  a variables de tipo STRING`+'\"}');
            this.$ = ['','','',''];
        }

break;
case 229:

        if($$[$0-2][0] != 'STRING' && $$[$0][0] != 'STRING')
        {
            if($$[$0-2][0]!= '')
            {
                if($$[$0][0] != '')
                {
                        var valor = '';
                        var r = [];
                        valor += $$[$0-2][3];
                        valor += '\n';
                        valor += $$[$0][3];
                        valor += '\n';

                        var temp = Temp.getTemporal();
                        valor += temp +'='+$$[$0-2][1]+'>'+$$[$0][1]+';';

                        r[0] = 'BOOLEAN';
                        r[1] = temp;
                        r[2] = '';
                        r[3] = valor;
                        r[4] = '';
                        r[5] = '';
                        r[6] = Number($$[$0-2][6])>Number($$[$0][6]);
                        this.$ = r;
                }
                else
                {
                    var n = tab.getPositionAmbito($$[$0][4]);
                    if(n!=null)
                    {
                        var valor = '';
                        var r = [];
                        valor += $$[$0-2][3];
                        valor += '\n';

                        var tempant = Temp.getTemporal();
                        var tempant1 = Temp.getTemporal();

                        valor += tempant +'='+n.position+';\n';
                        if(n.entorno == 'global')
                        {
                            valor += tempant1 +'=heap[(int)'+tempant+'];\n';
                        }
                        else
                        {
                            valor += tempant1 +'=stack[(int)'+tempant+'];\n';
                        }


                        var temp = Temp.getTemporal();
                        valor += temp +'='+$$[$0-2][1]+'>'+tempant1+';';

                        r[0] = 'BOOLEAN';
                        r[1] = temp;
                        r[2] = '';
                        r[3] = valor;
                        r[4] = '';
                        r[5] = '';
                        r[6] = Number($$[$0-2][6])>Number(n.valor);
                        this.$ = r;
                    }
                    else
                    {
                        semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no existe la variable: ${$$[$0][4]}`+'\"}');
                        this.$ = ['','','',''];
                    }
                }
            }
            else
            {
                var n = tab.getPositionAmbito($$[$0-2][4]);
                if(n!=null)
                {
                    if($$[$0][0] != '')
                    {
                            var valor = '';
                            var r = [];
                            var tempant = Temp.getTemporal();
                            var tempant1 = Temp.getTemporal();

                            valor += tempant +'='+n.position+';\n';
                            if(n.entorno == 'global')
                            {
                                valor += tempant1 +'=heap[(int)'+tempant+'];\n';
                            }
                            else
                            {
                                valor += tempant1 +'=stack[(int)'+tempant+'];\n';
                            }

                            valor += $$[$0][3];
                            valor += '\n';

                            var temp = Temp.getTemporal();
                            valor += temp+'='+tempant1+'>'+$$[$0][1]+';';

                            r[0] = 'BOOLEAN';
                            r[1] = temp;
                            r[2] = '';
                            r[3] = valor;
                            r[4] = '';
                            r[5] = '';
                            r[6] = Number(n.valor)>Number($$[$0][6]);
                            this.$ = r;
                    }
                    else
                    {
                        var n1 = tab.getPositionAmbito($$[$0][4]);
                        if(n1!=null)
                        {
                            var valor = '';
                            var r = [];
                            var tempant = Temp.getTemporal();
                            var tempant1 = Temp.getTemporal();

                            valor += tempant +'='+n.position+';\n';
                            if(n.entorno == 'global')
                            {
                                valor += tempant1 +'=heap[(int)'+tempant+'];\n';
                            }
                            else
                            {
                                valor += tempant1 +'=stack[(int)'+tempant+'];\n';
                            }

                            valor += '\n';

                            var tempant11 = Temp.getTemporal();
                            var tempant111 = Temp.getTemporal();

                            valor += tempant11 +'='+n1.position+';\n';
                            if(n1.entorno == 'global')
                            {
                                valor += tempant111 +'=heap[(int)'+tempant11+'];\n';
                            }
                            else
                            {
                                valor += tempant111 +'=stack[(int)'+tempant11+'];\n';
                            }


                            var temp = Temp.getTemporal();
                            valor += temp +'='+tempant1+'>'+tempant111+';';

                            r[0] = 'BOOLEAN';
                            r[1] = temp;
                            r[2] = '';
                            r[3] = valor;
                            r[4] = '';
                            r[5] = '';
                            r[6] = Number(n.valor)>Number(n1.valor);
                            this.$ = r;
                        }
                        else
                        {
                            semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no existe la variable: ${$$[$0][4]}`+'\"}');
                            this.$ = ['','','',''];
                        }
                    }
                }
                else
                {
                    semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no existe la variable: ${$$[$0-2][4]}`+'\"}');
                    this.$ = ['','','',''];
                }
            }
        }
        else
        {
            semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no se puede ejecutar la operacion, no se puede aplicar  a variables de tipo STRING`+'\"}');
            this.$ = ['','','',''];
        }

break;
case 231: case 234:

        if($$[$0-2][0] != 'STRING' && $$[$0][0] != 'STRING')
        {
            if($$[$0-2][0]!= '')
            {
                if($$[$0][0] != '')
                {
                        var valor = '';
                        var r = [];
                        valor += $$[$0-2][3];
                        valor += '\n';
                        valor += $$[$0][3];
                        valor += '\n';

                        var temp = Temp.getTemporal();
                        valor += temp +'='+$$[$0-2][1]+'<'+$$[$0][1]+';';

                        r[0] = 'BOOLEAN';
                        r[1] = temp;
                        r[2] = '';
                        r[3] = valor;
                        r[4] = '';
                        r[5] = '';
                        r[6] = Number($$[$0-2][6])<Number($$[$0][6]);
                        this.$ = r;
                }
                else
                {
                    var n = tab.getPositionAmbito($$[$0][4]);
                    if(n!=null)
                    {
                        var valor = '';
                        var r = [];
                        valor += $$[$0-2][3];
                        valor += '\n';

                        var tempant = Temp.getTemporal();
                        var tempant1 = Temp.getTemporal();

                        valor += tempant +'='+n.position+';\n';
                        if(n.entorno == 'global')
                        {
                            valor += tempant1 +'=heap[(int)'+tempant+'];\n';
                        }
                        else
                        {
                            valor += tempant1 +'=stack[(int)'+tempant+'];\n';
                        }


                        var temp = Temp.getTemporal();
                        valor += temp +'='+$$[$0-2][1]+'<'+tempant1+';';

                        r[0] = 'BOOLEAN';
                        r[1] = temp;
                        r[2] = '';
                        r[3] = valor;
                        r[4] = '';
                        r[5] = '';
                        r[6] = Number($$[$0-2][6])<Number(n.valor);
                        this.$ = r;
                    }
                    else
                    {
                        semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no existe la variable: ${$$[$0][4]}`+'\"}');
                        this.$ = ['','','',''];
                    }
                }
            }
            else
            {
                var n = tab.getPositionAmbito($$[$0-2][4]);
                if(n!=null)
                {
                    if($$[$0][0] != '')
                    {
                            var valor = '';
                            var r = [];
                            var tempant = Temp.getTemporal();
                            var tempant1 = Temp.getTemporal();

                            valor += tempant +'='+n.position+';\n';
                            if(n.entorno == 'global')
                            {
                                valor += tempant1 +'=heap[(int)'+tempant+'];\n';
                            }
                            else
                            {
                                valor += tempant1 +'=stack[(int)'+tempant+'];\n';
                            }

                            valor += $$[$0][3];
                            valor += '\n';

                            var temp = Temp.getTemporal();
                            valor += temp+'='+tempant1+'<'+$$[$0][1]+';';

                            r[0] = 'BOOLEAN';
                            r[1] = temp;
                            r[2] = '';
                            r[3] = valor;
                            r[4] = '';
                            r[5] = '';
                            r[6] = Number(n.valor)<Number($$[$0][6]);
                            this.$ = r;
                    }
                    else
                    {
                        var n1 = tab.getPositionAmbito($$[$0][4]);
                        if(n1!=null)
                        {
                            var valor = '';
                            var r = [];
                            var tempant = Temp.getTemporal();
                            var tempant1 = Temp.getTemporal();

                            valor += tempant +'='+n.position+';\n';
                            if(n.entorno == 'global')
                            {
                                valor += tempant1 +'=heap[(int)'+tempant+'];\n';
                            }
                            else
                            {
                                valor += tempant1 +'=stack[(int)'+tempant+'];\n';
                            }


                            var tempant11 = Temp.getTemporal();
                            var tempant111 = Temp.getTemporal();

                            valor += tempant11 +'='+n1.position+';\n';
                            if(n1.entorno == 'global')
                            {
                                valor += tempant111 +'=heap[(int)'+tempant11+'];\n';
                            }
                            else
                            {
                                valor += tempant111 +'=stack[(int)'+tempant11+'];\n';
                            }


                            var temp = Temp.getTemporal();
                            valor += temp +'='+tempant1+'<'+tempant111+';';

                            r[0] = 'BOOLEAN';
                            r[1] = temp;
                            r[2] = '';
                            r[3] = valor;
                            r[4] = '';
                            r[5] = '';
                            r[6] = Number(n.valor)<Number(n1.valor);
                            this.$ = r;
                        }
                        else
                        {
                            semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no existe la variable: ${$$[$0][4]}`+'\"}');
                            this.$ = ['','','',''];
                        }
                    }
                }
                else
                {
                    semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no existe la variable: ${$$[$0-2][4]}`+'\"}');
                    this.$ = ['','','',''];
                }
            }
        }
        else
        {
            semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no se puede ejecutar la operacion, no se puede aplicar  a variables de tipo STRING`+'\"}');
            this.$ = ['','','',''];
        }

break;
case 232:

        if($$[$0-2][0] != 'STRING' && $$[$0][0] != 'STRING')
        {
            if($$[$0-2][0]!= '')
            {
                if($$[$0][0] != '')
                {
                        var valor = '';
                        var r = [];
                        valor += $$[$0-2][3];
                        valor += '\n';
                        valor += $$[$0][3];
                        valor += '\n';

                        var temp = Temp.getTemporal();
                        valor += temp +'='+$$[$0-2][1]+'>'+$$[$0][1]+';';

                        r[0] = 'BOOLEAN';
                        r[1] = temp;
                        r[2] = '';
                        r[3] = valor;
                        r[4] = '';
                        r[5] = '';
                        r[6] = Number($$[$0-2][6])>Number($$[$0][6]);
                        this.$ = r;
                }
                else
                {
                    var n = tab.getPositionAmbito($$[$0][4]);
                    if(n!=null)
                    {
                        var valor = '';
                        var r = [];
                        valor += $$[$0-2][3];
                        valor += '\n';

                        var tempant = Temp.getTemporal();
                        var tempant1 = Temp.getTemporal();

                        valor += tempant +'='+n.position+';\n';
                        if(n.entorno == 'global')
                        {
                            valor += tempant1 +'=heap[(int)'+tempant+'];\n';
                        }
                        else
                        {
                            valor += tempant1 +'=stack[(int)'+tempant+'];\n';
                        }


                        var temp = Temp.getTemporal();
                        valor += temp +'='+$$[$0-2][1]+'>'+tempant1+';';

                        r[0] = 'BOOLEAN';
                        r[1] = temp;
                        r[2] = '';
                        r[3] = valor;
                        r[4] = '';
                        r[5] = '';
                        r[6] = Number($$[$0-2][6])>Number(n.valor);
                        this.$ = r;
                    }
                    else
                    {
                        semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no existe la variable: ${$$[$0][4]}`+'\"}');
                        this.$ = ['','','',''];
                    }
                }
            }
            else
            {
                var n = tab.getPositionAmbito($$[$0-2][4]);
                if(n!=null)
                {
                    if($$[$0][0] != '')
                    {
                            var valor = '';
                            var r = [];
                            var tempant = Temp.getTemporal();
                            var tempant1 = Temp.getTemporal();

                            valor += tempant +'='+n.position+';\n';
                            if(n.entorno == 'global')
                            {
                                valor += tempant1 +'=heap[(int)'+tempant+'];\n';
                            }
                            else
                            {
                                valor += tempant1 +'=stack[(int)'+tempant+'];\n';
                            }

                            valor += $$[$0][3];
                            valor += '\n';

                            var temp = Temp.getTemporal();
                            valor += temp+'='+tempant1+'>'+$$[$0][1]+';';

                            r[0] = 'BOOLEAN';
                            r[1] = temp;
                            r[2] = '';
                            r[3] = valor;
                            r[4] = '';
                            r[5] = '';
                            r[6] = Number(n.valor)>Number($$[$0][6]);
                            this.$ = r;
                    }
                    else
                    {
                        var n1 = tab.getPositionAmbito($$[$0][4]);
                        if(n1!=null)
                        {
                            var valor = '';
                            var r = [];
                            var tempant = Temp.getTemporal();
                            var tempant1 = Temp.getTemporal();

                            valor += tempant +'='+n.position+';\n';
                            if(n.entorno = 'global')
                            {
                                valor += tempant1 +'=heap[(int)'+tempant+'];\n';
                            }
                            else
                            {
                                valor += tempant1 +'=stack[(int)'+tempant+'];\n';
                            }

                            valor += '\n';

                            var tempant11 = Temp.getTemporal();
                            var tempant111 = Temp.getTemporal();

                            valor += tempant11 +'='+n1.position+';\n';
                            if(n1.entorno == 'global')
                            {
                                valor += tempant111 +'=heap[(int)'+tempant11+'];\n';
                            }
                            else
                            {
                                valor += tempant111 +'=stack[(int)'+tempant11+'];\n';
                            }


                            var temp = Temp.getTemporal();
                            valor += temp +'='+tempant1+'>'+tempant111+';';

                            r[0] = 'BOOLEAN';
                            r[1] = temp;
                            r[2] = '';
                            r[3] = valor;
                            r[4] = '';
                            r[5] = '';
                            r[6] = Number(n.valor)>Number(n1.valor);
                            this.$ = r;
                        }
                        else
                        {
                            semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no existe la variable: ${$$[$0][4]}`+'\"}');
                            this.$ = ['','','',''];
                        }
                    }
                }
                else
                {
                    semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no existe la variable: ${$$[$0-2][4]}`+'\"}');
                    this.$ = ['','','',''];
                }
            }
        }
        else
        {
            semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no se puede ejecutar la operacion, no se puede aplicar  a variables de tipo STRING`+'\"}');
            this.$ = ['','','',''];
        }

break;
case 235:

        if($$[$0-2][0] != 'STRING' && $$[$0][0] != 'STRING')
        {
            if($$[$0-2][0]!= '')
            {
                if($$[$0][0] != '')
                {
                        var valor = '';
                        var r = [];
                        valor += $$[$0-2][3];
                        valor += '\n';
                        valor += $$[$0][3];
                        valor += '\n';

                        var temp = Temp.getTemporal();
                        valor += temp +'='+$$[$0-2][1]+'>'+$$[$0][1]+';';

                        r[0] = 'BOOLEAN';
                        r[1] = temp;
                        r[2] = '';
                        r[3] = valor;
                        r[4] = '';
                        r[5] = '';
                        r[6] = Number($$[$0-2][6])>Number($$[$0][6]);
                        this.$ = r;
                }
                else
                {
                    var n = tab.getPositionAmbito($$[$0][4]);
                    if(n!=null)
                    {
                        var valor = '';
                        var r = [];
                        valor += $$[$0-2][3];
                        valor += '\n';

                        var tempant = Temp.getTemporal();
                        var tempant1 = Temp.getTemporal();

                        valor += tempant +'='+n.position+';\n';
                        if(n.entorno == 'global')
                        {
                            valor += tempant1 +'=heap[(int)'+tempant+'];\n';
                        }
                        else
                        {
                            valor += tempant1 +'=stack[(int)'+tempant+'];\n';
                        }


                        var temp = Temp.getTemporal();
                        valor += temp +'='+$$[$0-2][1]+'>'+tempant1+';';

                        r[0] = 'BOOLEAN';
                        r[1] = temp;
                        r[2] = '';
                        r[3] = valor;
                        r[4] = '';
                        r[5] = '';
                        r[6] = Number($$[$0-2][6])>Number(n.valor);
                        this.$ = r;
                    }
                    else
                    {
                        semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no existe la variable: ${$$[$0][4]}`+'\"}');
                        this.$ = ['','','',''];
                    }
                }
            }
            else
            {
                var n = tab.getPositionAmbito($$[$0-2][4]);
                if(n!=null)
                {
                    if($$[$0][0] != '')
                    {
                            var valor = '';
                            var r = [];
                            var tempant = Temp.getTemporal();
                            var tempant1 = Temp.getTemporal();

                            valor += tempant +'='+n.position+';\n';
                            if(n.entorno == 'global')
                            {
                                valor += tempant1 +'=heap[(int)'+tempant+'];\n';
                            }
                            else
                            {
                                valor += tempant1 +'=stack[(int)'+tempant+'];\n';
                            }

                            valor += $$[$0][3];
                            valor += '\n';

                            var temp = Temp.getTemporal();
                            valor += temp+'='+tempant1+'>'+$$[$0][1]+';';

                            r[0] = 'BOOLEAN';
                            r[1] = temp;
                            r[2] = '';
                            r[3] = valor;
                            r[4] = '';
                            r[5] = '';
                            r[6] = Number(n.valor)>Number($$[$0][6]);
                            this.$ = r;
                    }
                    else
                    {
                        var n1 = tab.getPositionAmbito($$[$0][4]);
                        if(n1!=null)
                        {
                            var valor = '';
                            var r = [];
                            var tempant = Temp.getTemporal();
                            var tempant1 = Temp.getTemporal();

                            valor += tempant +'='+n.position+';\n';
                            if(n.entorno == 'global')
                            {
                                valor += tempant1 +'=heap[(int)'+tempant+'];\n';
                            }
                            else
                            {
                                valor += tempant1 +'=stack[(int)'+tempant+'];\n';
                            }


                            var tempant11 = Temp.getTemporal();
                            var tempant111 = Temp.getTemporal();

                            valor += tempant11 +'='+n1.position+';\n';
                            if(n1.entorno == 'global')
                            {
                                valor += tempant111 +'=heap[(int)'+tempant11+'];\n';
                            }
                            else
                            {
                                valor += tempant111 +'=stack[(int)'+tempant11+'];\n';
                            }


                            var temp = Temp.getTemporal();
                            valor += temp +'='+tempant1+'>'+tempant111+';';

                            r[0] = 'BOOLEAN';
                            r[1] = temp;
                            r[2] = '';
                            r[3] = valor;
                            r[4] = '';
                            r[5] = '';
                            r[6] = Number(n.valor)>Number(n1.valor);
                            this.$ = r;
                        }
                        else
                        {
                            semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no existe la variable: ${$$[$0][4]}`+'\"}');
                            this.$ = ['','','',''];
                        }
                    }
                }
                else
                {
                    semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no existe la variable: ${$$[$0-2][4]}`+'\"}');
                    this.$ = ['','','',''];
                }
            }
        }
        else
        {
            semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no se puede ejecutar la operacion, no se puede aplicar  a variables de tipo STRING`+'\"}');
            this.$ = ['','','',''];
        }

break;
case 237:

        if($$[$0-2][0] != 'STRING' && $$[$0][0] != 'STRING')
        {
            if($$[$0-2][0]!= '')
            {
                if($$[$0][0] != '')
                {
                        var valor = '';
                        var r = [];
                        valor += $$[$0-2][3];
                        valor += '\n';
                        valor += $$[$0][3];
                        valor += '\n';

                        var temp = Temp.getTemporal();
                        valor += temp +'='+$$[$0-2][1]+'=='+$$[$0][1]+';';

                        r[0] = 'BOOLEAN';
                        r[1] = temp;
                        r[2] = '';
                        r[3] = valor;
                        r[4] = '';
                        r[5] = '';
                        r[6] = Number($$[$0-2][6])==Number($$[$0][6]);
                        this.$ = r;
                }
                else
                {
                    var n = tab.getPositionAmbito($$[$0][4]);
                    if(n!=null)
                    {
                        var valor = '';
                        var r = [];
                        valor += $$[$0-2][3];
                        valor += '\n';

                        var tempant = Temp.getTemporal();
                        var tempant1 = Temp.getTemporal();

                        valor += tempant +'='+n.position+';\n';
                        if(n.entorno == 'global')
                        {
                            valor += tempant1 +'=heap[(int)'+tempant+'];\n';
                        }
                        else
                        {
                            valor += tempant1 +'=stack[(int)'+tempant+'];\n';
                        }


                        var temp = Temp.getTemporal();
                        valor += temp +'='+$$[$0-2][1]+'=='+tempant1+';';

                        r[0] = 'BOOLEAN';
                        r[1] = temp;
                        r[2] = '';
                        r[3] = valor;
                        r[4] = '';
                        r[5] = '';
                        r[6] = Number($$[$0-2][6])==Number(n.valor);
                        this.$ = r;
                    }
                    else
                    {
                        semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no existe la variable: ${$$[$0][4]}`+'\"}');
                        this.$ = ['','','',''];
                    }
                }
            }
            else
            {
                var n = tab.getPositionAmbito($$[$0-2][4]);
                if(n!=null)
                {
                    if($$[$0][0] != '')
                    {
                            var valor = '';
                            var r = [];
                            var tempant = Temp.getTemporal();
                            var tempant1 = Temp.getTemporal();

                            valor += tempant +'='+n.position+';\n';
                            if(n.entorno == 'global')
                            {
                                valor += tempant1 +'=heap[(int)'+tempant+'];\n';
                            }
                            else
                            {
                                valor += tempant1 +'=stack[(int)'+tempant+'];\n';
                            }

                            valor += $$[$0][3];
                            valor += '\n';

                            var temp = Temp.getTemporal();
                            valor += temp+'='+tempant1+'=='+$$[$0][1]+';';

                            r[0] = 'BOOLEAN';
                            r[1] = temp;
                            r[2] = '';
                            r[3] = valor;
                            r[4] = '';
                            r[5] = '';
                            r[6] = Number(n.valor)==Number($$[$0][6]);
                            this.$ = r;
                    }
                    else
                    {
                        var n1 = tab.getPositionAmbito($$[$0][4]);
                        if(n1!=null)
                        {
                            var valor = '';
                            var r = [];
                            var tempant = Temp.getTemporal();
                            var tempant1 = Temp.getTemporal();

                            valor += tempant +'='+n.position+';\n';
                            if(n.entorno == 'global')
                            {
                                valor += tempant1 +'=heap[(int)'+tempant+'];\n';
                            }
                            else
                            {
                                valor += tempant1 +'=stack[(int)'+tempant+'];\n';
                            }


                            var tempant11 = Temp.getTemporal();
                            var tempant111 = Temp.getTemporal();

                            valor += tempant11 +'='+n1.position+';\n';
                            if(n1.entorno == 'global')
                            {
                                valor += tempant111 +'=heap[(int)'+tempant11+'];\n';
                            }
                            else
                            {
                                valor += tempant111 +'=stack[(int)'+tempant11+'];\n';
                            }


                            var temp = Temp.getTemporal();
                            valor += temp +'='+tempant1+'=='+tempant111+';';

                            r[0] = 'BOOLEAN';
                            r[1] = temp;
                            r[2] = '';
                            r[3] = valor;
                            r[4] = '';
                            r[5] = '';
                            r[6] = Number(n.valor)==Number(n1.valor);
                            this.$ = r;
                        }
                        else
                        {
                            semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no existe la variable: ${$$[$0][4]}`+'\"}');
                            this.$ = ['','','',''];
                        }
                    }
                }
                else
                {
                    semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no existe la variable: ${$$[$0-2][4]}`+'\"}');
                    this.$ = ['','','',''];
                }
            }
        }
        else if($$[$0-2][0] == 'STRING' && $$[$0][0] == '')
        {
            var valor = '';
            var temp = Temp.getTemporal();
            var n = tab.getPositionAmbito($$[$0][4]);
            if(n!=null)
            {
                if(n.tipo.toUpperCase() == 'STRING')
                {
                    if($$[$0-2][5].toString() == n.valor.toString())
                    {
                        valor += `${temp} = 1;\n`;
                    }
                    else
                    {
                        valor += `${temp} = 0;\n`;
                    }
                    var r = [];
                    r[0] = 'BOOLEAN';
                    r[1] = temp;
                    r[2] = '';
                    r[3] = valor;
                    r[4] = '';
                    r[5] = $$[$0-2][5].toString() == n.valor.toString();
                    r[6] = $$[$0-2][5].toString() == n.valor.toString();
                    this.$ = r;
                }
                else
                {
                    semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no se puede ejecutar la operacion.`+'\"}');
                    this.$ = ['','','',''];
                }
            }
            else
            {
                semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no se puede ejecutar la operacion.`+'\"}');
                this.$ = ['','','',''];
            }

        }
        else if( $$[$0-2][0] == '' && $$[$0][0] == 'STRING')
        {
            var valor = '';
            var temp = Temp.getTemporal();
            var n = tab.getPositionAmbito($$[$0-2][4]);

            if(n!=null)
            {
                if(n.tipo.toUpperCase() == 'STRING')
                {
                    if($$[$0][5].toString() == n.valor.toString())
                    {
                        valor += `${temp} = 1;\n`;
                    }
                    else
                    {
                        valor += `${temp} = 0;\n`;
                    }
                    var r = [];
                    r[0] = 'BOOLEAN';
                    r[1] = temp;
                    r[2] = '';
                    r[3] = valor;
                    r[4] = '';
                    r[5] = $$[$0][5].toString() == n.valor.toString();
                    r[6] = $$[$0][5].toString() == n.valor.toString();
                    this.$ = r;
                }
                else
                {
                    semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no se puede ejecutar la operacion.`+'\"}');
                    this.$ = ['','','',''];
                }
            }
            else
            {
                semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no se puede ejecutar la operacion.`+'\"}');
                this.$ = ['','','',''];
            }

        }
        else
        {
            semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no se puede ejecutar la operacion.`+'\"}');
            this.$ = ['','','',''];
        }

break;
case 238:

        if($$[$0-2][0] != 'STRING' && $$[$0][0] != 'STRING')
        {
            if($$[$0-2][0]!= '')
            {
                if($$[$0][0] != '')
                {
                        var valor = '';
                        var r = [];
                        valor += $$[$0-2][3];
                        valor += '\n';
                        valor += $$[$0][3];
                        valor += '\n';

                        var temp = Temp.getTemporal();
                        valor += temp +'='+$$[$0-2][1]+'!='+$$[$0][1]+';';

                        r[0] = 'BOOLEAN';
                        r[1] = temp;
                        r[2] = '';
                        r[3] = valor;
                        r[4] = '';
                        r[5] = '';
                        r[6] = Number($$[$0-2][6])!=Number($$[$0][6]);
                        this.$ = r;
                }
                else
                {
                    var n = tab.getPositionAmbito($$[$0][4]);
                    if(n!=null)
                    {
                        var valor = '';
                        var r = [];
                        valor += $$[$0-2][3];
                        valor += '\n';

                        var tempant = Temp.getTemporal();
                        var tempant1 = Temp.getTemporal();

                        valor += tempant +'='+n.position+';\n';
                        if(n.entorno == 'global')
                        {
                            valor += tempant1 +'=heap[(int)'+tempant+'];\n';
                        }
                        else
                        {
                            valor += tempant1 +'=stack[(int)'+tempant+'];\n';
                        }


                        var temp = Temp.getTemporal();
                        valor += temp +'='+$$[$0-2][1]+'!='+tempant1+';';

                        r[0] = 'BOOLEAN';
                        r[1] = temp;
                        r[2] = '';
                        r[3] = valor;
                        r[4] = '';
                        r[5] = '';
                        r[6] = Number($$[$0-2][6])!=Number(n.valor);
                        this.$ = r;
                    }
                    else
                    {
                        semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no existe la variable: ${$$[$0][4]}`+'\"}');
                        this.$ = ['','','',''];
                    }
                }
            }
            else
            {
                var n = tab.getPositionAmbito($$[$0-2][4]);
                if(n!=null)
                {
                    if($$[$0][0] != '')
                    {
                            var valor = '';
                            var r = [];
                            var tempant = Temp.getTemporal();
                            var tempant1 = Temp.getTemporal();

                            valor += tempant +'='+n.position+';\n';
                            if(n.entorno == 'global')
                            {
                                valor += tempant1 +'=heap[(int)'+tempant+'];\n';
                            }
                            else
                            {
                                valor += tempant1 +'=stack[(int)'+tempant+'];\n';
                            }

                            valor += $$[$0][3];
                            valor += '\n';

                            var temp = Temp.getTemporal();
                            valor += temp+'='+tempant1+'!='+$$[$0][1]+';';

                            r[0] = 'BOOLEAN';
                            r[1] = temp;
                            r[2] = '';
                            r[3] = valor;
                            r[4] = '';
                            r[5] = '';
                            r[6] = Number(n.valor)!=Number($$[$0][6]);
                            this.$ = r;
                    }
                    else
                    {
                        var n1 = tab.getPositionAmbito($$[$0][4]);
                        if(n1!=null)
                        {
                            var valor = '';
                            var r = [];
                            var tempant = Temp.getTemporal();
                            var tempant1 = Temp.getTemporal();

                            valor += tempant +'='+n.position+';\n';
                            if(n.entorno == 'global')
                            {
                                valor += tempant1 +'=heap[(int)'+tempant+'];\n';
                            }
                            else
                            {
                                valor += tempant1 +'=stack[(int)'+tempant+'];\n';
                            }


                            var tempant11 = Temp.getTemporal();
                            var tempant111 = Temp.getTemporal();

                            valor += tempant11 +'='+n1.position+';\n';
                            if(n1.entorno == 'global')
                            {
                                valor += tempant111 +'=heap[(int)'+tempant11+'];\n';
                            }
                            else
                            {
                                valor += tempant111 +'=stack[(int)'+tempant11+'];\n';
                            }


                            var temp = Temp.getTemporal();
                            valor += temp +'='+tempant1+'!='+tempant111+';';

                            r[0] = 'BOOLEAN';
                            r[1] = temp;
                            r[2] = '';
                            r[3] = valor;
                            r[4] = '';
                            r[5] = '';
                            r[6] = Number(n.valor)!=Number(n1.valor);
                            this.$ = r;
                        }
                        else
                        {
                            semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no existe la variable: ${$$[$0][4]}`+'\"}');
                            this.$ = ['','','',''];
                        }
                    }
                }
                else
                {
                    semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no existe la variable: ${$$[$0-2][4]}`+'\"}');
                    this.$ = ['','','',''];
                }
            }
        }
        else if($$[$0-2][0] == 'STRING' && $$[$0][0] == '')
        {
            var valor = '';
            var temp = Temp.getTemporal();
            var n = tab.getPositionAmbito($$[$0][4]);
            if(n!=null)
            {
                if(n.tipo.toUpperCase() == 'STRING')
                {
                    if($$[$0-2][5].toString() != n.valor.toString())
                    {
                        valor += `${temp} = 1;\n`;
                    }
                    else
                    {
                        valor += `${temp} = 0;\n`;
                    }
                    var r = [];
                    r[0] = 'BOOLEAN';
                    r[1] = temp;
                    r[2] = '';
                    r[3] = valor;
                    r[4] = '';
                    r[5] = $$[$0-2][5].toString() != n.valor.toString();
                    r[6] = $$[$0-2][5].toString() != n.valor.toString();
                    this.$ = r;
                }
                else
                {
                    semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no se puede ejecutar la operacion.`+'\"}');
                    this.$ = ['','','',''];
                }
            }
            else
            {
                semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no se puede ejecutar la operacion.`+'\"}');
                this.$ = ['','','',''];
            }

        }
        else if( $$[$0-2][0] == '' && $$[$0][0] == 'STRING')
        {
            var valor = '';
            var temp = Temp.getTemporal();
            var n = tab.getPositionAmbito($$[$0-2][4]);
            if(n!=null)
            {
                if(n.tipo.toUpperCase() == 'STRING')
                {
                    if($$[$0][5].toString() != n.valor.toString())
                    {
                        valor += `${temp} = 1;\n`;
                    }
                    else
                    {
                        valor += `${temp} = 0;\n`;
                    }
                    var r = [];
                    r[0] = 'BOOLEAN';
                    r[1] = temp;
                    r[2] = '';
                    r[3] = valor;
                    r[4] = '';
                    r[5] = $$[$0][5].toString() != n.valor.toString();
                    r[6] = $$[$0][5].toString() != n.valor.toString();
                    this.$ = r;
                }
                else
                {
                    semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no se puede ejecutar la operacion.`+'\"}');
                    this.$ = ['','','',''];
                }
            }
            else
            {
                semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no se puede ejecutar la operacion.`+'\"}');
                this.$ = ['','','',''];
            }

        }
        else
        {
            semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no se puede ejecutar la operacion.`+'\"}');
            this.$ = ['','','',''];
        }

break;
case 239:

        if($$[$0-2][0] != 'STRING' && $$[$0][0] != 'STRING')
        {
            if($$[$0-2][0]!= '')
            {
                if($$[$0][0] != '')
                {
                        var valor = '';
                        var r = [];
                        valor += $$[$0-2][3];
                        valor += '\n';
                        valor += $$[$0][3];
                        valor += '\n';

                        var temp = Temp.getTemporal();
                        valor += temp +'='+$$[$0-2][1]+'>='+$$[$0][1]+';';

                        r[0] = 'BOOLEAN';
                        r[1] = temp;
                        r[2] = '';
                        r[3] = valor;
                        r[4] = '';
                        r[5] = '';
                        r[6] = Number($$[$0-2][6])>=Number($$[$0][6]);
                        this.$ = r;
                }
                else
                {
                    var n = tab.getPositionAmbito($$[$0][4]);
                    if(n!=null)
                    {
                        var valor = '';
                        var r = [];
                        valor += $$[$0-2][3];
                        valor += '\n';

                        var tempant = Temp.getTemporal();
                        var tempant1 = Temp.getTemporal();

                        valor += tempant +'='+n.position+';\n';
                        if(n.entorno == 'global')
                        {
                            valor += tempant1 +'=heap[(int)'+tempant+'];\n';
                        }
                        else
                        {
                            valor += tempant1 +'=stack[(int)'+tempant+'];\n';
                        }


                        var temp = Temp.getTemporal();
                        valor += temp +'='+$$[$0-2][1]+'>='+tempant1+';';

                        r[0] = 'BOOLEAN';
                        r[1] = temp;
                        r[2] = '';
                        r[3] = valor;
                        r[4] = '';
                        r[5] = '';
                        r[6] = Number($$[$0-2][6])>=Number(n.valor);
                        this.$ = r;
                    }
                    else
                    {
                        semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no existe la variable: ${$$[$0][4]}`+'\"}');
                        this.$ = ['','','',''];
                    }
                }
            }
            else
            {
                var n = tab.getPositionAmbito($$[$0-2][4]);
                if(n!=null)
                {
                    if($$[$0][0] != '')
                    {
                            var valor = '';
                            var r = [];
                            var tempant = Temp.getTemporal();
                            var tempant1 = Temp.getTemporal();

                            valor += tempant +'='+n.position+';\n';
                            if(n.entorno == 'global')
                            {
                                valor += tempant1 +'=heap[(int)'+tempant+'];\n';
                            }
                            else
                            {
                                valor += tempant1 +'=stack[(int)'+tempant+'];\n';
                            }

                            valor += $$[$0][3];
                            valor += '\n';

                            var temp = Temp.getTemporal();
                            valor += temp+'='+tempant1+'>='+$$[$0][1]+';';

                            r[0] = 'BOOLEAN';
                            r[1] = temp;
                            r[2] = '';
                            r[3] = valor;
                            r[4] = '';
                            r[5] = '';
                            r[6] = Number(n.valor)>=Number($$[$0][6]);
                            this.$ = r;
                    }
                    else
                    {
                        var n1 = tab.getPositionAmbito($$[$0][4]);
                        if(n1!=null)
                        {
                            var valor = '';
                            var r = [];
                            var tempant = Temp.getTemporal();
                            var tempant1 = Temp.getTemporal();

                            valor += tempant +'='+n.position+';\n';
                            if(n.entorno == 'global')
                            {
                                valor += tempant1 +'=heap[(int)'+tempant+'];\n';
                            }
                            else
                            {
                                valor += tempant1 +'=stack[(int)'+tempant+'];\n';
                            }

                            valor += '\n';

                            var tempant11 = Temp.getTemporal();
                            var tempant111 = Temp.getTemporal();

                            valor += tempant11 +'='+n1.position+';\n';
                            if(n1.entorno == 'global')
                            {
                                valor += tempant111 +'=heap[(int)'+tempant11+'];\n';
                            }
                            else
                            {
                                valor += tempant111 +'=stack[(int)'+tempant11+'];\n';
                            }


                            var temp = Temp.getTemporal();
                            valor += temp +'='+tempant1+'>='+tempant111+';';

                            r[0] = 'BOOLEAN';
                            r[1] = temp;
                            r[2] = '';
                            r[3] = valor;
                            r[4] = '';
                            r[5] = '';
                            r[6] = Number(n.valor)>=Number(n1.valor);
                            this.$ = r;
                        }
                        else
                        {
                            semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no existe la variable: ${$$[$0][4]}`+'\"}');
                            this.$ = ['','','',''];
                        }
                    }
                }
                else
                {
                    semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no existe la variable: ${$$[$0-2][4]}`+'\"}');
                    this.$ = ['','','',''];
                }
            }
        }
        else if($$[$0-2][0] == 'STRING' && $$[$0][0] == '')
        {
            var valor = '';
            var temp = Temp.getTemporal();
            var n = tab.getPositionAmbito($$[$0][4]);
            if(n!=null)
            {
                if(n.tipo.toUpperCase() == 'STRING')
                {
                    if($$[$0-2][5].toString() >= n.valor.toString())
                    {
                        valor += `${temp} = 1;\n`;
                    }
                    else
                    {
                        valor += `${temp} = 0;\n`;
                    }
                    var r = [];
                    r[0] = 'BOOLEAN';
                    r[1] = temp;
                    r[2] = '';
                    r[3] = valor;
                    r[4] = '';
                    r[5] = $$[$0-2][5].toString() >= n.valor.toString();
                    r[6] = $$[$0-2][5].toString() >= n.valor.toString();
                    this.$ = r;
                }
                else
                {
                    semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no se puede ejecutar la operacion.`+'\"}');
                    this.$ = ['','','',''];
                }
            }
            else
            {
                semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no se puede ejecutar la operacion.`+'\"}');
                this.$ = ['','','',''];
            }

        }
        else if( $$[$0-2][0] == '' && $$[$0][0] == 'STRING')
        {
            var valor = '';
            var temp = Temp.getTemporal();
            var n = tab.getPositionAmbito($$[$0-2][4]);
            if(n!=null)
            {
                if(n.tipo.toUpperCase() == 'STRING')
                {
                    if($$[$0][5].toString() >= n.valor.toString())
                    {
                        valor += `${temp} = 1;\n`;
                    }
                    else
                    {
                        valor += `${temp} = 0;\n`;
                    }
                    var r = [];
                    r[0] = 'BOOLEAN';
                    r[1] = temp;
                    r[2] = '';
                    r[3] = valor;
                    r[4] = '';
                    r[5] = $$[$0][5].toString() >= n.valor.toString();
                    r[6] = $$[$0][5].toString() >= n.valor.toString();
                    this.$ = r;
                }
                else
                {
                    semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no se puede ejecutar la operacion.`+'\"}');
                    this.$ = ['','','',''];
                }
            }
            else
            {
                semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no se puede ejecutar la operacion.`+'\"}');
                this.$ = ['','','',''];
            }

        }
        else
        {
            semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no se puede ejecutar la operacion.`+'\"}');
            this.$ = ['','','',''];
        }

break;
case 240:

        if($$[$0-2][0] != 'STRING' && $$[$0][0] != 'STRING')
        {
            if($$[$0-2][0]!= '')
            {
                if($$[$0][0] != '')
                {
                        var valor = '';
                        var r = [];
                        valor += $$[$0-2][3];
                        valor += '\n';
                        valor += $$[$0][3];
                        valor += '\n';

                        var temp = Temp.getTemporal();
                        valor += temp +'='+$$[$0-2][1]+'<='+$$[$0][1]+';';

                        r[0] = 'BOOLEAN';
                        r[1] = temp;
                        r[2] = '';
                        r[3] = valor;
                        r[4] = '';
                        r[5] = '';
                        r[6] = Number($$[$0-2][6])<=Number($$[$0][6]);
                        this.$ = r;
                }
                else
                {
                    var n = tab.getPositionAmbito($$[$0][4]);
                    if(n!=null)
                    {
                        var valor = '';
                        var r = [];
                        valor += $$[$0-2][3];
                        valor += '\n';

                        var tempant = Temp.getTemporal();
                        var tempant1 = Temp.getTemporal();

                        valor += tempant +'='+n.position+';\n';
                        if(n.entorno == 'global')
                        {
                            valor += tempant1 +'=heap[(int)'+tempant+'];\n';
                        }
                        else
                        {
                            valor += tempant1 +'=stack[(int)'+tempant+'];\n';
                        }


                        var temp = Temp.getTemporal();
                        valor += temp +'='+$$[$0-2][1]+'<='+tempant1+';';

                        r[0] = 'BOOLEAN';
                        r[1] = temp;
                        r[2] = '';
                        r[3] = valor;
                        r[4] = '';
                        r[5] = '';
                        r[6] = Number($$[$0-2][6])<=Number(n.valor);
                        this.$ = r;
                    }
                    else
                    {
                        semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no existe la variable: ${$$[$0][4]}`+'\"}');
                        this.$ = ['','','',''];
                    }
                }
            }
            else
            {
                var n = tab.getPositionAmbito($$[$0-2][4]);
                if(n!=null)
                {
                    if($$[$0][0] != '')
                    {
                            var valor = '';
                            var r = [];
                            var tempant = Temp.getTemporal();
                            var tempant1 = Temp.getTemporal();

                            valor += tempant +'='+n.position+';\n';
                            if(n.entorno == 'global')
                            {
                                valor += tempant1 +'=heap[(int)'+tempant+'];\n';
                            }
                            else
                            {
                                valor += tempant1 +'=stack[(int)'+tempant+'];\n';
                            }

                            valor += $$[$0][3];
                            valor += '\n';

                            var temp = Temp.getTemporal();
                            valor += temp+'='+tempant1+'<='+$$[$0][1]+';';

                            r[0] = 'BOOLEAN';
                            r[1] = temp;
                            r[2] = '';
                            r[3] = valor;
                            r[4] = '';
                            r[5] = '';
                            r[6] = Number(n.valor)<=Number($$[$0][6]);
                            this.$ = r;
                    }
                    else
                    {
                        var n1 = tab.getPositionAmbito($$[$0][4]);
                        if(n1!=null)
                        {
                            var valor = '';
                            var r = [];
                            var tempant = Temp.getTemporal();
                            var tempant1 = Temp.getTemporal();

                            valor += tempant +'='+n.position+';\n';
                            if(n.entorno == 'global')
                            {
                                valor += tempant1 +'=heap[(int)'+tempant+'];\n';
                            }
                            else
                            {
                                valor += tempant1 +'=stack[(int)'+tempant+'];\n';
                            }


                            var tempant11 = Temp.getTemporal();
                            var tempant111 = Temp.getTemporal();

                            valor += tempant11 +'='+n1.position+';\n';
                            if(n1.entorno == 'global')
                            {
                                valor += tempant111 +'=heap[(int)'+tempant11+'];\n';
                            }
                            else
                            {
                                valor += tempant111 +'=stack[(int)'+tempant11+'];\n';
                            }


                            var temp = Temp.getTemporal();
                            valor += temp +'='+tempant1+'<='+tempant111+';';

                            r[0] = 'BOOLEAN';
                            r[1] = temp;
                            r[2] = '';
                            r[3] = valor;
                            r[4] = '';
                            r[5] = '';
                            r[6] = Number(n.valor)<=Number(n1.valor);
                            this.$ = r;
                        }
                        else
                        {
                            semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no existe la variable: ${$$[$0][4]}`+'\"}');
                            this.$ = ['','','',''];
                        }
                    }
                }
                else
                {
                    semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no existe la variable: ${$$[$0-2][4]}`+'\"}');
                    this.$ = ['','','',''];
                }
            }
        }
        else if($$[$0-2][0] == 'STRING' && $$[$0][0] == '')
        {
            var valor = '';
            var temp = Temp.getTemporal();
            var n = tab.getPositionAmbito($$[$0][4]);
            if(n!=null)
            {
                if(n.tipo.toUpperCase() == 'STRING')
                {
                    if($$[$0-2][5].toString() <= n.valor.toString())
                    {
                        valor += `${temp} = 1;\n`;
                    }
                    else
                    {
                        valor += `${temp} = 0;\n`;
                    }
                    var r = [];
                    r[0] = 'BOOLEAN';
                    r[1] = temp;
                    r[2] = '';
                    r[3] = valor;
                    r[4] = '';
                    r[5] = $$[$0-2][5].toString() <= n.valor.toString();
                    r[6] = $$[$0-2][5].toString() <= n.valor.toString();
                    this.$ = r;
                }
                else
                {
                    semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no se puede ejecutar la operacion.`+'\"}');
                    this.$ = ['','','',''];
                }
            }
            else
            {
                semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no se puede ejecutar la operacion.`+'\"}');
                this.$ = ['','','',''];
            }

        }
        else if( $$[$0-2][0] == '' && $$[$0][0] == 'STRING')
        {
            var valor = '';
            var temp = Temp.getTemporal();
            var n = tab.getPositionAmbito($$[$0-2][4]);
            if(n!=null)
            {
                if(n.tipo.toUpperCase() == 'STRING')
                {
                    if($$[$0][5].toString() <= n.valor.toString())
                    {
                        valor += `${temp} = 1;\n`;
                    }
                    else
                    {
                        valor += `${temp} = 0;\n`;
                    }
                    var r = [];
                    r[0] = 'BOOLEAN';
                    r[1] = temp;
                    r[2] = '';
                    r[3] = valor;
                    r[4] = '';
                    r[5] = $$[$0][5].toString() <= n.valor.toString();
                    r[6] = $$[$0][5].toString() <= n.valor.toString();
                    this.$ = r;
                }
                else
                {
                    semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no se puede ejecutar la operacion.`+'\"}');
                    this.$ = ['','','',''];
                }
            }
            else
            {
                semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no se puede ejecutar la operacion.`+'\"}');
                this.$ = ['','','',''];
            }

        }
        else
        {
            semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no se puede ejecutar la operacion.`+'\"}');
            this.$ = ['','','',''];
        }

break;
case 242:

        if($$[$0-2][0] != 'STRING' && $$[$0][0] != 'STRING')
        {
            if($$[$0-2][0]!= '')
            {
                if($$[$0][0] != '')
                {
                        var valor = '';
                        var r = [];
                        valor += $$[$0-2][3];
                        valor += '\n';
                        valor += $$[$0][3];
                        valor += '\n';

                        var temp = Temp.getTemporal();
                        valor += temp +'='+$$[$0-2][1]+'=='+$$[$0][1]+';';

                        r[0] = 'BOOLEAN';
                        r[1] = temp;
                        r[2] = '';
                        r[3] = valor;
                        r[4] = '';
                        r[5] = '';
                        r[6] = Number($$[$0-2][6])==Number($$[$0][6]);
                        this.$ = r;
                }
                else
                {
                    var n = tab.getPositionAmbito($$[$0][4]);
                    if(n!=null)
                    {
                        var valor = '';
                        var r = [];
                        valor += $$[$0-2][3];
                        valor += '\n';

                        var tempant = Temp.getTemporal();
                        var tempant1 = Temp.getTemporal();

                        valor += tempant +'='+n.position+';\n';
                        if(n.entorno == 'global')
                        {
                            valor += tempant1 +'=heap[(int)'+tempant+'];\n';
                        }
                        else
                        {
                            valor += tempant1 +'=stack[(int)'+tempant+'];\n';
                        }


                        var temp = Temp.getTemporal();
                        valor += temp +'='+$$[$0-2][1]+'=='+tempant1+';';

                        r[0] = 'BOOLEAN';
                        r[1] = temp;
                        r[2] = '';
                        r[3] = valor;
                        r[4] = '';
                        r[5] = '';
                        r[6] = Number($$[$0-2][6])==Number(n.valor);
                        this.$ = r;
                    }
                    else
                    {
                        semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no existe la variable: ${$$[$0][4]}`+'\"}');
                        this.$ = ['','','',''];
                    }
                }
            }
            else
            {
                var n = tab.getPositionAmbito($$[$0-2][4]);
                if(n!=null)
                {
                    if($$[$0][0] != '')
                    {
                            var valor = '';
                            var r = [];
                            var tempant = Temp.getTemporal();
                            var tempant1 = Temp.getTemporal();

                            valor += tempant +'='+n.position+';\n';
                            if(n.entorno == 'global')
                            {
                                valor += tempant1 +'=heap[(int)'+tempant+'];\n';
                            }
                            else
                            {
                                valor += tempant1 +'=stack[(int)'+tempant+'];\n';
                            }

                            valor += $$[$0][3];
                            valor += '\n';

                            var temp = Temp.getTemporal();
                            valor += temp+'='+tempant1+'=='+$$[$0][1]+';';

                            r[0] = 'BOOLEAN';
                            r[1] = temp;
                            r[2] = '';
                            r[3] = valor;
                            r[4] = '';
                            r[5] = '';
                            r[6] = Number(n.valor)==Number($$[$0][6]);
                            this.$ = r;
                    }
                    else
                    {
                        var n1 = tab.getPositionAmbito($$[$0][4]);
                        if(n1!=null)
                        {
                            var valor = '';
                            var r = [];
                            var tempant = Temp.getTemporal();
                            var tempant1 = Temp.getTemporal();

                            valor += tempant +'='+n.position+';\n';
                            if(n.entorno == 'global')
                            {
                                valor += tempant1 +'=heap[(int)'+tempant+'];\n';
                            }
                            else
                            {
                                valor += tempant1 +'=stack[(int)'+tempant+'];\n';
                            }

                            var tempant11 = Temp.getTemporal();
                            var tempant111 = Temp.getTemporal();

                            valor += tempant11 +'='+n1.position+';\n';
                            if(n1.entorno == 'global')
                            {
                                valor += tempant111 +'=heap[(int)'+tempant11+'];\n';
                            }
                            else
                            {
                                valor += tempant111 +'=stack[(int)'+tempant11+'];\n';
                            }


                            var temp = Temp.getTemporal();
                            valor += temp +'='+tempant1+'=='+tempant111+';';

                            r[0] = 'BOOLEAN';
                            r[1] = temp;
                            r[2] = '';
                            r[3] = valor;
                            r[4] = '';
                            r[5] = '';
                            r[6] = Number(n.valor)==Number(n1.valor);
                            this.$ = r;
                        }
                        else
                        {
                            semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no existe la variable: ${$$[$0][4]}`+'\"}');
                            this.$ = ['','','',''];
                        }
                    }
                }
                else
                {
                    semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no existe la variable: ${$$[$0-2][4]}`+'\"}');
                    this.$ = ['','','',''];
                }
            }
        }
        else
        {
            semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no se puede ejecutar la operacion, no se puede aplicar  a variables de tipo STRING`+'\"}');
            this.$ = ['','','',''];
        }

break;
case 243:

        if($$[$0-2][0] != 'STRING' && $$[$0][0] != 'STRING')
        {
            if($$[$0-2][0]!= '')
            {
                if($$[$0][0] != '')
                {
                        var valor = '';
                        var r = [];
                        valor += $$[$0-2][3];
                        valor += '\n';
                        valor += $$[$0][3];
                        valor += '\n';

                        var temp = Temp.getTemporal();
                        valor += temp +'='+$$[$0-2][1]+'!='+$$[$0][1]+';';

                        r[0] = 'BOOLEAN';
                        r[1] = temp;
                        r[2] = '';
                        r[3] = valor;
                        r[4] = '';
                        r[5] = '';
                        r[6] = Number($$[$0-2][6])!=Number($$[$0][6]);
                        this.$ = r;
                }
                else
                {
                    var n = tab.getPositionAmbito($$[$0][4]);
                    if(n!=null)
                    {
                        var valor = '';
                        var r = [];
                        valor += $$[$0-2][3];
                        valor += '\n';

                        var tempant = Temp.getTemporal();
                        var tempant1 = Temp.getTemporal();

                        valor += tempant +'='+n.position+';\n';
                        if(n.entorno == 'global')
                        {
                            valor += tempant1 +'=heap[(int)'+tempant+'];\n';
                        }
                        else
                        {
                            valor += tempant1 +'=stack[(int)'+tempant+'];\n';
                        }


                        var temp = Temp.getTemporal();
                        valor += temp +'='+$$[$0-2][1]+'!='+tempant1+';';

                        r[0] = 'BOOLEAN';
                        r[1] = temp;
                        r[2] = '';
                        r[3] = valor;
                        r[4] = '';
                        r[5] = '';
                        r[6] = Number($$[$0-2][6])!=Number(n.valor);
                        this.$ = r;
                    }
                    else
                    {
                        semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no existe la variable: ${$$[$0][4]}`+'\"}');
                        this.$ = ['','','',''];
                    }
                }
            }
            else
            {
                var n = tab.getPositionAmbito($$[$0-2][4]);
                if(n!=null)
                {
                    if($$[$0][0] != '')
                    {
                            var valor = '';
                            var r = [];
                            var tempant = Temp.getTemporal();
                            var tempant1 = Temp.getTemporal();

                            valor += tempant +'='+n.position+';\n';
                            if(n.entorno == 'global')
                            {
                                valor += tempant1 +'=heap[(int)'+tempant+'];\n';
                            }
                            else
                            {
                                valor += tempant1 +'=stack[(int)'+tempant+'];\n';
                            }

                            valor += $$[$0][3];
                            valor += '\n';

                            var temp = Temp.getTemporal();
                            valor += temp+'='+tempant1+'!='+$$[$0][1]+';';

                            r[0] = 'BOOLEAN';
                            r[1] = temp;
                            r[2] = '';
                            r[3] = valor;
                            r[4] = '';
                            r[5] = '';
                            r[6] = Number(n.valor)!=Number($$[$0][6]);
                            this.$ = r;
                    }
                    else
                    {
                        var n1 = tab.getPositionAmbito($$[$0][4]);
                        if(n1!=null)
                        {
                            var valor = '';
                            var r = [];
                            var tempant = Temp.getTemporal();
                            var tempant1 = Temp.getTemporal();

                            valor += tempant +'='+n.position+';\n';
                            if(n.entorno == 'global')
                            {
                                valor += tempant1 +'=heap[(int)'+tempant+'];\n';
                            }
                            else
                            {
                                valor += tempant1 +'=stack[(int)'+tempant+'];\n';
                            }

                            var tempant11 = Temp.getTemporal();
                            var tempant111 = Temp.getTemporal();

                            valor += tempant11 +'='+n1.position+';\n';
                            if(n1.entorno == 'global')
                            {
                                valor += tempant111 +'=heap[(int)'+tempant11+'];\n';
                            }
                            else
                            {
                                valor += tempant111 +'=stack[(int)'+tempant11+'];\n';
                            }


                            var temp = Temp.getTemporal();
                            valor += temp +'='+tempant1+'!='+tempant111+';';

                            r[0] = 'BOOLEAN';
                            r[1] = temp;
                            r[2] = '';
                            r[3] = valor;
                            r[4] = '';
                            r[5] = '';
                            r[6] = Number(n.valor)!=Number(n1.valor);
                            this.$ = r;
                        }
                        else
                        {
                            semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no existe la variable: ${$$[$0][4]}`+'\"}');
                            this.$ = ['','','',''];
                        }
                    }
                }
                else
                {
                    semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no existe la variable: ${$$[$0-2][4]}`+'\"}');
                    this.$ = ['','','',''];
                }
            }
        }
        else
        {
            semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no se puede ejecutar la operacion, no se puede aplicar  a variables de tipo STRING`+'\"}');
            this.$ = ['','','',''];
        }

break;
case 244:

        if($$[$0-2][0] != 'STRING' && $$[$0][0] != 'STRING')
        {
            if($$[$0-2][0]!= '')
            {
                if($$[$0][0] != '')
                {
                        var valor = '';
                        var r = [];
                        valor += $$[$0-2][3];
                        valor += '\n';
                        valor += $$[$0][3];
                        valor += '\n';

                        var temp = Temp.getTemporal();
                        valor += temp +'='+$$[$0-2][1]+'>='+$$[$0][1]+';';

                        r[0] = 'BOOLEAN';
                        r[1] = temp;
                        r[2] = '';
                        r[3] = valor;
                        r[4] = '';
                        r[5] = '';
                        r[6] = Number($$[$0-2][6])>=Number($$[$0][6]);
                        this.$ = r;
                }
                else
                {
                    var n = tab.getPositionAmbito($$[$0][4]);
                    if(n!=null)
                    {
                        var valor = '';
                        var r = [];
                        valor += $$[$0-2][3];
                        valor += '\n';

                        var tempant = Temp.getTemporal();
                        var tempant1 = Temp.getTemporal();

                        valor += tempant +'='+n.position+';\n';
                        if(n.entorno == 'global')
                        {
                            valor += tempant1 +'=heap[(int)'+tempant+'];\n';
                        }
                        else
                        {
                            valor += tempant1 +'=stack[(int)'+tempant+'];\n';
                        }


                        var temp = Temp.getTemporal();
                        valor += temp +'='+$$[$0-2][1]+'>='+tempant1+';';

                        r[0] = 'BOOLEAN';
                        r[1] = temp;
                        r[2] = '';
                        r[3] = valor;
                        r[4] = '';
                        r[5] = '';
                        r[6] = Number($$[$0-2][6])>=Number(n.valor);
                        this.$ = r;
                    }
                    else
                    {
                        semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no existe la variable: ${$$[$0][4]}`+'\"}');
                        this.$ = ['','','',''];
                    }
                }
            }
            else
            {
                var n = tab.getPositionAmbito($$[$0-2][4]);
                if(n!=null)
                {
                    if($$[$0][0] != '')
                    {
                            var valor = '';
                            var r = [];
                            var tempant = Temp.getTemporal();
                            var tempant1 = Temp.getTemporal();

                            valor += tempant +'='+n.position+';\n';
                            if(n.entorno == 'global')
                            {
                                valor += tempant1 +'=heap[(int)'+tempant+'];\n';
                            }
                            else
                            {
                                valor += tempant1 +'=stack[(int)'+tempant+'];\n';
                            }

                            valor += $$[$0][3];
                            valor += '\n';

                            var temp = Temp.getTemporal();
                            valor += temp+'='+tempant1+'>='+$$[$0][1]+';';

                            r[0] = 'BOOLEAN';
                            r[1] = temp;
                            r[2] = '';
                            r[3] = valor;
                            r[4] = '';
                            r[5] = '';
                            r[6] = Number(n.valor)>=Number($$[$0][6]);
                            this.$ = r;
                    }
                    else
                    {
                        var n1 = tab.getPositionAmbito($$[$0][4]);
                        if(n1!=null)
                        {
                            var valor = '';
                            var r = [];
                            var tempant = Temp.getTemporal();
                            var tempant1 = Temp.getTemporal();

                            valor += tempant +'='+n.position+';\n';
                            if(n.entorno == 'global')
                            {
                                valor += tempant1 +'=heap[(int)'+tempant+'];\n';
                            }
                            else
                            {
                                valor += tempant1 +'=stack[(int)'+tempant+'];\n';
                            }

                            var tempant11 = Temp.getTemporal();
                            var tempant111 = Temp.getTemporal();

                            valor += tempant11 +'='+n1.position+';\n';
                            if(n1.entorno == 'global')
                            {
                                valor += tempant111 +'=heap[(int)'+tempant11+'];\n';
                            }
                            else
                            {
                                valor += tempant111 +'=stack[(int)'+tempant11+'];\n';
                            }


                            var temp = Temp.getTemporal();
                            valor += temp +'='+tempant1+'>='+tempant111+';';

                            r[0] = 'BOOLEAN';
                            r[1] = temp;
                            r[2] = '';
                            r[3] = valor;
                            r[4] = '';
                            r[5] = '';
                            r[6] = Number(n.valor)>=Number(n1.valor);
                            this.$ = r;
                        }
                        else
                        {
                            semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no existe la variable: ${$$[$0][4]}`+'\"}');
                            this.$ = ['','','',''];
                        }
                    }
                }
                else
                {
                    semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no existe la variable: ${$$[$0-2][4]}`+'\"}');
                    this.$ = ['','','',''];
                }
            }
        }
        else
        {
            semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no se puede ejecutar la operacion, no se puede aplicar  a variables de tipo STRING`+'\"}');
            this.$ = ['','','',''];
        }

break;
case 245:

        if($$[$0-2][0] != 'STRING' && $$[$0][0] != 'STRING')
        {
            if($$[$0-2][0]!= '')
            {
                if($$[$0][0] != '')
                {
                        var valor = '';
                        var r = [];
                        valor += $$[$0-2][3];
                        valor += '\n';
                        valor += $$[$0][3];
                        valor += '\n';

                        var temp = Temp.getTemporal();
                        valor += temp +'='+$$[$0-2][1]+'<='+$$[$0][1]+';';

                        r[0] = 'BOOLEAN';
                        r[1] = temp;
                        r[2] = '';
                        r[3] = valor;
                        r[4] = '';
                        r[5] = '';
                        r[6] = Number($$[$0-2][6])<=Number($$[$0][6]);
                        this.$ = r;
                }
                else
                {
                    var n = tab.getPositionAmbito($$[$0][4]);
                    if(n!=null)
                    {
                        var valor = '';
                        var r = [];
                        valor += $$[$0-2][3];
                        valor += '\n';

                        var tempant = Temp.getTemporal();
                        var tempant1 = Temp.getTemporal();

                        valor += tempant +'='+n.position+';\n';
                        if(n.entorno == 'global')
                        {
                            valor += tempant1 +'=heap[(int)'+tempant+'];\n';
                        }
                        else
                        {
                            valor += tempant1 +'=stack[(int)'+tempant+'];\n';
                        }


                        var temp = Temp.getTemporal();
                        valor += temp +'='+$$[$0-2][1]+'<='+tempant1+';';

                        r[0] = 'BOOLEAN';
                        r[1] = temp;
                        r[2] = '';
                        r[3] = valor;
                        r[4] = '';
                        r[5] = '';
                        r[6] = Number($$[$0-2][6])<=Number(n.valor);
                        this.$ = r;
                    }
                    else
                    {
                        semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no existe la variable: ${$$[$0][4]}`+'\"}');
                        this.$ = ['','','',''];
                    }
                }
            }
            else
            {
                var n = tab.getPositionAmbito($$[$0-2][4]);
                if(n!=null)
                {
                    if($$[$0][0] != '')
                    {
                            var valor = '';
                            var r = [];
                            var tempant = Temp.getTemporal();
                            var tempant1 = Temp.getTemporal();

                            valor += tempant +'='+n.position+';\n';
                            if(n.entorno == 'global')
                            {
                                valor += tempant1 +'=heap[(int)'+tempant+'];\n';
                            }
                            else
                            {
                                valor += tempant1 +'=stack[(int)'+tempant+'];\n';
                            }

                            valor += $$[$0][3];
                            valor += '\n';

                            var temp = Temp.getTemporal();
                            valor += temp+'='+tempant1+'<='+$$[$0][1]+';';

                            r[0] = 'BOOLEAN';
                            r[1] = temp;
                            r[2] = '';
                            r[3] = valor;
                            r[4] = '';
                            r[5] = '';
                            r[6] = Number(n.valor)<=Number($$[$0][6]);
                            this.$ = r;
                    }
                    else
                    {
                        var n1 = tab.getPositionAmbito($$[$0][4]);
                        if(n1!=null)
                        {
                            var valor = '';
                            var r = [];
                            var tempant = Temp.getTemporal();
                            var tempant1 = Temp.getTemporal();

                            valor += tempant +'='+n.position+';\n';
                            if(n.entorno == 'global')
                            {
                                valor += tempant1 +'=heap[(int)'+tempant+'];\n';
                            }
                            else
                            {
                                valor += tempant1 +'=stack[(int)'+tempant+'];\n';
                            }

                            var tempant11 = Temp.getTemporal();
                            var tempant111 = Temp.getTemporal();

                            valor += tempant11 +'='+n1.position+';\n';
                            if(n1.entorno == 'global')
                            {
                                valor += tempant111 +'=heap[(int)'+tempant11+'];\n';
                            }
                            else
                            {
                                valor += tempant111 +'=stack[(int)'+tempant11+'];\n';
                            }


                            var temp = Temp.getTemporal();
                            valor += temp +'='+tempant1+'<='+tempant111+';';

                            r[0] = 'BOOLEAN';
                            r[1] = temp;
                            r[2] = '';
                            r[3] = valor;
                            r[4] = '';
                            r[5] = '';
                            r[6] = Number(n.valor)<=Number(n1.valor);
                            this.$ = r;
                        }
                        else
                        {
                            semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no existe la variable: ${$$[$0][4]}`+'\"}');
                            this.$ = ['','','',''];
                        }
                    }
                }
                else
                {
                    semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no existe la variable: ${$$[$0-2][4]}`+'\"}');
                    this.$ = ['','','',''];
                }
            }
        }
        else
        {
            semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no se puede ejecutar la operacion, no se puede aplicar  a variables de tipo STRING`+'\"}');
            this.$ = ['','','',''];
        }

break;
case 247:

        if($$[$0-2][0] != 'STRING' && $$[$0][0] != 'STRING')
        {
            if($$[$0-2][0]!= '')
            {
                if($$[$0][0] != '')
                {
                        var valor = '';
                        var r = [];
                        valor += $$[$0-2][3];
                        valor += '\n';
                        valor += $$[$0][3];
                        valor += '\n';

                        var temp = Temp.getTemporal();
                        valor += temp +'='+$$[$0-2][1]+'=='+$$[$0][1]+';';

                        r[0] = 'BOOLEAN';
                        r[1] = temp;
                        r[2] = '';
                        r[3] = valor;
                        r[4] = '';
                        r[5] = '';
                        r[6] = Number($$[$0-2][6])==Number($$[$0][6]);
                        this.$ = r;
                }
                else
                {
                    var n = tab.getPositionAmbito($$[$0][4]);
                    if(n!=null)
                    {
                        var valor = '';
                        var r = [];
                        valor += $$[$0-2][3];
                        valor += '\n';

                        var tempant = Temp.getTemporal();
                        var tempant1 = Temp.getTemporal();

                        valor += tempant +'='+n.position+';\n';
                        if(n.entorno == 'global')
                        {
                            valor += tempant1 +'=heap[(int)'+tempant+'];\n';
                        }
                        else
                        {
                            valor += tempant1 +'=stack[(int)'+tempant+'];\n';
                        }


                        var temp = Temp.getTemporal();
                        valor += temp +'='+$$[$0-2][1]+'=='+tempant1+';';

                        r[0] = 'BOOLEAN';
                        r[1] = temp;
                        r[2] = '';
                        r[3] = valor;
                        r[4] = '';
                        r[5] = '';
                        r[6] = Number($$[$0-2][6])==Number(n.valor);
                        this.$ = r;
                    }
                    else
                    {
                        semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no existe la variable: ${$$[$0][4]}`+'\"}');
                        this.$ = ['','','',''];
                    }
                }
            }
            else
            {
                var n = tab.getPositionAmbito($$[$0-2][4]);
                if(n!=null)
                {
                    if($$[$0][0] != '')
                    {
                            var valor = '';
                            var r = [];
                            var tempant = Temp.getTemporal();
                            var tempant1 = Temp.getTemporal();

                            valor += tempant +'='+n.position+';\n';
                            if(n.entorno == 'global')
                            {
                                valor += tempant1 +'=heap[(int)'+tempant+'];\n';
                            }
                            else
                            {
                                valor += tempant1 +'=stack[(int)'+tempant+'];\n';
                            }

                            valor += $$[$0][3];
                            valor += '\n';

                            var temp = Temp.getTemporal();
                            valor += temp+'='+tempant1+'=='+$$[$0][1]+';';

                            r[0] = 'BOOLEAN';
                            r[1] = temp;
                            r[2] = '';
                            r[3] = valor;
                            r[4] = '';
                            r[5] = '';
                            r[6] = Number(n.valor)==Number($$[$0][6]);
                            this.$ = r;
                    }
                    else
                    {
                        var n1 = tab.getPositionAmbito($$[$0][4]);
                        if(n1!=null)
                        {
                            var valor = '';
                            var r = [];
                            var tempant = Temp.getTemporal();
                            var tempant1 = Temp.getTemporal();

                            valor += tempant +'='+n.position+';\n';
                            if(n.entorno == 'global')
                            {
                                valor += tempant1 +'=heap[(int)'+tempant+'];\n';
                            }
                            else
                            {
                                valor += tempant1 +'=stack[(int)'+tempant+'];\n';
                            }


                            var tempant11 = Temp.getTemporal();
                            var tempant111 = Temp.getTemporal();

                            valor += tempant11 +'='+n1.position+';\n';
                            if(n1.entorno == 'global')
                            {
                                valor += tempant111 +'=heap[(int)'+tempant11+'];\n';
                            }
                            else
                            {
                                valor += tempant111 +'=stack[(int)'+tempant11+'];\n';
                            }


                            var temp = Temp.getTemporal();
                            valor += temp +'='+tempant1+'=='+tempant111+';';

                            r[0] = 'BOOLEAN';
                            r[1] = temp;
                            r[2] = '';
                            r[3] = valor;
                            r[4] = '';
                            r[5] = '';
                            r[6] = Number(n.valor)==Number(n1.valor);
                            this.$ = r;
                        }
                        else
                        {
                            semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no existe la variable: ${$$[$0][4]}`+'\"}');
                            this.$ = ['','','',''];
                        }
                    }
                }
                else
                {
                    semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no existe la variable: ${$$[$0-2][4]}`+'\"}');
                    this.$ = ['','','',''];
                }
            }
        }
        else
        {
            semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no se puede ejecutar la operacion, no se puede aplicar  a variables de tipo STRING`+'\"}');
            this.$ = ['','','',''];
        }

break;
case 248:

        if($$[$0-2][0] != 'STRING' && $$[$0][0] != 'STRING')
        {
            if($$[$0-2][0]!= '')
            {
                if($$[$0][0] != '')
                {
                        var valor = '';
                        var r = [];
                        valor += $$[$0-2][3];
                        valor += '\n';
                        valor += $$[$0][3];
                        valor += '\n';

                        var temp = Temp.getTemporal();
                        valor += temp +'='+$$[$0-2][1]+'!='+$$[$0][1]+';';

                        r[0] = 'BOOLEAN';
                        r[1] = temp;
                        r[2] = '';
                        r[3] = valor;
                        r[4] = '';
                        r[5] = '';
                        r[6] = Number($$[$0-2][6])!=Number($$[$0][6]);
                        this.$ = r;
                }
                else
                {
                    var n = tab.getPositionAmbito($$[$0][4]);
                    if(n!=null)
                    {
                        var valor = '';
                        var r = [];
                        valor += $$[$0-2][3];
                        valor += '\n';

                        var tempant = Temp.getTemporal();
                        var tempant1 = Temp.getTemporal();

                        valor += tempant +'='+n.position+';\n';
                        if(n.entorno == 'global')
                        {
                            valor += tempant1 +'=heap[(int)'+tempant+'];\n';
                        }
                        else
                        {
                            valor += tempant1 +'=stack[(int)'+tempant+'];\n';
                        }


                        var temp = Temp.getTemporal();
                        valor += temp +'='+$$[$0-2][1]+'!='+tempant1+';';

                        r[0] = 'BOOLEAN';
                        r[1] = temp;
                        r[2] = '';
                        r[3] = valor;
                        r[4] = '';
                        r[5] = '';
                        r[6] = Number($$[$0-2][6])!=Number(n.valor);
                        this.$ = r;
                    }
                    else
                    {
                        semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no existe la variable: ${$$[$0][4]}`+'\"}');
                        this.$ = ['','','',''];
                    }
                }
            }
            else
            {
                var n = tab.getPositionAmbito($$[$0-2][4]);
                if(n!=null)
                {
                    if($$[$0][0] != '')
                    {
                            var valor = '';
                            var r = [];
                            var tempant = Temp.getTemporal();
                            var tempant1 = Temp.getTemporal();

                            valor += tempant +'='+n.position+';\n';
                            if(n.entorno == 'global')
                            {
                                valor += tempant1 +'=heap[(int)'+tempant+'];\n';
                            }
                            else
                            {
                                valor += tempant1 +'=stack[(int)'+tempant+'];\n';
                            }

                            valor += $$[$0][3];
                            valor += '\n';

                            var temp = Temp.getTemporal();
                            valor += temp+'='+tempant1+'!='+$$[$0][1]+';';

                            r[0] = 'BOOLEAN';
                            r[1] = temp;
                            r[2] = '';
                            r[3] = valor;
                            r[4] = '';
                            r[5] = '';
                            r[6] = Number(n.valor)!=Number($$[$0][6]);
                            this.$ = r;
                    }
                    else
                    {
                        var n1 = tab.getPositionAmbito($$[$0][4]);
                        if(n1!=null)
                        {
                            var valor = '';
                            var r = [];
                            var tempant = Temp.getTemporal();
                            var tempant1 = Temp.getTemporal();

                            valor += tempant +'='+n.position+';\n';
                            if(n.entorno == 'global')
                            {
                                 valor += tempant1 +'=heap[(int)'+tempant+'];\n';
                            }
                            else
                            {
                                 valor += tempant1 +'=stack[(int)'+tempant+'];\n';
                            }


                            var tempant11 = Temp.getTemporal();
                            var tempant111 = Temp.getTemporal();

                            valor += tempant11 +'='+n1.position+';\n';
                            if(n1.entorno == 'global')
                            {
                                valor += tempant111 +'=heap[(int)'+tempant11+'];\n';
                            }
                            else
                            {
                                valor += tempant111 +'=stack[(int)'+tempant11+'];\n';
                            }


                            var temp = Temp.getTemporal();
                            valor += temp +'='+tempant1+'!='+tempant111+';';

                            r[0] = 'BOOLEAN';
                            r[1] = temp;
                            r[2] = '';
                            r[3] = valor;
                            r[4] = '';
                            r[5] = '';
                            r[6] = Number(n.valor)!=Number(n1.valor);
                            this.$ = r;
                        }
                        else
                        {
                            semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no existe la variable: ${$$[$0][4]}`+'\"}');
                            this.$ = ['','','',''];
                        }
                    }
                }
                else
                {
                    semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no existe la variable: ${$$[$0-2][4]}`+'\"}');
                    this.$ = ['','','',''];
                }
            }
        }
        else
        {
            semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no se puede ejecutar la operacion, no se puede aplicar  a variables de tipo STRING`+'\"}');
            this.$ = ['','','',''];
        }

break;
case 249:

        if($$[$0-2][0] != 'STRING' && $$[$0][0] != 'STRING')
        {
            if($$[$0-2][0]!= '')
            {
                if($$[$0][0] != '')
                {
                        var valor = '';
                        var r = [];
                        valor += $$[$0-2][3];
                        valor += '\n';
                        valor += $$[$0][3];
                        valor += '\n';

                        var temp = Temp.getTemporal();
                        valor += temp +'='+$$[$0-2][1]+'>='+$$[$0][1]+';';

                        r[0] = 'BOOLEAN';
                        r[1] = temp;
                        r[2] = '';
                        r[3] = valor;
                        r[4] = '';
                        r[5] = '';
                        r[6] = Number($$[$0-2][6])>=Number($$[$0][6]);
                        this.$ = r;
                }
                else
                {
                    var n = tab.getPositionAmbito($$[$0][4]);
                    if(n!=null)
                    {
                        var valor = '';
                        var r = [];
                        valor += $$[$0-2][3];
                        valor += '\n';

                        var tempant = Temp.getTemporal();
                        var tempant1 = Temp.getTemporal();

                        valor += tempant +'='+n.position+';\n';
                        if(n.entorno == 'global')
                        {
                            valor += tempant1 +'=heap[(int)'+tempant+'];\n';
                        }
                        else
                        {
                            valor += tempant1 +'=stack[(int)'+tempant+'];\n';
                        }


                        var temp = Temp.getTemporal();
                        valor += temp +'='+$$[$0-2][1]+'>='+tempant1+';';

                        r[0] = 'BOOLEAN';
                        r[1] = temp;
                        r[2] = '';
                        r[3] = valor;
                        r[4] = '';
                        r[5] = '';
                        r[6] = Number($$[$0-2][6])>=Number(n.valor);
                        this.$ = r;
                    }
                    else
                    {
                        semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no existe la variable: ${$$[$0][4]}`+'\"}');
                        this.$ = ['','','',''];
                    }
                }
            }
            else
            {
                var n = tab.getPositionAmbito($$[$0-2][4]);
                if(n!=null)
                {
                    if($$[$0][0] != '')
                    {
                            var valor = '';
                            var r = [];
                            var tempant = Temp.getTemporal();
                            var tempant1 = Temp.getTemporal();

                            valor += tempant +'='+n.position+';\n';
                            if(n.entorno == 'global')
                            {
                                valor += tempant1 +'=heap[(int)'+tempant+'];\n';
                            }
                            else
                            {
                                valor += tempant1 +'=stack[(int)'+tempant+'];\n';
                            }

                            valor += $$[$0][3];
                            valor += '\n';

                            var temp = Temp.getTemporal();
                            valor += temp+'='+tempant1+'>='+$$[$0][1]+';';

                            r[0] = 'BOOLEAN';
                            r[1] = temp;
                            r[2] = '';
                            r[3] = valor;
                            r[4] = '';
                            r[5] = '';
                            r[6] = Number(n.valor)>=Number($$[$0][6]);
                            this.$ = r;
                    }
                    else
                    {
                        var n1 = tab.getPositionAmbito($$[$0][4]);
                        if(n1!=null)
                        {
                            var valor = '';
                            var r = [];
                            var tempant = Temp.getTemporal();
                            var tempant1 = Temp.getTemporal();

                            valor += tempant +'='+n.position+';\n';
                            if(n.entorno == 'global')
                            {
                                valor += tempant1 +'=heap[(int)'+tempant+'];\n';
                            }
                            else
                            {
                                valor += tempant1 +'=stack[(int)'+tempant+'];\n';
                            }


                            var tempant11 = Temp.getTemporal();
                            var tempant111 = Temp.getTemporal();

                            valor += tempant11 +'='+n1.position+';\n';
                            if(n1.entorno == 'global')
                            {
                                valor += tempant111 +'=heap[(int)'+tempant11+'];\n';
                            }
                            else
                            {
                                valor += tempant111 +'=stack[(int)'+tempant11+'];\n';
                            }


                            var temp = Temp.getTemporal();
                            valor += temp +'='+tempant1+'>='+tempant111+';';

                            r[0] = 'BOOLEAN';
                            r[1] = temp;
                            r[2] = '';
                            r[3] = valor;
                            r[4] = '';
                            r[5] = '';
                            r[6] = Number(n.valor)>=Number(n1.valor);
                            this.$ = r;
                        }
                        else
                        {
                            semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no existe la variable: ${$$[$0][4]}`+'\"}');
                            this.$ = ['','','',''];
                        }
                    }
                }
                else
                {
                    semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no existe la variable: ${$$[$0-2][4]}`+'\"}');
                    this.$ = ['','','',''];
                }
            }
        }
        else
        {
            semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no se puede ejecutar la operacion, no se puede aplicar  a variables de tipo STRING`+'\"}');
            this.$ = ['','','',''];
        }

break;
case 250:

        if($$[$0-2][0] != 'STRING' && $$[$0][0] != 'STRING')
        {
            if($$[$0-2][0]!= '')
            {
                if($$[$0][0] != '')
                {
                        var valor = '';
                        var r = [];
                        valor += $$[$0-2][3];
                        valor += '\n';
                        valor += $$[$0][3];
                        valor += '\n';

                        var temp = Temp.getTemporal();
                        valor += temp +'='+$$[$0-2][1]+'<='+$$[$0][1]+';';

                        r[0] = 'BOOLEAN';
                        r[1] = temp;
                        r[2] = '';
                        r[3] = valor;
                        r[4] = '';
                        r[5] = '';
                        r[6] = Number($$[$0-2][6])<=Number($$[$0][6]);
                        this.$ = r;
                }
                else
                {
                    var n = tab.getPositionAmbito($$[$0][4]);
                    if(n!=null)
                    {
                        var valor = '';
                        var r = [];
                        valor += $$[$0-2][3];
                        valor += '\n';

                        var tempant = Temp.getTemporal();
                        var tempant1 = Temp.getTemporal();

                        valor += tempant +'='+n.position+';\n';
                        if(n.entorno == 'global')
                        {
                            valor += tempant1 +'=heap[(int)'+tempant+'];\n';
                        }
                        else
                        {
                            valor += tempant1 +'=stack[(int)'+tempant+'];\n';
                        }


                        var temp = Temp.getTemporal();
                        valor += temp +'='+$$[$0-2][1]+'<='+tempant1+';';

                        r[0] = 'BOOLEAN';
                        r[1] = temp;
                        r[2] = '';
                        r[3] = valor;
                        r[4] = '';
                        r[5] = '';
                        r[6] = Number($$[$0-2][6])<=Number(n.valor);
                        this.$ = r;
                    }
                    else
                    {
                        semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no existe la variable: ${$$[$0][4]}`+'\"}');
                        this.$ = ['','','',''];
                    }
                }
            }
            else
            {
                var n = tab.getPositionAmbito($$[$0-2][4]);
                if(n!=null)
                {
                    if($$[$0][0] != '')
                    {
                            var valor = '';
                            var r = [];
                            var tempant = Temp.getTemporal();
                            var tempant1 = Temp.getTemporal();

                            valor += tempant +'='+n.position+';\n';
                            if(n.entorno == 'global')
                            {
                                valor += tempant1 +'=heap[(int)'+tempant+'];\n';
                            }
                            else
                            {
                                valor += tempant1 +'=stack[(int)'+tempant+'];\n';
                            }

                            valor += $$[$0][3];
                            valor += '\n';

                            var temp = Temp.getTemporal();
                            valor += temp+'='+tempant1+'<='+$$[$0][1]+';';

                            r[0] = 'BOOLEAN';
                            r[1] = temp;
                            r[2] = '';
                            r[3] = valor;
                            r[4] = '';
                            r[5] = '';
                            r[6] = Number(n.valor)<=Number($$[$0][6]);
                            this.$ = r;
                    }
                    else
                    {
                        var n1 = tab.getPositionAmbito($$[$0][4]);
                        if(n1!=null)
                        {
                            var valor = '';
                            var r = [];
                            var tempant = Temp.getTemporal();
                            var tempant1 = Temp.getTemporal();

                            valor += tempant +'='+n.position+';\n';
                            if(n.entorno == 'global')
                            {
                                valor += tempant1 +'=heap[(int)'+tempant+'];\n';
                            }
                            else
                            {
                                valor += tempant1 +'=stack[(int)'+tempant+'];\n';
                            }


                            var tempant11 = Temp.getTemporal();
                            var tempant111 = Temp.getTemporal();

                            valor += tempant11 +'='+n1.position+';\n';
                            if(n1.entorno == 'global')
                            {
                                valor += tempant111 +'=heap[(int)'+tempant11+'];\n';
                            }
                            else
                            {
                                valor += tempant111 +'=stack[(int)'+tempant11+'];\n';
                            }


                            var temp = Temp.getTemporal();
                            valor += temp +'='+tempant1+'<='+tempant111+';';

                            r[0] = 'BOOLEAN';
                            r[1] = temp;
                            r[2] = '';
                            r[3] = valor;
                            r[4] = '';
                            r[5] = '';
                            r[6] = Number(n.valor)<=Number(n1.valor);
                            this.$ = r;
                        }
                        else
                        {
                            semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no existe la variable: ${$$[$0][4]}`+'\"}');
                            this.$ = ['','','',''];
                        }
                    }
                }
                else
                {
                    semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no existe la variable: ${$$[$0-2][4]}`+'\"}');
                    this.$ = ['','','',''];
                }
            }
        }
        else
        {
            semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no se puede ejecutar la operacion, no se puede aplicar  a variables de tipo STRING`+'\"}');
            this.$ = ['','','',''];
        }

break;
case 252:

        if($$[$0-2][0] != 'STRING' && $$[$0][0] != 'STRING')
        {
            if($$[$0-2][0]!= '')
            {
                if($$[$0][0] != '')
                {
                        var valor = '';
                        var r = [];
                        valor += $$[$0-2][3];
                        valor += '\n';
                        valor += $$[$0][3];
                        valor += '\n';

                        var temp = Temp.getTemporal();
                        var label0 = Label.getBandera();
                        var label1 = Label.getBandera();
                        var label2 = Label.getBandera();
                        var label3 = Label.getBandera();
                        var label4 = Label.getBandera();

                        valor += label0 + ':\n';
                        valor += '\t if('+$$[$0-2][1]+'==1) goto '+label1+';\n';
                        valor += '\t goto '+label3+';\n';
                        valor += label1 + ':\n';
                        valor += '\t if('+$$[$0][1]+'==1) goto '+label2+';\n';
                        valor += '\t goto '+label3+';\n';
                        valor += label2 + ':\n';
                        valor += '\t' + temp + '=1;\n';
                        valor += '\t goto '+label4+';\n';
                        valor += label3 + ':\n';
                        valor += '\t' + temp + '=0;\n';
                        valor += '\t goto '+label4+';\n';
                        valor += label4 + ':\n';


                        r[0] = 'BOOLEAN';
                        r[1] = temp;
                        r[2] = label4;
                        r[3] = valor;
                        r[4] = '';
                        r[5] = '';
                        r[6] = Boolean($$[$0-2][6]) && Boolean($$[$0][6]);
                        this.$ = r;
                }
                else
                {
                    var n = tab.getPositionAmbito($$[$0][4]);
                    if(n!=null && n.tipo.toUpperCase() == 'BOOLEAN')
                    {
                        var valor = '';
                        var r = [];
                        valor += $$[$0-2][3];
                        valor += '\n';

                        var tempant = Temp.getTemporal();
                        var tempant1 = Temp.getTemporal();

                        valor += tempant +'='+n.position+';\n';
                        if(n.entorno == 'global')
                        {
                            valor += tempant1 +'=heap[(int)'+tempant+'];\n';
                        }
                        else
                        {
                            valor += tempant1 +'=stack[(int)'+tempant+'];\n';
                        }


                        var temp = Temp.getTemporal();
                        var label0 = Label.getBandera();
                        var label1 = Label.getBandera();
                        var label2 = Label.getBandera();
                        var label3 = Label.getBandera();
                        var label4 = Label.getBandera();

                        valor += label0 + ':\n';
                        valor += '\t if('+$$[$0-2][1]+'==1) goto '+label1+';\n';
                        valor += '\t goto '+label3+';\n';
                        valor += label1 + ':\n';
                        valor += '\t if('+tempant1+'==1) goto '+label2+';\n';
                        valor += '\t goto '+label3+';\n';
                        valor += label2 + ':\n';
                        valor += '\t' + temp + '=1;\n';
                        valor += '\t goto '+label4+';\n';
                        valor += label3 + ':\n';
                        valor += '\t' + temp + '=0;\n';
                        valor += '\t goto '+label4+';\n';
                        valor += label4 + ':\n';


                        r[0] = 'BOOLEAN';
                        r[1] = temp;
                        r[2] = label4;
                        r[3] = valor;
                        r[4] = '';
                        r[5] = '';
                        r[6] = Boolean($$[$0-2][6]) && Boolean(n.valor);
                        this.$ = r;
                    }
                    else
                    {
                        console.log('ERror', $$[$0-2], $$[$0]);
                        semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no existe la variable: ${$$[$0][4]}..., de tipo booleano`+'\"}');
                        this.$ = ['','','',''];
                    }
                }
            }
            else
            {
                var n = tab.getPositionAmbito($$[$0-2][4]);
                if(n!=null && n.tipo.toUpperCase() == 'BOOLEAN')
                {
                    if($$[$0][0] != '' && $$[$0][0] == 'BOOLEAN')
                    {
                            var valor = '';
                            var r = [];
                            var tempant = Temp.getTemporal();
                            var tempant1 = Temp.getTemporal();

                            valor += tempant +'='+n.position+';\n';
                            if(n.entorno == 'global')
                            {
                                valor += tempant1 +'=heap[(int)'+tempant+'];\n';
                            }
                            else
                            {
                                valor += tempant1 +'=stack[(int)'+tempant+'];\n';
                            }

                            valor += $$[$0][3];
                            valor += '\n';

                            var temp = Temp.getTemporal();
                            var label0 = Label.getBandera();
                            var label1 = Label.getBandera();
                            var label2 = Label.getBandera();
                            var label3 = Label.getBandera();
                            var label4 = Label.getBandera();

                            valor += label0 + ':\n';
                            valor += '\t if('+tempant1+'==1) goto '+label1+';\n';
                            valor += '\t goto '+label3+';\n';
                            valor += label1 + ':\n';
                            valor += '\t if('+$$[$0][1]+'==1) goto '+label2+';\n';
                            valor += '\t goto '+label3+';\n';
                            valor += label2 + ':\n';
                            valor += '\t' + temp + '=1;\n';
                            valor += '\t goto '+label4+';\n';
                            valor += label3 + ':\n';
                            valor += '\t' + temp + '=0;\n';
                            valor += '\t goto '+label4+';\n';
                            valor += label4 + ':\n';


                            r[0] = 'BOOLEAN';
                            r[1] = temp;
                            r[2] = label4;
                            r[3] = valor;
                            r[4] = '';
                            r[5] = '';
                            r[6] = Boolean(n.valor) && Boolean($$[$0][6]);
                            this.$ = r;
                    }
                    else
                    {
                        var n1 = tab.getPositionAmbito($$[$0][4]);
                        if(n1!=null && n1.tipo.toUpperCase() == 'BOOLEAN')
                        {
                            var valor = '';
                            var r = [];
                            var tempant = Temp.getTemporal();
                            var tempant1 = Temp.getTemporal();

                            valor += tempant +'='+n.position+';\n';
                            if(n.entorno == 'global')
                            {
                                valor += tempant1 +'=heap[(int)'+tempant+'];\n';
                            }
                            else
                            {
                                valor += tempant1 +'=stack[(int)'+tempant+'];\n';
                            }


                            var tempant11 = Temp.getTemporal();
                            var tempant111 = Temp.getTemporal();

                            valor += tempant11 +'='+n1.position+';\n';
                            if(n1.entorno == 'global')
                            {
                                valor += tempant111 +'=heap[(int)'+tempant11+'];\n';
                            }
                            else
                            {
                                valor += tempant111 +'=stack[(int)'+tempant11+'];\n';
                            }


                            var temp = Temp.getTemporal();
                            var label0 = Label.getBandera();
                            var label1 = Label.getBandera();
                            var label2 = Label.getBandera();
                            var label3 = Label.getBandera();
                            var label4 = Label.getBandera();

                            valor += label0 + ':\n';
                            valor += '\t if('+tempant1+'==1) goto '+label1+';\n';
                            valor += '\t goto '+label3+';\n';
                            valor += label1 + ':\n';
                            valor += '\t if('+tempant111+'==1) goto '+label2+';\n';
                            valor += '\t goto '+label3+';\n';
                            valor += label2 + ':\n';
                            valor += '\t' + temp + '=1;\n';
                            valor += '\t goto '+label4+';\n';
                            valor += label3 + ':\n';
                            valor += '\t' + temp + '=0;\n';
                            valor += '\t goto '+label4+';\n';
                            valor += label4 + ':\n';


                            r[0] = 'BOOLEAN';
                            r[1] = temp;
                            r[2] = label4;
                            r[3] = valor;
                            r[4] = '';
                            r[5] = '';
                            r[6] = Boolean(n.valor) && Boolean(n1.valor);
                            this.$ = r;
                        }
                        else
                        {
                            semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no existe la variable: ${$$[$0][4]}, de tipo booleano`+'\"}');
                            this.$ = ['','','',''];
                        }
                    }
                }
                else
                {
                    semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no existe la variable: ${$$[$0-2][4]}, de tipo booleano.`+'\"}');
                    this.$ = ['','','',''];
                }
            }
        }
        else
        {
            semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no se puede ejecutar la operacion, unicamente variables de tipo BOOLEANO.`+'\"}');
            this.$ = ['','','',''];
        }

break;
case 254:

        if($$[$0-2][0] != 'STRING' && $$[$0][0] != 'STRING')
        {
            if($$[$0-2][0]!= '' )
            {
                if($$[$0][0] != '' && $$[$0][0] == 'BOOLEAN')
                {
                        var valor = '';
                        var r = [];
                        valor += $$[$0-2][3];
                        valor += '\n';
                        valor += $$[$0][3];
                        valor += '\n';

                        var temp = Temp.getTemporal();
                        var label0 = Label.getBandera();
                        var label1 = Label.getBandera();
                        var label2 = Label.getBandera();
                        var label3 = Label.getBandera();
                        var label4 = Label.getBandera();

                        valor += label0 + ':\n';
                        valor += '\t if('+$$[$0-2][1]+'==1) goto '+label1+';\n';
                        valor += '\t goto '+label3+';\n';
                        valor += label1 + ':\n';
                        valor += '\t if('+$$[$0][1]+'==1) goto '+label2+';\n';
                        valor += '\t goto '+label3+';\n';
                        valor += label2 + ':\n';
                        valor += '\t' + temp + '=1;\n';
                        valor += '\t goto '+label4+';\n';
                        valor += label3 + ':\n';
                        valor += '\t' + temp + '=0;\n';
                        valor += '\t goto '+label4+';\n';
                        valor += label4 + ':\n';


                        r[0] = 'BOOLEAN';
                        r[1] = temp;
                        r[2] = label4;
                        r[3] = valor;
                        r[4] = '';
                        r[5] = '';
                        r[6] = Boolean($$[$0-2][6]) && Boolean($$[$0][6]);
                        this.$ = r;
                }
                else
                {
                    var n = tab.getPositionAmbito($$[$0][4]);
                    if(n!=null && n.tipo.toUpperCase() == 'BOOLEAN')
                    {
                        var valor = '';
                        var r = [];
                        valor += $$[$0-2][3];
                        valor += '\n';

                        var tempant = Temp.getTemporal();
                        var tempant1 = Temp.getTemporal();

                        valor += tempant +'='+n.position+';\n';
                        if(n.entorno == 'global')
                        {
                            valor += tempant1 +'=heap[(int)'+tempant+'];\n';
                        }
                        else
                        {
                            valor += tempant1 +'=stack[(int)'+tempant+'];\n';
                        }


                        var temp = Temp.getTemporal();
                        var label0 = Label.getBandera();
                        var label1 = Label.getBandera();
                        var label2 = Label.getBandera();
                        var label3 = Label.getBandera();
                        var label4 = Label.getBandera();

                        valor += label0 + ':\n';
                        valor += '\t if('+$$[$0-2][1]+'==1) goto '+label1+';\n';
                        valor += '\t goto '+label3+';\n';
                        valor += label1 + ':\n';
                        valor += '\t if('+tempant1+'==1) goto '+label2+';\n';
                        valor += '\t goto '+label3+';\n';
                        valor += label2 + ':\n';
                        valor += '\t' + temp + '=1;\n';
                        valor += '\t goto '+label4+';\n';
                        valor += label3 + ':\n';
                        valor += '\t' + temp + '=0;\n';
                        valor += '\t goto '+label4+';\n';
                        valor += label4 + ':\n';


                        r[0] = 'BOOLEAN';
                        r[1] = temp;
                        r[2] = label4;
                        r[3] = valor;
                        r[4] = '';
                        r[5] = '';
                        r[6] = Boolean($$[$0-2][6]) && Boolean(n.valor);
                        this.$ = r;
                    }
                    else
                    {
                        semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no existe la variable: ${$$[$0][4]}, de tipo booleano`+'\"}');
                        this.$ = ['','','',''];
                    }
                }
            }
            else
            {
                var n = tab.getPositionAmbito($$[$0-2][4]);
                if(n!=null && n.tipo.toUpperCase() == 'BOOLEAN')
                {
                    if($$[$0][0] != '' && $$[$0][0] == 'BOOLEAN')
                    {
                            var valor = '';
                            var r = [];
                            var tempant = Temp.getTemporal();
                            var tempant1 = Temp.getTemporal();

                            valor += tempant +'='+n.position+';\n';
                            if(n.entorno == 'global')
                            {
                                valor += tempant1 +'=heap[(int)'+tempant+'];\n';
                            }
                            else
                            {
                                valor += tempant1 +'=stack[(int)'+tempant+'];\n';
                            }

                            valor += $$[$0][3];
                            valor += '\n';

                            var temp = Temp.getTemporal();
                            var label0 = Label.getBandera();
                            var label1 = Label.getBandera();
                            var label2 = Label.getBandera();
                            var label3 = Label.getBandera();
                            var label4 = Label.getBandera();

                            valor += label0 + ':\n';
                            valor += '\t if('+tempant1+'==1) goto '+label1+';\n';
                            valor += '\t goto '+label3+';\n';
                            valor += label1 + ':\n';
                            valor += '\t if('+$$[$0][1]+'==1) goto '+label2+';\n';
                            valor += '\t goto '+label3+';\n';
                            valor += label2 + ':\n';
                            valor += '\t' + temp + '=1;\n';
                            valor += '\t goto '+label4+';\n';
                            valor += label3 + ':\n';
                            valor += '\t' + temp + '=0;\n';
                            valor += '\t goto '+label4+';\n';
                            valor += label4 + ':\n';


                            r[0] = 'BOOLEAN';
                            r[1] = temp;
                            r[2] = label4;
                            r[3] = valor;
                            r[4] = '';
                            r[5] = '';
                            r[6] = Boolean(n.valor) && Boolean($$[$0][6]);
                            this.$ = r;
                    }
                    else
                    {
                        var n1 = tab.getPositionAmbito($$[$0][4]);
                        if(n1!=null && n1.tipo.toUpperCase() == 'BOOLEAN')
                        {
                            var valor = '';
                            var r = [];
                            var tempant = Temp.getTemporal();
                            var tempant1 = Temp.getTemporal();

                            valor += tempant +'='+n.position+';\n';
                            if(n.entorno == 'global')
                            {
                                valor += tempant1 +'=heap[(int)'+tempant+'];\n';
                            }
                            else
                            {
                                valor += tempant1 +'=stack[(int)'+tempant+'];\n';
                            }
                            var tempant11 = Temp.getTemporal();
                            var tempant111 = Temp.getTemporal();

                            valor += tempant11 +'='+n1.position+';\n';
                            if(n1.entorno == 'global')
                            {
                                valor += tempant111 +'=heap[(int)'+tempant11+'];\n';
                            }
                            else
                            {
                                valor += tempant111 +'=stack[(int)'+tempant11+'];\n';
                            }


                            var temp = Temp.getTemporal();
                            var label0 = Label.getBandera();
                            var label1 = Label.getBandera();
                            var label2 = Label.getBandera();
                            var label3 = Label.getBandera();
                            var label4 = Label.getBandera();

                            valor += label0 + ':\n';
                            valor += '\t if('+tempant1+'==1) goto '+label1+';\n';
                            valor += '\t goto '+label3+';\n';
                            valor += label1 + ':\n';
                            valor += '\t if('+tempant111+'==1) goto '+label2+';\n';
                            valor += '\t goto '+label3+';\n';
                            valor += label2 + ':\n';
                            valor += '\t' + temp + '=1;\n';
                            valor += '\t goto '+label4+';\n';
                            valor += label3 + ':\n';
                            valor += '\t' + temp + '=0;\n';
                            valor += '\t goto '+label4+';\n';
                            valor += label4 + ':\n';


                            r[0] = 'BOOLEAN';
                            r[1] = temp;
                            r[2] = label4;
                            r[3] = valor;
                            r[4] = '';
                            r[5] = '';
                            r[6] = Boolean(n.valor) && Boolean(n1.valor);
                            this.$ = r;
                        }
                        else
                        {
                            semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no existe la variable: ${$$[$0][4]}, de tipo booleano`+'\"}');
                            this.$ = ['','','',''];
                        }
                    }
                }
            }
        }
        else
        {
            semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no se puede ejecutar la operacion, unicamente variables de tipo BOOLEANO`+'\"}');
            this.$ = ['','','',''];
        }

break;
case 256:

        if($$[$0-2][0] != 'STRING' && $$[$0][0] != 'STRING')
        {
            if($$[$0-2][0]!= '' )
            {
                if($$[$0][0] != '' && $$[$0][0] == 'BOOLEAN')
                {
                        var valor = '';
                        var r = [];
                        valor += $$[$0-2][3];
                        valor += '\n';
                        valor += $$[$0][3];
                        valor += '\n';

                        var temp = Temp.getTemporal();
                        var label0 = Label.getBandera();
                        var label1 = Label.getBandera();
                        var label2 = Label.getBandera();
                        var label3 = Label.getBandera();
                        var label4 = Label.getBandera();

                        valor += label0 + ':\n';
                        valor += '\t if('+$$[$0-2][1]+'==1) goto '+label1+';\n';
                        valor += '\t goto '+label3+';\n';
                        valor += label1 + ':\n';
                        valor += '\t if('+$$[$0][1]+'==1) goto '+label2+';\n';
                        valor += '\t goto '+label3+';\n';
                        valor += label2 + ':\n';
                        valor += '\t' + temp + '=1;\n';
                        valor += '\t goto '+label4+';\n';
                        valor += label3 + ':\n';
                        valor += '\t' + temp + '=0;\n';
                        valor += '\t goto '+label4+';\n';
                        valor += label4 + ':\n';


                        r[0] = 'BOOLEAN';
                        r[1] = temp;
                        r[2] = label4;
                        r[3] = valor;
                        r[4] = '';
                        r[5] = '';
                        r[6] = Boolean($$[$0-2][6]) && Boolean($$[$0][6]);
                        this.$ = r;
                }
                else
                {
                    var n = tab.getPositionAmbito($$[$0][4]);
                    if(n!=null && n.tipo.toUpperCase() == 'BOOLEAN')
                    {
                        var valor = '';
                        var r = [];
                        valor += $$[$0-2][3];
                        valor += '\n';

                        var tempant = Temp.getTemporal();
                        var tempant1 = Temp.getTemporal();

                        valor += tempant +'='+n.position+';\n';
                        if(n.entorno == 'global')
                        {
                            valor += tempant1 +'=heap[(int)'+tempant+'];\n';
                        }
                        else
                        {
                            valor += tempant1 +'=stack[(int)'+tempant+'];\n';
                        }


                        var temp = Temp.getTemporal();
                        var label0 = Label.getBandera();
                        var label1 = Label.getBandera();
                        var label2 = Label.getBandera();
                        var label3 = Label.getBandera();
                        var label4 = Label.getBandera();

                        valor += label0 + ':\n';
                        valor += '\t if('+$$[$0-2][1]+'==1) goto '+label1+';\n';
                        valor += '\t goto '+label3+';\n';
                        valor += label1 + ':\n';
                        valor += '\t if('+tempant1+'==1) goto '+label2+';\n';
                        valor += '\t goto '+label3+';\n';
                        valor += label2 + ':\n';
                        valor += '\t' + temp + '=1;\n';
                        valor += '\t goto '+label4+';\n';
                        valor += label3 + ':\n';
                        valor += '\t' + temp + '=0;\n';
                        valor += '\t goto '+label4+';\n';
                        valor += label4 + ':\n';


                        r[0] = 'BOOLEAN';
                        r[1] = temp;
                        r[2] = label4;
                        r[3] = valor;
                        r[4] = '';
                        r[5] = '';
                        r[6] = Boolean($$[$0-2][6]) && Boolean(n.valor);
                        this.$ = r;
                    }
                    else
                    {
                        semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no existe la variable: ${$$[$0][4]}, de tipo booleano`+'\"}');
                        this.$ = ['','','',''];
                    }
                }
            }
            else if($$[$0-2][0] == '')
            {
                var n = tab.getPositionAmbito($$[$0-2][4]);
                if(n!=null && n.tipo.toUpperCase() == 'BOOLEAN')
                {
                    if($$[$0][0] != '' && $$[$0][0] == 'BOOLEAN')
                    {
                            var valor = '';
                            var r = [];
                            var tempant = Temp.getTemporal();
                            var tempant1 = Temp.getTemporal();

                            valor += tempant +'='+n.position+';\n';
                            if(n.entorno == 'global')
                            {
                                valor += tempant1 +'=heap[(int)'+tempant+'];\n';
                            }
                            else
                            {
                                valor += tempant1 +'=stack[(int)'+tempant+'];\n';
                            }

                            valor += $$[$0][3];
                            valor += '\n';

                            var temp = Temp.getTemporal();
                            var label0 = Label.getBandera();
                            var label1 = Label.getBandera();
                            var label2 = Label.getBandera();
                            var label3 = Label.getBandera();
                            var label4 = Label.getBandera();

                            valor += label0 + ':\n';
                            valor += '\t if('+tempant1+'==1) goto '+label1+';\n';
                            valor += '\t goto '+label3+';\n';
                            valor += label1 + ':\n';
                            valor += '\t if('+$$[$0][1]+'==1) goto '+label2+';\n';
                            valor += '\t goto '+label3+';\n';
                            valor += label2 + ':\n';
                            valor += '\t' + temp + '=1;\n';
                            valor += '\t goto '+label4+';\n';
                            valor += label3 + ':\n';
                            valor += '\t' + temp + '=0;\n';
                            valor += '\t goto '+label4+';\n';
                            valor += label4 + ':\n';


                            r[0] = 'BOOLEAN';
                            r[1] = temp;
                            r[2] = label4;
                            r[3] = valor;
                            r[4] = '';
                            r[5] = '';
                            r[6] = Boolean(n.valor) && Boolean($$[$0][6]);
                            this.$ = r;
                    }
                    else
                    {
                        var n1 = tab.getPositionAmbito($$[$0][4]);
                        if(n1!=null && n1.tipo.toUpperCase() == 'BOOLEAN')
                        {
                            var valor = '';
                            var r = [];
                            var tempant = Temp.getTemporal();
                            var tempant1 = Temp.getTemporal();

                            valor += tempant +'='+n.position+';\n';
                            if(n.entorno == 'global')
                            {
                                valor += tempant1 +'=heap[(int)'+tempant+'];\n';
                            }
                            else
                            {
                                valor += tempant1 +'=stack[(int)'+tempant+'];\n';
                            }


                            var tempant11 = Temp.getTemporal();
                            var tempant111 = Temp.getTemporal();

                            valor += tempant11 +'='+n1.position+';\n';
                            if(n1.entorno == 'global')
                            {
                                valor += tempant111 +'=heap[(int)'+tempant11+'];\n';
                            }
                            else
                            {
                                valor += tempant111 +'=stack[(int)'+tempant11+'];\n';
                            }


                            var temp = Temp.getTemporal();
                            var label0 = Label.getBandera();
                            var label1 = Label.getBandera();
                            var label2 = Label.getBandera();
                            var label3 = Label.getBandera();
                            var label4 = Label.getBandera();

                            valor += label0 + ':\n';
                            valor += '\t if('+tempant1+'==1) goto '+label1+';\n';
                            valor += '\t goto '+label3+';\n';
                            valor += label1 + ':\n';
                            valor += '\t if('+tempant111+'==1) goto '+label2+';\n';
                            valor += '\t goto '+label3+';\n';
                            valor += label2 + ':\n';
                            valor += '\t' + temp + '=1;\n';
                            valor += '\t goto '+label4+';\n';
                            valor += label3 + ':\n';
                            valor += '\t' + temp + '=0;\n';
                            valor += '\t goto '+label4+';\n';
                            valor += label4 + ':\n';


                            r[0] = 'BOOLEAN';
                            r[1] = temp;
                            r[2] = label4;
                            r[3] = valor;
                            r[4] = '';
                            r[5] = '';
                            r[6] = Boolean(n.valor) && Boolean(n1.valor);
                            this.$ = r;
                        }
                        else
                        {
                            semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no existe la variable: ${$$[$0][4]}, de tipo booleano`+'\"}');
                            this.$ = ['','','',''];
                        }
                    }
                }
                else
                {
                    semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no existe la variable: ${$$[$0-2][4]}, de tipo booleano`+'\"}');
                    this.$ = ['','','',''];
                }
            }
            else
            {
                semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no se puede ejecutar la operacion`+'\"}');
                this.$ = ['','','',''];
            }
        }
        else
        {
            semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no se puede ejecutar la operacion, unicamente valores de tipo BOOLEANO`+'\"}');
            this.$ = ['','','',''];
        }

break;
case 258:

        if($$[$0-2][0] != 'STRING' && $$[$0][0] != 'STRING')
        {
            if($$[$0-2][0]!= '')
            {
                if($$[$0][0] != '')
                {
                        var valor = '';
                        var r = [];
                        valor += $$[$0-2][3];
                        valor += '\n';
                        valor += $$[$0][3];
                        valor += '\n';

                        var temp = Temp.getTemporal();
                        var label0 = Label.getBandera();
                        var label1 = Label.getBandera();
                        var label2 = Label.getBandera();
                        var label3 = Label.getBandera();
                        var label4 = Label.getBandera();
                        var label5 = Label.getBandera();

                        valor += label0 + ':\n';
                        valor += '\t if('+$$[$0-2][1]+'==1) goto '+label1+';\n';
                        valor += '\t goto '+label3+';\n';
                        valor += label1 + ':\n';
                        valor += '\t if('+$$[$0][1]+'==1) goto '+label2+';\n';
                        valor += '\t goto '+label2+';\n';
                        valor += label2 + ':\n';
                        valor += '\t' + temp + '=1;\n';
                        valor += '\t goto '+label4+';\n';
                        valor += label3 + ':\n';
                        valor += '\t if('+$$[$0][1]+'==1) goto '+label2+';\n';
                        valor += '\t goto '+label5+';\n';
                        valor += label5 + ':\n';
                        valor += '\t' + temp + '=0;\n';
                        valor += '\t goto '+label4+';\n';
                        valor += label4 + ':\n';


                        r[0] = 'BOOLEAN';
                        r[1] = temp;
                        r[2] = label4;
                        r[3] = valor;
                        r[4] = '';
                        r[5] = '';
                        r[6] = Boolean($$[$0-2][6]) || Boolean($$[$0][6]);
                        this.$ = r;
                }
                else
                {
                    var n = tab.getPositionAmbito($$[$0][4]);
                    if(n!=null && n.tipo.toUpperCase() != 'STRING' )
                    {
                        var valor = '';
                        var r = [];
                        valor += $$[$0-2][3];
                        valor += '\n';

                        var tempant = Temp.getTemporal();
                        var tempant1 = Temp.getTemporal();

                        valor += tempant +'='+n.position+';\n';
                        if(n.entorno == 'global')
                        {
                            valor += tempant1 +'=heap[(int)'+tempant+'];\n';
                        }
                        else
                        {
                            valor += tempant1 +'=stack[(int)'+tempant+'];\n';
                        }


                        var temp = Temp.getTemporal();
                        var label0 = Label.getBandera();
                        var label1 = Label.getBandera();
                        var label2 = Label.getBandera();
                        var label3 = Label.getBandera();
                        var label4 = Label.getBandera();
                        var label5 = Label.getBandera();

                        valor += label0 + ':\n';
                        valor += '\t if('+$$[$0-2][1]+'==1) goto '+label1+';\n';
                        valor += '\t goto '+label3+';\n';
                        valor += label1 + ':\n';
                        valor += '\t if('+tempant1+'==1) goto '+label2+';\n';
                        valor += '\t goto '+label2+';\n';
                        valor += label2 + ':\n';
                        valor += '\t' + temp + '=1;\n';
                        valor += '\t goto '+label4+';\n';
                        valor += label3 + ':\n';
                        valor += '\t if('+tempant1+'==1) goto '+label2+';\n';
                        valor += '\t goto '+label5+';\n';
                        valor += label5 + ':\n';
                        valor += '\t' + temp + '=0;\n';
                        valor += '\t goto '+label4+';\n';
                        valor += label4 + ':\n';


                        r[0] = 'BOOLEAN';
                        r[1] = temp;
                        r[2] = label4;
                        r[3] = valor;
                        r[4] = '';
                        r[5] = '';
                        r[6] = Boolean($$[$0-2][6]) || Boolean($$[$0][6]);
                        this.$ = r;
                    }
                    else
                    {
                        semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no existe la variable: ${$$[$0][4]}`+'\"}');
                        this.$ = ['','','',''];
                    }
                }
            }
            else if($$[$0-2][0] == '')
            {
                var n = tab.getPositionAmbito($$[$0-2][4]);
                if(n!=null && n.tipo.toUpperCase() != 'STRING')
                {
                    if($$[$0][0] != '')
                    {
                            var valor = '';
                            var r = [];
                            var tempant = Temp.getTemporal();
                            var tempant1 = Temp.getTemporal();

                            valor += tempant +'='+n.position+';\n';
                            if(n.entorno == 'global')
                            {
                                valor += tempant1 +'=heap[(int)'+tempant+'];\n';
                            }
                            else
                            {
                                valor += tempant1 +'=stack[(int)'+tempant+'];\n';
                            }

                            valor += $$[$0][3];
                            valor += '\n';

                            var temp = Temp.getTemporal();
                            var label0 = Label.getBandera();
                            var label1 = Label.getBandera();
                            var label2 = Label.getBandera();
                            var label3 = Label.getBandera();
                            var label4 = Label.getBandera();
                            var label5 = Label.getBandera();

                            valor += label0 + ':\n';
                            valor += '\t if('+tempant1+'==1) goto '+label1+';\n';
                            valor += '\t goto '+label3+';\n';
                            valor += label1 + ':\n';
                            valor += '\t if('+$$[$0][1]+'==1) goto '+label2+';\n';
                            valor += '\t goto '+label2+';\n';
                            valor += label2 + ':\n';
                            valor += '\t' + temp + '=1;\n';
                            valor += '\t goto '+label4+';\n';
                            valor += label3 + ':\n';
                            valor += '\t if('+$$[$0][1]+'==1) goto '+label2+';\n';
                            valor += '\t goto '+label5+';\n';
                            valor += label5 + ':\n';
                            valor += '\t' + temp + '=0;\n';
                            valor += '\t goto '+label4+';\n';
                            valor += label4 + ':\n';


                            r[0] = 'BOOLEAN';
                            r[1] = temp;
                            r[2] = label4;
                            r[3] = valor;
                            r[4] = '';
                            r[5] = '';
                            r[6] = Boolean($$[$0-2][6]) && Boolean($$[$0][6]);
                            this.$ = r;
                    }
                    else
                    {
                        var n1 = tab.getPositionAmbito($$[$0][4]);
                        if(n1!=null && n1.tipo.toUpperCase() != 'STRING')
                        {
                            var valor = '';
                            var r = [];
                            var tempant = Temp.getTemporal();
                            var tempant1 = Temp.getTemporal();

                            valor += tempant +'='+n.position+';\n';
                            if(n.entorno == 'global')
                            {
                                valor += tempant1 +'=heap[(int)'+tempant+'];\n';
                            }
                            else
                            {
                                valor += tempant1 +'=stack[(int)'+tempant+'];\n';
                            }

                            var tempant11 = Temp.getTemporal();
                            var tempant111 = Temp.getTemporal();

                            valor += tempant11 +'='+n1.position+';\n';
                            if(n1.entorno == 'global')
                            {
                                valor += tempant111 +'=heap[(int)'+tempant11+'];\n';
                            }
                            else
                            {
                                valor += tempant111 +'=stack[(int)'+tempant11+'];\n';
                            }


                            var temp = Temp.getTemporal();
                            var label0 = Label.getBandera();
                            var label1 = Label.getBandera();
                            var label2 = Label.getBandera();
                            var label3 = Label.getBandera();
                            var label4 = Label.getBandera();
                            var label5 = Label.getBandera();

                            valor += label0 + ':\n';
                            valor += '\t if('+tempant1+'==1) goto '+label1+';\n';
                            valor += '\t goto '+label3+';\n';
                            valor += label1 + ':\n';
                            valor += '\t if('+tempant11+'==1) goto '+label2+';\n';
                            valor += '\t goto '+label2+';\n';
                            valor += label2 + ':\n';
                            valor += '\t' + temp + '=1;\n';
                            valor += '\t goto '+label4+';\n';
                            valor += label3 + ':\n';
                            valor += '\t if('+tempant11+'==1) goto '+label2+';\n';
                            valor += '\t goto '+label5+';\n';
                            valor += label5 + ':\n';
                            valor += '\t' + temp + '=0;\n';
                            valor += '\t goto '+label4+';\n';
                            valor += label4 + ':\n';


                            r[0] = 'BOOLEAN';
                            r[1] = temp;
                            r[2] = label4;
                            r[3] = valor;
                            r[4] = '';
                            r[5] = '';
                            r[6] = Boolean($$[$0-2][6]) && Boolean($$[$0][6]);
                            this.$ = r;
                        }
                        else
                        {
                            semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no existe la variable: ${$$[$0][4]}.., de tipo booleano`+'\"}');
                            this.$ = ['','','',''];
                        }
                    }
                }
                else
                {
                    semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no existe la variable: ${$$[$0-2][4]}.,, de tipo booleano`+'\"}');
                    this.$ = ['','','',''];
                }
            }
            else
            {
                semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no se puede ejecutar la operacion`+'\"}');
                this.$ = ['','','',''];
            }
        }
        else
        {
            semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no se puede ejecutar la operacion, unicamente variables de tipo BOOLEANO`+'\"}');
            this.$ = ['','','',''];
        }

break;
case 260:

        if($$[$0-2][0] != 'STRING' && $$[$0][0] != 'STRING')
        {
            if($$[$0-2][0]!= '' )
            {
                if($$[$0][0] != '')
                {
                        var valor = '';
                        var r = [];
                        valor += $$[$0-2][3];
                        valor += '\n';
                        valor += $$[$0][3];
                        valor += '\n';

                        var temp = Temp.getTemporal();
                        var label0 = Label.getBandera();
                        var label1 = Label.getBandera();
                        var label2 = Label.getBandera();
                        var label3 = Label.getBandera();
                        var label4 = Label.getBandera();
                        var label5 = Label.getBandera();

                        valor += label0 + ':\n';
                        valor += '\t if('+$$[$0-2][1]+'==1) goto '+label1+';\n';
                        valor += '\t goto '+label3+';\n';
                        valor += label1 + ':\n';
                        valor += '\t if('+$$[$0][1]+'==1) goto '+label2+';\n';
                        valor += '\t goto '+label2+';\n';
                        valor += label2 + ':\n';
                        valor += '\t' + temp + '=1;\n';
                        valor += '\t goto '+label4+';\n';
                        valor += label3 + ':\n';
                        valor += '\t if('+$$[$0][1]+'==1) goto '+label2+';\n';
                        valor += '\t goto '+label5+';\n';
                        valor += label5 + ':\n';
                        valor += '\t' + temp + '=0;\n';
                        valor += '\t goto '+label4+';\n';
                        valor += label4 + ':\n';


                        r[0] = 'BOOLEAN';
                        r[1] = temp;
                        r[2] = label4;
                        r[3] = valor;
                        r[4] = '';
                        r[5] = '';
                        r[6] = Boolean($$[$0-2][6]) || Boolean($$[$0][6]);
                        this.$ = r;
                }
                else
                {
                    var n = tab.getPositionAmbito($$[$0][4]);
                    if(n!=null && n.tipo.toUpperCase() != 'STRING')
                    {
                        var valor = '';
                        var r = [];
                        valor += $$[$0-2][3];
                        valor += '\n';

                        var tempant = Temp.getTemporal();
                        var tempant1 = Temp.getTemporal();

                        valor += tempant +'='+n.position+';\n';
                        if(n.entorno == 'global')
                        {
                            valor += tempant1 +'=heap[(int)'+tempant+'];\n';
                        }
                        else
                        {
                            valor += tempant1 +'=stack[(int)'+tempant+'];\n';
                        }


                        var temp = Temp.getTemporal();
                        var label0 = Label.getBandera();
                        var label1 = Label.getBandera();
                        var label2 = Label.getBandera();
                        var label3 = Label.getBandera();
                        var label4 = Label.getBandera();
                        var label5 = Label.getBandera();

                        valor += label0 + ':\n';
                        valor += '\t if('+$$[$0-2][1]+'==1) goto '+label1+';\n';
                        valor += '\t goto '+label3+';\n';
                        valor += label1 + ':\n';
                        valor += '\t if('+tempant1+'==1) goto '+label2+';\n';
                        valor += '\t goto '+label2+';\n';
                        valor += label2 + ':\n';
                        valor += '\t' + temp + '=1;\n';
                        valor += '\t goto '+label4+';\n';
                        valor += label3 + ':\n';
                        valor += '\t if('+tempant1+'==1) goto '+label2+';\n';
                        valor += '\t goto '+label5+';\n';
                        valor += label5 + ':\n';
                        valor += '\t' + temp + '=0;\n';
                        valor += '\t goto '+label4+';\n';
                        valor += label4 + ':\n';


                        r[0] = 'BOOLEAN';
                        r[1] = temp;
                        r[2] = label4;
                        r[3] = valor;
                        r[4] = '';
                        r[5] = '';
                        r[6] = Boolean($$[$0-2][6]) || Boolean($$[$0][6]);
                        this.$ = r;
                    }
                    else
                    {
                        semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no existe la variable: ${$$[$0][4]}, de tipo booleano`+'\"}');
                        this.$ = ['','','',''];
                    }
                }
            }
            else if($$[$0-2][0] == '')
            {
                var n = tab.getPositionAmbito($$[$0-2][4]);
                if(n!=null && n.tipo.toUpperCase() != 'STRING')
                {
                    if($$[$0][0] != '' )
                    {
                            var valor = '';
                            var r = [];
                            var tempant = Temp.getTemporal();
                            var tempant1 = Temp.getTemporal();

                            valor += tempant +'='+n.position+';\n';
                            if(n.entorno == 'global')
                            {
                                valor += tempant1 +'=heap[(int)'+tempant+'];\n';
                            }
                            else
                            {
                                valor += tempant1 +'=stack[(int)'+tempant+'];\n';
                            }

                            valor += $$[$0][3];
                            valor += '\n';

                            var temp = Temp.getTemporal();
                            var label0 = Label.getBandera();
                            var label1 = Label.getBandera();
                            var label2 = Label.getBandera();
                            var label3 = Label.getBandera();
                            var label4 = Label.getBandera();
                            var label5 = Label.getBandera();

                            valor += label0 + ':\n';
                            valor += '\t if('+tempant1+'==1) goto '+label1+';\n';
                            valor += '\t goto '+label3+';\n';
                            valor += label1 + ':\n';
                            valor += '\t if('+$$[$0][1]+'==1) goto '+label2+';\n';
                            valor += '\t goto '+label2+';\n';
                            valor += label2 + ':\n';
                            valor += '\t' + temp + '=1;\n';
                            valor += '\t goto '+label4+';\n';
                            valor += label3 + ':\n';
                            valor += '\t if('+$$[$0][1]+'==1) goto '+label2+';\n';
                            valor += '\t goto '+label5+';\n';
                            valor += label5 + ':\n';
                            valor += '\t' + temp + '=0;\n';
                            valor += '\t goto '+label4+';\n';
                            valor += label4 + ':\n';


                            r[0] = 'BOOLEAN';
                            r[1] = temp;
                            r[2] = label4;
                            r[3] = valor;
                            r[4] = '';
                            r[5] = '';
                            r[6] = Boolean($$[$0-2][6]) && Boolean($$[$0][6]);
                            this.$ = r;
                    }
                    else
                    {
                        var n1 = tab.getPositionAmbito($$[$0][4]);
                        if(n1!=null && n1.tipo.toUpperCase() != 'STRING')
                        {
                            var valor = '';
                            var r = [];
                            var tempant = Temp.getTemporal();
                            var tempant1 = Temp.getTemporal();

                            valor += tempant +'='+n.position+';\n';
                            if(n.entorno == 'global')
                            {
                                valor += tempant1 +'=heap[(int)'+tempant+'];\n';
                            }
                            else
                            {
                                valor += tempant1 +'=stack[(int)'+tempant+'];\n';
                            }

                            var tempant11 = Temp.getTemporal();
                            var tempant111 = Temp.getTemporal();

                            valor += tempant11 +'='+n1.position+';\n';
                            if(n1.entorno == 'global')
                            {
                                valor += tempant111 +'=heap[(int)'+tempant11+'];\n';
                            }
                            else
                            {
                                valor += tempant111 +'=stack[(int)'+tempant11+'];\n';
                            }


                            var temp = Temp.getTemporal();
                            var label0 = Label.getBandera();
                            var label1 = Label.getBandera();
                            var label2 = Label.getBandera();
                            var label3 = Label.getBandera();
                            var label4 = Label.getBandera();
                            var label5 = Label.getBandera();

                            valor += label0 + ':\n';
                            valor += '\t if('+tempant1+'==1) goto '+label1+';\n';
                            valor += '\t goto '+label3+';\n';
                            valor += label1 + ':\n';
                            valor += '\t if('+tempant11+'==1) goto '+label2+';\n';
                            valor += '\t goto '+label2+';\n';
                            valor += label2 + ':\n';
                            valor += '\t' + temp + '=1;\n';
                            valor += '\t goto '+label4+';\n';
                            valor += label3 + ':\n';
                            valor += '\t if('+tempant11+'==1) goto '+label2+';\n';
                            valor += '\t goto '+label5+';\n';
                            valor += label5 + ':\n';
                            valor += '\t' + temp + '=0;\n';
                            valor += '\t goto '+label4+';\n';
                            valor += label4 + ':\n';


                            r[0] = 'BOOLEAN';
                            r[1] = temp;
                            r[2] = label4;
                            r[3] = valor;
                            r[4] = '';
                            r[5] = '';
                            r[6] = Boolean($$[$0-2][6]) && Boolean($$[$0][6]);
                            this.$ = r;
                        }
                        else
                        {
                            semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no existe la variable: ${$$[$0][4]}, de tipo booleano`+'\"}');
                            this.$ = ['','','',''];
                        }
                    }
                }
                else
                {
                    semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no existe la variable: ${$$[$0-2][4]}, de tipo booleano`+'\"}');
                    this.$ = ['','','',''];
                }
            }
            else
            {
                semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no se puede ejecutar la operacion`+'\"}');
                this.$ = ['','','',''];
            }
        }
        else
        {
            semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no se puede ejecutar la operacion, unicamente variables de tipo BOOLEANO`+'\"}');
            this.$ = ['','','',''];
        }

break;
case 262:

        if($$[$0-2][0] != 'STRING' && $$[$0][0] != 'STRING')
        {
            if($$[$0-2][0]!= '' )
            {
                if($$[$0][0] != '' )
                {
                        var valor = '';
                        var r = [];
                        valor += $$[$0-2][3];
                        valor += '\n';
                        valor += $$[$0][3];
                        valor += '\n';

                        var temp = Temp.getTemporal();
                        var label0 = Label.getBandera();
                        var label1 = Label.getBandera();
                        var label2 = Label.getBandera();
                        var label3 = Label.getBandera();
                        var label4 = Label.getBandera();
                        var label5 = Label.getBandera();

                        valor += label0 + ':\n';
                        valor += '\t if('+$$[$0-2][1]+'==1) goto '+label1+';\n';
                        valor += '\t goto '+label3+';\n';
                        valor += label1 + ':\n';
                        valor += '\t if('+$$[$0][1]+'==1) goto '+label2+';\n';
                        valor += '\t goto '+label2+';\n';
                        valor += label2 + ':\n';
                        valor += '\t' + temp + '=1;\n';
                        valor += '\t goto '+label4+';\n';
                        valor += label3 + ':\n';
                        valor += '\t if('+$$[$0][1]+'==1) goto '+label2+';\n';
                        valor += '\t goto '+label5+';\n';
                        valor += label5 + ':\n';
                        valor += '\t' + temp + '=0;\n';
                        valor += '\t goto '+label4+';\n';
                        valor += label4 + ':\n';


                        r[0] = 'BOOLEAN';
                        r[1] = temp;
                        r[2] = label4;
                        r[3] = valor;
                        r[4] = '';
                        r[5] = '';
                        r[6] = Boolean($$[$0-2][6]) || Boolean($$[$0][6]);
                        this.$ = r;
                }
                else
                {
                    var n = tab.getPositionAmbito($$[$0][4]);
                    if(n!=null && n.tipo.toUpperCase() != 'STRING')
                    {
                        var valor = '';
                        var r = [];
                        valor += $$[$0-2][3];
                        valor += '\n';

                        var tempant = Temp.getTemporal();
                        var tempant1 = Temp.getTemporal();

                        valor += tempant +'='+n.position+';\n';
                        if(n.entorno == 'global')
                        {
                            valor += tempant1 +'=heap[(int)'+tempant+'];\n';
                        }
                        else
                        {
                            valor += tempant1 +'=stack[(int)'+tempant+'];\n';
                        }


                        var temp = Temp.getTemporal();
                        var label0 = Label.getBandera();
                        var label1 = Label.getBandera();
                        var label2 = Label.getBandera();
                        var label3 = Label.getBandera();
                        var label4 = Label.getBandera();
                        var label5 = Label.getBandera();

                        valor += label0 + ':\n';
                        valor += '\t if('+$$[$0-2][1]+'==1) goto '+label1+';\n';
                        valor += '\t goto '+label3+';\n';
                        valor += label1 + ':\n';
                        valor += '\t if('+tempant1+'==1) goto '+label2+';\n';
                        valor += '\t goto '+label2+';\n';
                        valor += label2 + ':\n';
                        valor += '\t' + temp + '=1;\n';
                        valor += '\t goto '+label4+';\n';
                        valor += label3 + ':\n';
                        valor += '\t if('+tempant1+'==1) goto '+label2+';\n';
                        valor += '\t goto '+label5+';\n';
                        valor += label5 + ':\n';
                        valor += '\t' + temp + '=0;\n';
                        valor += '\t goto '+label4+';\n';
                        valor += label4 + ':\n';


                        r[0] = 'BOOLEAN';
                        r[1] = temp;
                        r[2] = label4;
                        r[3] = valor;
                        r[4] = '';
                        r[5] = '';
                        r[6] = Boolean($$[$0-2][6]) || Boolean($$[$0][6]);
                        this.$ = r;
                    }
                    else
                    {
                        semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no existe la variable: ${$$[$0][4]} de tipo booleano`+'\"}');
                        this.$ = ['','','',''];
                    }
                }
            }
            else if($$[$0-2][0] == '')
            {
                var n = tab.getPositionAmbito($$[$0-2][4]);
                if(n!=null && n.tipo.toUpperCase() == 'BOOLEAN')
                {
                    if($$[$0][0] != '' )
                    {
                            var valor = '';
                            var r = [];
                            var tempant = Temp.getTemporal();
                            var tempant1 = Temp.getTemporal();

                            valor += tempant +'='+n.position+';\n';
                            if(n.entorno == 'global')
                            {
                                valor += tempant1 +'=heap[(int)'+tempant+'];\n';
                            }
                            else
                            {
                                valor += tempant1 +'=stack[(int)'+tempant+'];\n';
                            }

                            valor += $$[$0][3];
                            valor += '\n';

                            var temp = Temp.getTemporal();
                            var label0 = Label.getBandera();
                            var label1 = Label.getBandera();
                            var label2 = Label.getBandera();
                            var label3 = Label.getBandera();
                            var label4 = Label.getBandera();
                            var label5 = Label.getBandera();

                            valor += label0 + ':\n';
                            valor += '\t if('+tempant1+'==1) goto '+label1+';\n';
                            valor += '\t goto '+label3+';\n';
                            valor += label1 + ':\n';
                            valor += '\t if('+$$[$0][1]+'==1) goto '+label2+';\n';
                            valor += '\t goto '+label2+';\n';
                            valor += label2 + ':\n';
                            valor += '\t' + temp + '=1;\n';
                            valor += '\t goto '+label4+';\n';
                            valor += label3 + ':\n';
                            valor += '\t if('+$$[$0][1]+'==1) goto '+label2+';\n';
                            valor += '\t goto '+label5+';\n';
                            valor += label5 + ':\n';
                            valor += '\t' + temp + '=0;\n';
                            valor += '\t goto '+label4+';\n';
                            valor += label4 + ':\n';


                            r[0] = 'BOOLEAN';
                            r[1] = temp;
                            r[2] = label4;
                            r[3] = valor;
                            r[4] = '';
                            r[5] = '';
                            r[6] = Boolean($$[$0-2][6]) && Boolean($$[$0][6]);
                            this.$ = r;
                    }
                    else
                    {
                        var n1 = tab.getPositionAmbito($$[$0][4]);
                        if(n1!=null && n1.tipo.toUpperCase() != 'STRING')
                        {
                            var valor = '';
                            var r = [];
                            var tempant = Temp.getTemporal();
                            var tempant1 = Temp.getTemporal();

                            valor += tempant +'='+n.position+';\n';
                            if(n.entorno == 'global')
                            {
                                valor += tempant1 +'=heap[(int)'+tempant+'];\n';
                            }
                            else
                            {
                                valor += tempant1 +'=stack[(int)'+tempant+'];\n';
                            }


                            var tempant11 = Temp.getTemporal();
                            var tempant111 = Temp.getTemporal();

                            valor += tempant11 +'='+n1.position+';\n';
                            if(n1.entorno == 'global')
                            {
                                valor += tempant111 +'=heap[(int)'+tempant11+'];\n';
                            }
                            else
                            {
                                valor += tempant111 +'=stack[(int)'+tempant11+'];\n';
                            }


                            var temp = Temp.getTemporal();
                            var label0 = Label.getBandera();
                            var label1 = Label.getBandera();
                            var label2 = Label.getBandera();
                            var label3 = Label.getBandera();
                            var label4 = Label.getBandera();
                            var label5 = Label.getBandera();

                            valor += label0 + ':\n';
                            valor += '\t if('+tempant1+'==1) goto '+label1+';\n';
                            valor += '\t goto '+label3+';\n';
                            valor += label1 + ':\n';
                            valor += '\t if('+tempant11+'==1) goto '+label2+';\n';
                            valor += '\t goto '+label2+';\n';
                            valor += label2 + ':\n';
                            valor += '\t' + temp + '=1;\n';
                            valor += '\t goto '+label4+';\n';
                            valor += label3 + ':\n';
                            valor += '\t if('+tempant11+'==1) goto '+label2+';\n';
                            valor += '\t goto '+label5+';\n';
                            valor += label5 + ':\n';
                            valor += '\t' + temp + '=0;\n';
                            valor += '\t goto '+label4+';\n';
                            valor += label4 + ':\n';


                            r[0] = 'BOOLEAN';
                            r[1] = temp;
                            r[2] = label4;
                            r[3] = valor;
                            r[4] = '';
                            r[5] = '';
                            r[6] = Boolean($$[$0-2][6]) && Boolean($$[$0][6]);
                            this.$ = r;
                        }
                        else
                        {
                            semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no existe la variable: ${$$[$0][4]} de tipo booleano`+'\"}');
                            this.$ = ['','','',''];
                        }
                    }
                }
                else
                {
                    semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no existe la variable: ${$$[$0-2][4]} de tipo booleano`+'\"}');
                    this.$ = ['','','',''];
                }
            }
            else
            {
                semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no se puede ejecutar la operacion`+'\"}');
                this.$ = ['','','',''];
            }
        }
        else
        {
            semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no se puede ejecutar la operacion, unicamente variables de tipo BOOLEANO`+'\"}');
            this.$ = ['','','',''];
        }

break;
case 264:


        if($$[$0-4][0] != 'STRING')
        {
            if($$[$0-4][0]!= '')
            {
                var valor = '';
                var r = [];
                valor += $$[$0-4][3]+'\n';
                valor += $$[$0-2][3]+'\n';
                valor += $$[$0][3]+'\n';

                var temp = Temp.getTemporal();
                var label0 = Label.getBandera();
                var label1 = Label.getBandera();
                var label2 = Label.getBandera();
                var label3 = Label.getBandera();

                valor += label0 + ':\n';
                valor += '\t if('+$$[$0-4][1]+'==1) goto '+label1+';\n';
                valor += '\t goto '+label2+';\n';
                valor += label1 + ':\n';
                valor += '\t'+temp+'='+$$[$0-2][1]+';\n';
                valor += '\t goto '+label3+';\n';
                valor += label2 + ':\n';
                valor += '\t'+temp+'='+$$[$0][1]+';\n';
                valor += '\t goto '+label3+';\n';
                valor += label3 + ':\n';


                if($$[$0-4][6] == true)
                {
                    if(typeof $$[$0-2][6] == "string")
                    {
                        r[0] = 'STRING';
                        r[6] = $$[$0-2][6];
                        r[1] = $$[$0-2][1];
                    }
                    else if(typeof $$[$0-2][6] == "number")
                    {
                        r[0] = 'NUMBER';
                        r[6] = Number($$[$0-2][6]);
                        r[1] = temp;
                    }
                    else if(typeof $$[$0-2][6] == 'boolean')
                    {
                        r[0] = 'BOOLEAN';
                        r[6] = $$[$0-2][6];
                        r[1] = temp;
                    }
                    else if($$[$0-2][6] instanceof Array)
                    {
                        r[0] = 'ARREGLO';
                        r[6] = $$[$0-2][6];
                        r[1] = temp;
                    }
                }
                else
                {
                    if(typeof $$[$0][6] == "string")
                    {
                        r[0] = 'STRING';
                        r[6] = $$[$0][6];
                        r[1] = $$[$0][1];
                    }
                    else if(typeof $$[$0][6] == "number")
                    {
                        r[0] = 'NUMBER';
                        r[6] = Number($$[$0][6]);
                        r[1] = temp;
                    }
                    else if(typeof $$[$0][6] == "boolean")
                    {
                        r[0] = 'BOOLEAN';
                        r[6] = $$[$0][6];
                        r[1] = temp;
                    }
                    else if($$[$0][6] instanceof Array)
                    {
                        r[0] = 'ARREGLO';
                        r[6] = $$[$0][6];
                        r[1] = temp;
                    }
                }

                r[2] = label3;
                r[3] = valor;
                r[4] = '';
                r[5] = '';
                this.$ = r;
            }
            else if($$[$0-4][0] == '')
            {
                var n = tab.getPositionAmbito($$[$0-4][4]);
                if(n!=null && n.tipo.toUpperCase() == 'BOOLEAN')
                {

                    var valor = '';
                    var r = [];
                    var tempant = Temp.getTemporal();
                    var tempant1 = Temp.getTemporal();

                    valor += tempant +'='+n.position+';\n';
                    if(n.entorno == 'global')
                    {
                        valor += tempant1 +'=heap[(int)'+tempant+'];\n';
                    }
                    else
                    {
                        valor += tempant1 +'=stack[(int)'+tempant+'];\n';
                    }

                    valor += $$[$0-2][3]+'\n';
                    valor += $$[$0][3]+'\n';

                    var temp = Temp.getTemporal();
                    var label0 = Label.getBandera();
                    var label1 = Label.getBandera();
                    var label2 = Label.getBandera();
                    var label3 = Label.getBandera();

                    valor += label0 + ':\n';
                    valor += '\t if('+tempant1+'==1) goto '+label1+';\n';
                    valor += '\t goto '+label2+';\n';
                    valor += label1 + ':\n';
                    valor += '\t'+temp+'='+$$[$0-2][1]+';\n';
                    valor += '\t goto '+label3+';\n';
                    valor += label2 + ':\n';
                    valor += '\t'+temp+'='+$$[$0][1]+';\n';
                    valor += '\t goto '+label3+';\n';
                    valor += label3 + ':\n';

                    if($$[$0-4][6] == true)
                    {
                        if(typeof $$[$0-2][6] == "string")
                        {
                            r[0] = 'STRING';
                            r[6] = $$[$0-2][6];
                            r[1] = $$[$0-2][1];
                        }
                        else if(typeof $$[$0-2][6] == "number")
                        {
                            r[0] = 'NUMBER';
                            r[6] = Number($$[$0-2][6]);
                            r[1] = temp;
                        }
                        else if(typeof $$[$0-2][6] == "boolean")
                        {
                            r[0] = 'BOOLEAN';
                            r[6] = $$[$0-2][6];
                            r[1] = temp;
                        }
                        else if($$[$0-2][6] instanceof Array)
                        {
                            r[0] = 'ARREGLO';
                            r[6] = $$[$0-2][6];
                            r[1] = temp;
                        }
                    }
                    else
                    {
                        if(typeof $$[$0][6] == "string")
                        {
                            r[0] = 'STRING';
                            r[6] = $$[$0][6];
                            r[1] = $$[$0][1];
                        }
                        else if(typeof $$[$0][6] == "number")
                        {
                            r[0] = 'NUMBER';
                            r[6] = Number($$[$0][6]);
                            r[1] = temp;
                        }
                        else if(typeof $$[$0][6] == "boolean")
                        {
                            r[0] = 'BOOLEAN';
                            r[6] = $$[$0][6];
                            r[1] = temp;
                        }
                        else if($$[$0][6] instanceof Array)
                        {
                            r[0] = 'ARREGLO';
                            r[6] = $$[$0][6];
                            r[1] = temp;
                        }
                    }

                    r[2] = label3;
                    r[3] = valor;
                    r[4] = '';
                    r[5] = '';
                    this.$ = r;
                }
                else
                {
                    semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no existe la variable: ${$$[$0-4][4]} de tipo booleano`+'\"}');
                    this.$ = ['','','',''];
                }
            }
            else
            {
                semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no se puede ejecutar la operacion`+'\"}');
                this.$ = ['','','',''];
            }
        }
        else
        {
            semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no se puede ejecutar la operacion`+'\"}');
            this.$ = ['','','',''];
        }

break;
case 266:

        if($$[$0-4][0] != 'STRING')
        {
            if($$[$0-4][0]!= '' )
            {
                var valor = '';
                var r = [];
                valor += $$[$0-4][3]+'\n';
                valor += $$[$0-2][3]+'\n';
                valor += $$[$0][3]+'\n';


                var temp = Temp.getTemporal();
                var label0 = Label.getBandera();
                var label1 = Label.getBandera();
                var label2 = Label.getBandera();
                var label3 = Label.getBandera();

                valor += label0 + ':\n';
                valor += '\t if('+$$[$0-4][1]+'==1) goto '+label1+';\n';
                valor += '\t goto '+label2+';\n';
                valor += label1 + ':\n';
                valor += '\t'+temp+'='+$$[$0-2][1]+';\n';
                valor += '\t goto '+label3+';\n';
                valor += label2 + ':\n';
                valor += '\t'+temp+'='+$$[$0][1]+';\n';
                valor += '\t goto '+label3+';\n';
                valor += label3 + ':\n';


                if($$[$0-4][6] == true)
                {
                    if(typeof $$[$0-2][6] == "string")
                    {
                        r[0] = 'STRING';
                        r[6] = $$[$0-2][6];
                        r[1] = $$[$0-2][1];
                    }
                    else if(typeof $$[$0-2][6] == "number")
                    {
                        r[0] = 'NUMBER';
                        r[6] = Number($$[$0-2][6]);
                        r[1] = temp;
                    }
                    else if(typeof $$[$0-2][6] == "boolean")
                    {
                        r[0] = 'BOOLEAN';
                        r[6] = $$[$0-2][6];
                        r[1] = temp;
                    }
                    else if($$[$0-2][6] instanceof Array)
                    {
                        r[0] = 'ARREGLO';
                        r[6] = $$[$0-2][6];
                        r[1] = temp;
                    }
                }
                else
                {
                    if(typeof $$[$0][6] == "string")
                    {
                        r[0] = 'STRING';
                        r[6] = $$[$0][6];
                        r[1] = $$[$0][1];
                    }
                    else if(typeof $$[$0][6] == "number")
                    {
                        r[0] = 'NUMBER';
                        r[6] = Number($$[$0][6]);
                        r[1] = temp;
                    }
                    else if(typeof $$[$0][6] == "boolean")
                    {
                        r[0] = 'BOOLEAN';
                        r[6] = $$[$0][6];
                        r[1] = temp;
                    }
                    else if($$[$0][6] instanceof Array)
                    {
                        r[0] = 'ARREGLO';
                        r[6] = $$[$0][6];
                        r[1] = temp;
                    }
                }


                r[2] = label3;
                r[3] = valor;
                r[4] = '';
                r[5] = '';
                this.$ = r;
            }
            else if($$[$0-4][0] == '')
            {
                var n = tab.getPositionAmbito($$[$0-4][4]);
                if(n!=null && n.tipo.toUpperCase() == 'BOOLEAN')
                {

                    var valor = '';
                    var r = [];
                    var tempant = Temp.getTemporal();
                    var tempant1 = Temp.getTemporal();

                    valor += tempant +'='+n.position+';\n';
                    if(n.entorno == 'global')
                    {
                        valor += tempant1 +'=heap[(int)'+tempant+'];\n';
                    }
                    else
                    {
                        valor += tempant1 +'=stack[(int)'+tempant+'];\n';
                    }

                    valor += $$[$0-2][3]+'\n';
                    valor += $$[$0][3]+'\n';

                    var temp = Temp.getTemporal();
                    var label0 = Label.getBandera();
                    var label1 = Label.getBandera();
                    var label2 = Label.getBandera();
                    var label3 = Label.getBandera();

                    valor += label0 + ':\n';
                    valor += '\t if('+tempant1+'==1) goto '+label1+';\n';
                    valor += '\t goto '+label2+';\n';
                    valor += label1 + ':\n';
                    valor += '\t'+temp+'='+$$[$0-2][1]+';\n';
                    valor += '\t goto '+label3+';\n';
                    valor += label2 + ':\n';
                    valor += '\t'+temp+'='+$$[$0][1]+';\n';
                    valor += '\t goto '+label3+';\n';
                    valor += label3 + ':\n';


                    if($$[$0-4][6] == true)
                    {
                        if(typeof $$[$0-2][6] == "string")
                        {
                            r[0] = 'STRING';
                            r[6] = $$[$0-2][6];
                            r[1] = $$[$0-2][1];
                        }
                        else if(typeof $$[$0-2][6] == "number")
                        {
                            r[0] = 'NUMBER';
                            r[6] = Number($$[$0-2][6]);
                            r[1] = temp;
                        }
                        else if(typeof $$[$0-2][6] == "boolean")
                        {
                            r[0] = 'BOOLEAN';
                            r[6] = $$[$0-2][6];
                            r[1] = temp;
                        }
                        else if($$[$0-2][6] instanceof Array)
                        {
                            r[0] = 'ARREGLO';
                            r[6] = $$[$0-2][6];
                            r[1] = temp;
                        }
                    }
                    else
                    {
                        if(typeof $$[$0][6] == "string")
                        {
                            r[0] = 'STRING';
                            r[6] = $$[$0][6];
                            r[1] = $$[$0][1];
                        }
                        else if(typeof $$[$0][6] == "number")
                        {
                            r[0] = 'NUMBER';
                            r[6] = Number($$[$0][6]);
                            r[1] = temp;
                        }
                        else if(typeof $$[$0][6] == "boolean")
                        {
                            r[0] = 'BOOLEAN';
                            r[6] = $$[$0][6];
                            r[1] = temp;
                        }
                        else if($$[$0][6] instanceof Array)
                        {
                            r[0] = 'ARREGLO';
                            r[6] = $$[$0][6];
                            r[1] = temp;
                        }
                    }

                    r[2] = label3;
                    r[3] = valor;
                    r[4] = '';
                    r[5] = '';
                    this.$ = r;
                }
                else
                {
                    semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no existe la variable: ${$$[$0-4][4]} de tipo booleano`+'\"}');
                    this.$ = ['','','',''];
                }
            }
            else
            {
                semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no se puede ejecutar la operacion`+'\"}');
                this.$ = ['','','',''];
            }
        }
        else
        {
            semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no se puede ejecutar la operacion`+'\"}');
            this.$ = ['','','',''];
        }

break;
}
},
table: [{2:$V0,3:1,4:2,5:[1,3],6:4,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:$V1,20:$V2,28:$V3,31:$V4,36:20,37:18,49:$V5,54:$V6,55:$V7,56:$V8,57:$V9,66:$Va,68:$Vb,69:$Vc,70:$Vd,81:$Ve,82:$Vf,83:$Vg,84:$Vh,85:$Vi,86:$Vj,87:$Vk,88:$Vl,110:$Vm,111:$Vn},{1:[3]},{1:[2,1]},{1:[2,2]},{1:[2,3],2:$V0,4:43,5:[1,44],6:4,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:$V1,20:$V2,28:$V3,31:$V4,36:20,37:18,49:$V5,54:$V6,55:$V7,56:$V8,57:$V9,66:$Va,68:$Vb,69:$Vc,70:$Vd,81:$Ve,82:$Vf,83:$Vg,84:$Vh,85:$Vi,86:$Vj,87:$Vk,88:$Vl,110:$Vm,111:$Vn},o($Vo,[2,6]),o($Vo,[2,7]),o($Vo,[2,8]),o($Vo,[2,9]),o($Vo,[2,10]),o($Vo,[2,11]),o($Vo,[2,12]),o($Vo,[2,13]),o($Vo,[2,14]),o($Vo,[2,15]),o($Vo,[2,16]),o($Vo,[2,17]),o($Vp,[2,19],{19:[1,45]}),{31:[1,46]},{21:$Vq,31:$Vr,32:[1,47],91:$Vs,107:48,108:52,109:53,110:$Vt,111:$Vu},o($Vo,[2,29]),{31:[1,55]},{21:[1,56]},{2:$Vv,5:$Vw,7:61,8:62,10:63,11:64,12:65,13:66,14:67,15:68,16:69,17:70,18:71,19:$V1,20:$V2,28:$V3,29:[1,57],30:58,31:$V4,36:20,37:18,53:59,54:$V6,55:$V7,56:$V8,57:$V9,66:$Va,68:$Vb,69:$Vc,70:$Vd,81:$Ve,82:$Vf,83:$Vg,84:$Vh,85:$Vi,86:$Vj,87:$Vk,88:$Vl,110:$Vm,111:$Vn},{23:[1,73]},{2:$V0,6:74,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:$V1,20:$V2,28:$V3,31:$V4,36:20,37:18,49:$V5,54:$V6,55:$V7,56:$V8,57:$V9,66:$Va,68:$Vb,69:$Vc,70:$Vd,81:$Ve,82:$Vf,83:$Vg,84:$Vh,85:$Vi,86:$Vj,87:$Vk,88:$Vl,110:$Vm,111:$Vn},{23:[1,75]},{23:[1,76]},o([1,2,5,20,29,49,54,55,56,57,63,64,66,67,68,69,70,81,82,83,84,85,86,87,88],[2,82],{24:78,35:79,162:80,158:81,154:82,147:83,142:84,140:85,134:86,130:87,126:88,128:89,124:90,118:94,120:95,104:96,105:98,95:100,106:101,36:103,19:[1,77],23:$Vx,28:$Vy,31:$Vz,91:$VA,96:$VB,97:$VC,98:$VD,99:$VE,100:$VF,101:$VG,110:$Vm,111:$Vn,129:$VH,131:$VI,132:$VJ}),o($Vp,[2,80],{19:[1,111]}),o($Vp,[2,78],{19:[1,112]}),{23:[1,113]},o($Vo,[2,24]),o($VK,[2,116]),o($VK,[2,117]),o($VK,[2,118]),o($VK,[2,119]),o($VK,[2,120]),o($VK,[2,121]),o($VK,[2,122]),o($VK,[2,124]),{31:[1,114]},{31:[1,115]},{1:[2,4]},{1:[2,5]},o($Vo,[2,18]),o($Vo,[2,31],{32:[1,117],38:[1,116]}),{23:$Vx,28:$Vy,31:$Vz,33:[1,118],35:119,36:103,91:$VA,95:100,96:$VB,97:$VC,98:$VD,99:$VE,100:$VF,101:$VG,104:96,105:98,106:101,110:$Vm,111:$Vn,118:94,120:95,124:90,126:88,128:89,129:$VH,130:87,131:$VI,132:$VJ,134:86,140:85,142:84,147:83,154:82,158:81,162:80},o([1,2,5,19,20,25,28,29,31,38,49,54,55,56,57,63,64,66,67,68,69,70,76,81,82,83,84,85,86,87,88,92,129,131,135,136,137,138,143,144,148,149,150,151,155,159,163],[2,160],{109:53,108:124,21:[1,122],32:[1,123],91:$Vs,110:[1,120],111:[1,121]}),o($VL,[2,161]),o($VL,[2,162]),{31:$VM,112:[1,125],113:[1,126],114:[1,127],115:[1,128],116:[1,129]},o($VN,[2,156],{109:131,91:$Vs}),o($VO,[2,158]),{23:$Vx,24:132,28:$Vy,31:$Vz,35:79,36:103,91:$VA,95:100,96:$VB,97:$VC,98:$VD,99:$VE,100:$VF,101:$VG,104:96,105:98,106:101,110:$Vm,111:$Vn,118:94,120:95,124:90,126:88,128:89,129:$VH,130:87,131:$VI,132:$VJ,134:86,140:85,142:84,147:83,154:82,158:81,162:80},{23:[1,133]},{22:[1,134]},o($Vo,[2,25]),{29:[1,135]},o($VP,[2,62],{37:18,36:20,53:59,7:61,8:62,10:63,11:64,12:65,13:66,14:67,15:68,16:69,17:70,18:71,30:136,2:$Vv,5:$Vw,19:$V1,20:$V2,28:$V3,31:$V4,54:$V6,55:$V7,56:$V8,57:$V9,66:$Va,68:$Vb,69:$Vc,70:$Vd,81:$Ve,82:$Vf,83:$Vg,84:$Vh,85:$Vi,86:$Vj,87:$Vk,88:$Vl,110:$Vm,111:$Vn}),o($VP,[2,64]),o($VQ,[2,65]),o($VQ,[2,66]),o($VQ,[2,67]),o($VQ,[2,68]),o($VQ,[2,69]),o($VQ,[2,70]),o($VQ,[2,71]),o($VQ,[2,72]),o($VQ,[2,73]),o($VQ,[2,74]),o($VQ,[2,75]),o($VQ,[2,76]),{23:$Vx,24:137,28:$Vy,31:$Vz,35:79,36:103,91:$VA,95:100,96:$VB,97:$VC,98:$VD,99:$VE,100:$VF,101:$VG,104:96,105:98,106:101,110:$Vm,111:$Vn,118:94,120:95,124:90,126:88,128:89,129:$VH,130:87,131:$VI,132:$VJ,134:86,140:85,142:84,147:83,154:82,158:81,162:80},{69:[1,138]},{23:$Vx,24:139,28:$Vy,31:$Vz,35:79,36:103,91:$VA,95:100,96:$VB,97:$VC,98:$VD,99:$VE,100:$VF,101:$VG,104:96,105:98,106:101,110:$Vm,111:$Vn,118:94,120:95,124:90,126:88,128:89,129:$VH,130:87,131:$VI,132:$VJ,134:86,140:85,142:84,147:83,154:82,158:81,162:80},{31:$VR,37:141,40:140,81:$Ve,82:$Vf,83:$Vg,84:$Vh,85:$Vi,86:$Vj,87:$Vk,88:$Vl},o($Vo,[2,81]),o($Vp,[2,84],{19:[1,143],76:$VS}),o($VT,[2,107]),o($VL,[2,268]),o([1,2,5,19,20,21,25,28,29,31,38,49,54,55,56,57,63,64,66,67,68,69,70,76,81,82,83,84,85,86,87,88,92,110,111,129,131,135,136,137,138,143,144,148,149,150,151,155],[2,263],{159:[1,146],163:[1,145]}),o($VU,[2,257],{155:$VV}),o($VW,[2,251],{148:$VX,149:$VY,150:$VZ,151:$V_}),o($V$,[2,236],{143:$V01,144:$V11}),o($V21,[2,227],{129:$V31,131:$V41}),o($V51,[2,221],{135:$V61,136:$V71,137:$V81,138:$V91}),o($VL,[2,211]),o($VL,[2,207]),o($VL,[2,208]),o($VL,[2,202]),{23:$Vx,28:$Vy,31:$Vz,36:103,91:$VA,95:100,96:$VB,97:$VC,98:$VD,99:$VE,100:$VF,101:$VG,104:96,105:98,106:101,110:$Vm,111:$Vn,118:94,120:95,124:90,126:88,128:89,129:$VH,130:160,131:$VI,132:$VJ},{23:$Vx,28:$Vy,31:$Vz,36:103,91:$VA,95:100,96:$VB,97:$VC,98:$VD,99:$VE,100:$VF,101:$VG,104:96,105:98,106:101,110:$Vm,111:$Vn,118:94,120:95,124:90,126:88,128:89,129:$VH,130:161,131:$VI,132:$VJ},{23:$Vx,28:$Vy,31:$Vz,36:103,91:$VA,95:100,96:$VB,97:$VC,98:$VD,99:$VE,100:$VF,101:$VG,104:96,105:98,106:101,110:$Vm,111:$Vn,118:94,120:95,124:90,126:88,128:89,129:$VH,130:162,131:$VI,132:$VJ},o($Va1,[2,198],{21:[1,163]}),o($Va1,[2,199],{121:164,21:[1,165],23:[1,166]}),o($VL,[2,184]),o([1,2,5,19,20,23,25,28,29,31,38,49,54,55,56,57,63,64,66,67,68,69,70,76,81,82,83,84,85,86,87,88,92,129,131,135,136,137,138,143,144,148,149,150,151,155,159,163],[2,188],{107:48,108:52,109:53,21:$Vq,91:$Vs,110:$Vt,111:$Vu}),o($VL,[2,145]),{5:$Vb1,29:[1,167],31:$Vc1,102:169,103:168},o($VL,[2,148]),o($VL,[2,149]),{23:$Vx,24:172,28:$Vy,31:$Vz,35:79,36:103,91:$VA,95:100,96:$VB,97:$VC,98:$VD,99:$VE,100:$VF,101:$VG,104:96,105:98,106:101,110:$Vm,111:$Vn,118:94,120:95,124:90,126:88,128:89,129:$VH,130:87,131:$VI,132:$VJ,134:86,140:85,142:84,147:83,154:82,158:81,162:80},o($VL,[2,152]),o($VL,[2,134]),o($VL,[2,135]),o($VL,[2,136]),o($VL,[2,137]),o($VL,[2,138]),o($VL,[2,139]),{23:$Vx,28:$Vy,31:$Vz,35:175,36:103,91:$VA,92:[1,173],95:100,96:$VB,97:$VC,98:$VD,99:$VE,100:$VF,101:$VG,104:96,105:98,106:101,110:$Vm,111:$Vn,117:174,118:94,120:95,124:90,126:88,128:89,129:$VH,130:87,131:$VI,132:$VJ,134:86,140:85,142:84,147:83,154:82,158:81,162:80},o($Vo,[2,79]),o($Vo,[2,77]),{23:$Vx,24:176,28:$Vy,31:$Vz,35:79,36:103,91:$VA,95:100,96:$VB,97:$VC,98:$VD,99:$VE,100:$VF,101:$VG,104:96,105:98,106:101,110:$Vm,111:$Vn,118:94,120:95,124:90,126:88,128:89,129:$VH,130:87,131:$VI,132:$VJ,134:86,140:85,142:84,147:83,154:82,158:81,162:80},o($Va1,[2,163],{108:52,109:53,107:177,21:$Vd1,91:$Vs}),o($Va1,[2,164],{108:52,109:53,107:179,21:$Vd1,91:$Vs}),{31:$VR,37:180,81:$Ve,82:$Vf,83:$Vg,84:$Vh,85:$Vi,86:$Vj,87:$Vk,88:$Vl},{23:$Vx,28:$Vy,31:$Vz,33:[1,181],35:182,36:103,91:$VA,95:100,96:$VB,97:$VC,98:$VD,99:$VE,100:$VF,101:$VG,104:96,105:98,106:101,110:$Vm,111:$Vn,118:94,120:95,124:90,126:88,128:89,129:$VH,130:87,131:$VI,132:$VJ,134:86,140:85,142:84,147:83,154:82,158:81,162:80},{34:[1,183]},o($Vo,[2,28]),o($VL,[2,165]),o($VL,[2,166]),{31:$Ve1,112:[1,184],113:[1,185],114:[1,186],115:[1,187],116:[1,188]},{23:$Vx,28:$Vy,31:$Vz,35:190,36:103,91:$VA,95:100,96:$VB,97:$VC,98:$VD,99:$VE,100:$VF,101:$VG,104:96,105:98,106:101,110:$Vm,111:$Vn,118:94,120:95,124:90,126:88,128:89,129:$VH,130:87,131:$VI,132:$VJ,134:86,140:85,142:84,147:83,154:82,158:81,162:80},o($VN,[2,153],{109:131,91:$Vs}),{23:[1,191]},{23:[1,192]},o($VL,[2,171]),{23:[1,193]},{23:[1,194]},o($VO,[2,155]),o($VO,[2,157]),{76:$VS,92:[1,195]},{25:[1,196],31:$Vf1,50:197,79:198,80:199},{23:[1,201]},o($Vo,[2,26]),o($VP,[2,63]),{25:[1,202],76:$VS},{23:[1,203]},{25:[1,204],76:$VS},{19:[1,205]},{31:[1,206]},o([1,2,5,19,20,28,29,31,32,49,54,55,56,57,63,64,66,67,68,69,70,81,82,83,84,85,86,87,88,91,110,111],$Vr),o($Vo,[2,83]),{23:$Vx,28:$Vy,31:$Vz,35:207,36:103,91:$VA,95:100,96:$VB,97:$VC,98:$VD,99:$VE,100:$VF,101:$VG,104:96,105:98,106:101,110:$Vm,111:$Vn,118:94,120:95,124:90,126:88,128:89,129:$VH,130:87,131:$VI,132:$VJ,134:86,140:85,142:84,147:83,154:82,158:81,162:80},{23:$Vx,28:$Vy,31:$Vz,35:208,36:103,91:$VA,95:100,96:$VB,97:$VC,98:$VD,99:$VE,100:$VF,101:$VG,104:96,105:98,106:101,110:$Vm,111:$Vn,118:94,120:95,124:90,126:88,128:89,129:$VH,130:87,131:$VI,132:$VJ,134:86,140:85,142:84,147:83,154:82,158:81,162:80},{23:$Vx,28:$Vy,31:$Vz,36:103,91:$VA,95:100,96:$VB,97:$VC,98:$VD,99:$VE,100:$VF,101:$VG,104:96,105:98,106:101,110:$Vm,111:$Vn,118:94,120:95,124:90,126:88,128:89,129:$VH,130:87,131:$VI,132:$VJ,134:86,140:85,142:84,147:83,154:209},{23:$Vx,28:$Vy,31:$Vz,36:103,91:$VA,95:100,96:$VB,97:$VC,98:$VD,99:$VE,100:$VF,101:$VG,104:96,105:98,106:101,110:$Vm,111:$Vn,118:94,120:95,124:90,126:88,128:89,129:$VH,130:87,131:$VI,132:$VJ,134:86,140:85,142:84,147:210},{23:$Vx,28:$Vy,31:$Vz,36:103,91:$VA,95:100,96:$VB,97:$VC,98:$VD,99:$VE,100:$VF,101:$VG,104:96,105:98,106:101,110:$Vm,111:$Vn,118:94,120:95,124:90,126:88,128:89,129:$VH,130:87,131:$VI,132:$VJ,134:86,140:85,142:211},{23:$Vx,28:$Vy,31:$Vz,36:103,91:$VA,95:100,96:$VB,97:$VC,98:$VD,99:$VE,100:$VF,101:$VG,104:96,105:98,106:101,110:$Vm,111:$Vn,118:94,120:95,124:90,126:88,128:89,129:$VH,130:87,131:$VI,132:$VJ,134:86,140:85,142:212},{23:$Vx,28:$Vy,31:$Vz,36:103,91:$VA,95:100,96:$VB,97:$VC,98:$VD,99:$VE,100:$VF,101:$VG,104:96,105:98,106:101,110:$Vm,111:$Vn,118:94,120:95,124:90,126:88,128:89,129:$VH,130:87,131:$VI,132:$VJ,134:86,140:85,142:213},{23:$Vx,28:$Vy,31:$Vz,36:103,91:$VA,95:100,96:$VB,97:$VC,98:$VD,99:$VE,100:$VF,101:$VG,104:96,105:98,106:101,110:$Vm,111:$Vn,118:94,120:95,124:90,126:88,128:89,129:$VH,130:87,131:$VI,132:$VJ,134:86,140:85,142:214},{23:$Vx,28:$Vy,31:$Vz,36:103,91:$VA,95:100,96:$VB,97:$VC,98:$VD,99:$VE,100:$VF,101:$VG,104:96,105:98,106:101,110:$Vm,111:$Vn,118:94,120:95,124:90,126:88,128:89,129:$VH,130:87,131:$VI,132:$VJ,134:86,140:215},{23:$Vx,28:$Vy,31:$Vz,36:103,91:$VA,95:100,96:$VB,97:$VC,98:$VD,99:$VE,100:$VF,101:$VG,104:96,105:98,106:101,110:$Vm,111:$Vn,118:94,120:95,124:90,126:88,128:89,129:$VH,130:87,131:$VI,132:$VJ,134:86,140:216},{23:$Vx,28:$Vy,31:$Vz,36:103,91:$VA,95:100,96:$VB,97:$VC,98:$VD,99:$VE,100:$VF,101:$VG,104:96,105:98,106:101,110:$Vm,111:$Vn,118:94,120:95,124:90,126:88,128:89,129:$VH,130:87,131:$VI,132:$VJ,134:217},{23:$Vx,28:$Vy,31:$Vz,36:103,91:$VA,95:100,96:$VB,97:$VC,98:$VD,99:$VE,100:$VF,101:$VG,104:96,105:98,106:101,110:$Vm,111:$Vn,118:94,120:95,124:90,126:88,128:89,129:$VH,130:87,131:$VI,132:$VJ,134:218},{23:$Vx,28:$Vy,31:$Vz,36:103,91:$VA,95:100,96:$VB,97:$VC,98:$VD,99:$VE,100:$VF,101:$VG,104:96,105:98,106:101,110:$Vm,111:$Vn,118:94,120:95,124:90,126:88,128:89,129:$VH,130:219,131:$VI,132:$VJ},{23:$Vx,28:$Vy,31:$Vz,36:103,91:$VA,95:100,96:$VB,97:$VC,98:$VD,99:$VE,100:$VF,101:$VG,104:96,105:98,106:101,110:$Vm,111:$Vn,118:94,120:95,124:90,126:88,128:89,129:$VH,130:220,131:$VI,132:$VJ},{23:$Vx,28:$Vy,31:$Vz,36:103,91:$VA,95:100,96:$VB,97:$VC,98:$VD,99:$VE,100:$VF,101:$VG,104:96,105:98,106:101,110:$Vm,111:$Vn,118:94,120:95,124:90,126:88,128:89,129:$VH,130:221,131:$VI,132:$VJ},{23:$Vx,28:$Vy,31:$Vz,36:103,91:$VA,95:100,96:$VB,97:$VC,98:$VD,99:$VE,100:$VF,101:$VG,104:96,105:98,106:101,110:$Vm,111:$Vn,118:94,120:95,124:90,126:88,128:89,129:$VH,130:222,131:$VI,132:$VJ},o($VL,[2,204]),o($VL,[2,205]),o($VL,[2,206]),{31:[1,223]},o($Vg1,[2,189]),{31:[1,224]},{23:$Vx,25:[1,225],28:$Vy,31:$Vz,35:227,36:103,91:$VA,95:100,96:$VB,97:$VC,98:$VD,99:$VE,100:$VF,101:$VG,104:96,105:98,106:101,110:$Vm,111:$Vn,118:94,120:95,123:226,124:90,126:88,128:89,129:$VH,130:87,131:$VI,132:$VJ,134:86,140:85,142:84,147:83,154:82,158:81,162:80},o($VL,[2,146]),{29:[1,228]},{29:[2,143],76:[1,229]},{38:[1,230]},o($Vh1,[2,142]),{25:[1,231],76:$VS},o($VL,[2,180]),{76:[1,233],92:[1,232]},o($Vi1,[2,182]),{25:[1,234],76:$VS},o($Va1,[2,167],{109:53,108:124,21:$Vj1,91:$Vs}),{31:$VM},o($Va1,[2,168],{109:53,108:124,21:$Vj1,91:$Vs}),o($Vo,[2,30],{39:236,32:[1,237],91:[1,238]}),{34:[1,239]},o($Vo,[2,36]),{23:[1,240]},{23:[1,241]},{23:[1,242]},o($VL,[2,176]),{23:[1,243]},{23:[1,244]},o($VO,[2,154]),o($VL,[2,179]),{25:[1,245]},{25:[1,246]},{23:$Vx,24:247,28:$Vy,31:$Vz,35:79,36:103,91:$VA,95:100,96:$VB,97:$VC,98:$VD,99:$VE,100:$VF,101:$VG,104:96,105:98,106:101,110:$Vm,111:$Vn,118:94,120:95,124:90,126:88,128:89,129:$VH,130:87,131:$VI,132:$VJ,134:86,140:85,142:84,147:83,154:82,158:81,162:80},{23:$Vx,24:248,28:$Vy,31:$Vz,35:79,36:103,91:$VA,95:100,96:$VB,97:$VC,98:$VD,99:$VE,100:$VF,101:$VG,104:96,105:98,106:101,110:$Vm,111:$Vn,118:94,120:95,124:90,126:88,128:89,129:$VH,130:87,131:$VI,132:$VJ,134:86,140:85,142:84,147:83,154:82,158:81,162:80},o($VO,[2,159]),{28:[1,249],38:[1,250]},{25:[1,251]},{25:[2,111],76:[1,252]},o($Vk1,[2,113]),o($Vk1,[2,115],{38:[1,253]}),{23:$Vx,24:254,28:$Vy,31:$Vz,35:79,36:103,91:$VA,95:100,96:$VB,97:$VC,98:$VD,99:$VE,100:$VF,101:$VG,104:96,105:98,106:101,110:$Vm,111:$Vn,118:94,120:95,124:90,126:88,128:89,129:$VH,130:87,131:$VI,132:$VJ,134:86,140:85,142:84,147:83,154:82,158:81,162:80},{2:$V0,6:255,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:$V1,20:$V2,28:$V3,31:$V4,36:20,37:18,49:$V5,54:$V6,55:$V7,56:$V8,57:$V9,66:$Va,68:$Vb,69:$Vc,70:$Vd,81:$Ve,82:$Vf,83:$Vg,84:$Vh,85:$Vi,86:$Vj,87:$Vk,88:$Vl,110:$Vm,111:$Vn},{23:$Vx,24:256,28:$Vy,31:$Vz,35:79,36:103,91:$VA,95:100,96:$VB,97:$VC,98:$VD,99:$VE,100:$VF,101:$VG,104:96,105:98,106:101,110:$Vm,111:$Vn,118:94,120:95,124:90,126:88,128:89,129:$VH,130:87,131:$VI,132:$VJ,134:86,140:85,142:84,147:83,154:82,158:81,162:80},{2:$V0,6:257,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:$V1,20:$V2,28:$V3,31:$V4,36:20,37:18,49:$V5,54:$V6,55:$V7,56:$V8,57:$V9,66:$Va,68:$Vb,69:$Vc,70:$Vd,81:$Ve,82:$Vf,83:$Vg,84:$Vh,85:$Vi,86:$Vj,87:$Vk,88:$Vl,110:$Vm,111:$Vn},{23:$Vx,24:259,28:$Vy,31:$Vz,35:79,36:103,71:258,91:$VA,95:100,96:$VB,97:$VC,98:$VD,99:$VE,100:$VF,101:$VG,104:96,105:98,106:101,110:$Vm,111:$Vn,118:94,120:95,124:90,126:88,128:89,129:$VH,130:87,131:$VI,132:$VJ,134:86,140:85,142:84,147:83,154:82,158:81,162:80},{32:[1,262],72:[1,260],73:[1,261]},o($VT,[2,108]),{38:[1,263]},o($VU,[2,258],{155:$VV}),o($VW,[2,252],{148:$VX,149:$VY,150:$VZ,151:$V_}),o($V$,[2,237],{143:$V01,144:$V11}),o($V$,[2,238],{143:$V01,144:$V11}),o($V$,[2,239],{143:$V01,144:$V11}),o($V$,[2,240],{143:$V01,144:$V11}),o($V21,[2,228],{129:$V31,131:$V41}),o($V21,[2,229],{129:$V31,131:$V41}),o($V51,[2,222],{135:$V61,136:$V71,137:$V81,138:$V91}),o($V51,[2,223],{135:$V61,136:$V71,137:$V81,138:$V91}),o($VL,[2,212]),o($VL,[2,213]),o($VL,[2,214]),o($VL,[2,215]),o($VL,[2,185]),o($Vg1,[2,190]),o($Vg1,[2,194]),{25:[1,264],76:[1,265]},o($Vk1,[2,196]),o($VL,[2,147]),{5:$Vb1,31:$Vc1,102:169,103:266},{23:$Vx,28:$Vy,31:[1,269],35:267,36:103,37:268,81:$Ve,82:$Vf,83:$Vg,84:$Vh,85:$Vi,86:$Vj,87:$Vk,88:$Vl,91:$VA,95:100,96:$VB,97:$VC,98:$VD,99:$VE,100:$VF,101:$VG,104:96,105:98,106:101,110:$Vm,111:$Vn,118:94,120:95,124:90,126:88,128:89,129:$VH,130:87,131:$VI,132:$VJ,134:86,140:85,142:84,147:83,154:82,158:81,162:80},o($VL,[2,151]),o($VL,[2,181]),{23:$Vx,28:$Vy,31:$Vz,35:270,36:103,91:$VA,95:100,96:$VB,97:$VC,98:$VD,99:$VE,100:$VF,101:$VG,104:96,105:98,106:101,110:$Vm,111:$Vn,118:94,120:95,124:90,126:88,128:89,129:$VH,130:87,131:$VI,132:$VJ,134:86,140:85,142:84,147:83,154:82,158:81,162:80},{28:[1,272],58:271},{31:$Ve1},{32:[1,273]},{23:$Vx,28:$Vy,31:$Vz,35:274,36:103,91:$VA,95:100,96:$VB,97:$VC,98:$VD,99:$VE,100:$VF,101:$VG,104:96,105:98,106:101,110:$Vm,111:$Vn,118:94,120:95,124:90,126:88,128:89,129:$VH,130:87,131:$VI,132:$VJ,134:86,140:85,142:84,147:83,154:82,158:81,162:80},{92:[1,275]},{23:[1,276]},{23:$Vx,24:277,28:$Vy,31:$Vz,35:79,36:103,91:$VA,95:100,96:$VB,97:$VC,98:$VD,99:$VE,100:$VF,101:$VG,104:96,105:98,106:101,110:$Vm,111:$Vn,118:94,120:95,124:90,126:88,128:89,129:$VH,130:87,131:$VI,132:$VJ,134:86,140:85,142:84,147:83,154:82,158:81,162:80},{25:[1,278]},{25:[1,279]},{23:$Vx,24:280,28:$Vy,31:$Vz,35:79,36:103,91:$VA,95:100,96:$VB,97:$VC,98:$VD,99:$VE,100:$VF,101:$VG,104:96,105:98,106:101,110:$Vm,111:$Vn,118:94,120:95,124:90,126:88,128:89,129:$VH,130:87,131:$VI,132:$VJ,134:86,140:85,142:84,147:83,154:82,158:81,162:80},{23:$Vx,24:281,28:$Vy,31:$Vz,35:79,36:103,91:$VA,95:100,96:$VB,97:$VC,98:$VD,99:$VE,100:$VF,101:$VG,104:96,105:98,106:101,110:$Vm,111:$Vn,118:94,120:95,124:90,126:88,128:89,129:$VH,130:87,131:$VI,132:$VJ,134:86,140:85,142:84,147:83,154:82,158:81,162:80},o($VL,[2,169]),o($VL,[2,170]),{25:[1,282],76:$VS},{25:[1,283],76:$VS},{2:$Vv,5:$Vw,7:61,8:62,10:63,11:64,12:65,13:66,14:67,15:68,16:69,17:70,18:71,19:$V1,20:$V2,28:$V3,29:[1,285],30:284,31:$V4,36:20,37:18,53:59,54:$V6,55:$V7,56:$V8,57:$V9,66:$Va,68:$Vb,69:$Vc,70:$Vd,81:$Ve,82:$Vf,83:$Vg,84:$Vh,85:$Vi,86:$Vj,87:$Vk,88:$Vl,110:$Vm,111:$Vn},{51:[1,286]},{28:[1,287],38:[1,288]},{31:$Vf1,80:289},{51:[1,290]},{25:[1,291],76:$VS},o([1,2,5,19,20,28,29,31,49,54,55,56,57,63,64,66,68,69,70,81,82,83,84,85,86,87,88,110,111],[2,98],{67:[1,292]}),{25:[1,293],76:$VS},o($Vo,[2,101]),{19:[1,294]},o([19,25],[2,105],{76:$VS}),{23:$Vx,24:295,28:$Vy,31:$Vz,35:79,36:103,91:$VA,95:100,96:$VB,97:$VC,98:$VD,99:$VE,100:$VF,101:$VG,104:96,105:98,106:101,110:$Vm,111:$Vn,118:94,120:95,124:90,126:88,128:89,129:$VH,130:87,131:$VI,132:$VJ,134:86,140:85,142:84,147:83,154:82,158:81,162:80},{23:$Vx,24:296,28:$Vy,31:$Vz,35:79,36:103,91:$VA,95:100,96:$VB,97:$VC,98:$VD,99:$VE,100:$VF,101:$VG,104:96,105:98,106:101,110:$Vm,111:$Vn,118:94,120:95,124:90,126:88,128:89,129:$VH,130:87,131:$VI,132:$VJ,134:86,140:85,142:84,147:83,154:82,158:81,162:80},{23:$Vx,28:$Vy,31:$Vz,35:297,36:103,91:$VA,95:100,96:$VB,97:$VC,98:$VD,99:$VE,100:$VF,101:$VG,104:96,105:98,106:101,110:$Vm,111:$Vn,118:94,120:95,124:90,126:88,128:89,129:$VH,130:87,131:$VI,132:$VJ,134:86,140:85,142:84,147:83,154:82,158:81,162:80},{23:$Vx,28:$Vy,31:$Vz,35:298,36:103,91:$VA,95:100,96:$VB,97:$VC,98:$VD,99:$VE,100:$VF,101:$VG,104:96,105:98,106:101,110:$Vm,111:$Vn,118:94,120:95,124:90,126:88,128:89,129:$VH,130:87,131:$VI,132:$VJ,134:86,140:85,142:84,147:83,154:82,158:81,162:80},o($Vg1,[2,195]),{23:$Vx,28:$Vy,31:$Vz,35:299,36:103,91:$VA,95:100,96:$VB,97:$VC,98:$VD,99:$VE,100:$VF,101:$VG,104:96,105:98,106:101,110:$Vm,111:$Vn,118:94,120:95,124:90,126:88,128:89,129:$VH,130:87,131:$VI,132:$VJ,134:86,140:85,142:84,147:83,154:82,158:81,162:80},{29:[2,144]},o($Vh1,[2,140]),o($Vh1,[2,141]),o([23,29,76,129,131,135,136,137,138,143,144,148,149,150,151,155,159,163],$Vr,{107:48,108:52,109:53,21:$Vq,91:$Vs,110:$Vt,111:$Vu}),o($Vi1,[2,183]),o($Vo,[2,85]),{29:[2,87],59:300,60:301,62:302,63:$Vl1,64:$Vm1},{23:$Vx,28:$Vy,31:$Vz,33:[1,306],35:305,36:103,91:$VA,95:100,96:$VB,97:$VC,98:$VD,99:$VE,100:$VF,101:$VG,104:96,105:98,106:101,110:$Vm,111:$Vn,118:94,120:95,124:90,126:88,128:89,129:$VH,130:87,131:$VI,132:$VJ,134:86,140:85,142:84,147:83,154:82,158:81,162:80},o($Vo,[2,35]),{32:[2,130]},{23:$Vx,24:307,28:$Vy,31:$Vz,35:79,36:103,91:$VA,95:100,96:$VB,97:$VC,98:$VD,99:$VE,100:$VF,101:$VG,104:96,105:98,106:101,110:$Vm,111:$Vn,118:94,120:95,124:90,126:88,128:89,129:$VH,130:87,131:$VI,132:$VJ,134:86,140:85,142:84,147:83,154:82,158:81,162:80},{25:[1,308],76:$VS},o($VL,[2,174]),o($VL,[2,175]),{25:[1,309],76:$VS},{25:[1,310],76:$VS},o($VL,[2,172]),o($VL,[2,173]),{29:[1,311]},o($Vo,[2,50]),{28:[1,312]},{2:$Vv,5:$Vw,7:61,8:62,10:63,11:64,12:65,13:66,14:67,15:68,16:69,17:70,18:71,19:$V1,20:$V2,28:$V3,29:[1,314],30:313,31:$V4,36:20,37:18,53:59,54:$V6,55:$V7,56:$V8,57:$V9,66:$Va,68:$Vb,69:$Vc,70:$Vd,81:$Ve,82:$Vf,83:$Vg,84:$Vh,85:$Vi,86:$Vj,87:$Vk,88:$Vl,110:$Vm,111:$Vn},{51:[1,315]},o($Vk1,[2,112]),o($Vk1,[2,114]),o($Vp,[2,21],{19:[1,316]}),{2:$V0,6:317,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:$V1,20:$V2,28:$V3,31:$V4,36:20,37:18,49:$V5,54:$V6,55:$V7,56:$V8,57:$V9,66:$Va,68:$Vb,69:$Vc,70:$Vd,81:$Ve,82:$Vf,83:$Vg,84:$Vh,85:$Vi,86:$Vj,87:$Vk,88:$Vl,110:$Vm,111:$Vn},o($Vo,[2,100]),{23:$Vx,24:259,28:$Vy,31:$Vz,35:79,36:103,71:318,91:$VA,95:100,96:$VB,97:$VC,98:$VD,99:$VE,100:$VF,101:$VG,104:96,105:98,106:101,110:$Vm,111:$Vn,118:94,120:95,124:90,126:88,128:89,129:$VH,130:87,131:$VI,132:$VJ,134:86,140:85,142:84,147:83,154:82,158:81,162:80},{25:[1,319],76:$VS},{25:[1,320],76:$VS},{19:[2,37]},o($VL,[2,264]),o($Vk1,[2,197]),{29:[1,321]},{29:[2,88]},{29:[2,91],60:322,62:302,63:$Vl1,64:$Vm1},{23:$Vx,24:323,28:$Vy,31:$Vz,35:79,36:103,91:$VA,95:100,96:$VB,97:$VC,98:$VD,99:$VE,100:$VF,101:$VG,104:96,105:98,106:101,110:$Vm,111:$Vn,118:94,120:95,124:90,126:88,128:89,129:$VH,130:87,131:$VI,132:$VJ,134:86,140:85,142:84,147:83,154:82,158:81,162:80},{38:[1,324]},o($Vo,[2,32]),{34:[1,325]},{25:[1,326],76:$VS},o($Vo,[2,27]),o($VL,[2,177]),o($VL,[2,178]),o($Vo,[2,46]),{2:$Vv,5:$Vw,7:61,8:62,10:63,11:64,12:65,13:66,14:67,15:68,16:69,17:70,18:71,19:$V1,20:$V2,28:$V3,29:[1,328],30:327,31:$V4,36:20,37:18,53:59,54:$V6,55:$V7,56:$V8,57:$V9,66:$Va,68:$Vb,69:$Vc,70:$Vd,81:$Ve,82:$Vf,83:$Vg,84:$Vh,85:$Vi,86:$Vj,87:$Vk,88:$Vl,110:$Vm,111:$Vn},{29:[1,329]},o($Vo,[2,51]),{28:[1,330]},o($Vo,[2,20]),o($Vo,[2,99]),{25:[1,331]},{2:$V0,6:332,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:$V1,20:$V2,28:$V3,31:$V4,36:20,37:18,49:$V5,54:$V6,55:$V7,56:$V8,57:$V9,66:$Va,68:$Vb,69:$Vc,70:$Vd,81:$Ve,82:$Vf,83:$Vg,84:$Vh,85:$Vi,86:$Vj,87:$Vk,88:$Vl,110:$Vm,111:$Vn},{2:$V0,6:333,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:$V1,20:$V2,28:$V3,31:$V4,36:20,37:18,49:$V5,54:$V6,55:$V7,56:$V8,57:$V9,66:$Va,68:$Vb,69:$Vc,70:$Vd,81:$Ve,82:$Vf,83:$Vg,84:$Vh,85:$Vi,86:$Vj,87:$Vk,88:$Vl,110:$Vm,111:$Vn},o($Vo,[2,86]),{29:[2,90]},{38:[1,334],76:$VS},o($VP,[2,94],{37:18,36:20,53:59,7:61,8:62,10:63,11:64,12:65,13:66,14:67,15:68,16:69,17:70,18:71,30:335,2:$Vv,5:$Vw,19:$V1,20:$V2,28:$V3,31:$V4,54:$V6,55:$V7,56:$V8,57:$V9,66:$Va,68:$Vb,69:$Vc,70:$Vd,81:$Ve,82:$Vf,83:$Vg,84:$Vh,85:$Vi,86:$Vj,87:$Vk,88:$Vl,110:$Vm,111:$Vn}),{23:[1,336]},o($Vo,[2,34]),{29:[1,337]},o($Vo,[2,52]),o($Vo,[2,47]),{2:$Vv,5:$Vw,7:61,8:62,10:63,11:64,12:65,13:66,14:67,15:68,16:69,17:70,18:71,19:$V1,20:$V2,28:$V3,29:[1,339],30:338,31:$V4,36:20,37:18,53:59,54:$V6,55:$V7,56:$V8,57:$V9,66:$Va,68:$Vb,69:$Vc,70:$Vd,81:$Ve,82:$Vf,83:$Vg,84:$Vh,85:$Vi,86:$Vj,87:$Vk,88:$Vl,110:$Vm,111:$Vn},{2:$V0,6:340,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:$V1,20:$V2,28:$V3,31:$V4,36:20,37:18,49:$V5,54:$V6,55:$V7,56:$V8,57:$V9,66:$Va,68:$Vb,69:$Vc,70:$Vd,81:$Ve,82:$Vf,83:$Vg,84:$Vh,85:$Vi,86:$Vj,87:$Vk,88:$Vl,110:$Vm,111:$Vn},o($Vo,[2,103]),o($Vo,[2,104]),o($VP,[2,92],{37:18,36:20,53:59,7:61,8:62,10:63,11:64,12:65,13:66,14:67,15:68,16:69,17:70,18:71,30:341,2:$Vv,5:$Vw,19:$V1,20:$V2,28:$V3,31:$V4,54:$V6,55:$V7,56:$V8,57:$V9,66:$Va,68:$Vb,69:$Vc,70:$Vd,81:$Ve,82:$Vf,83:$Vg,84:$Vh,85:$Vi,86:$Vj,87:$Vk,88:$Vl,110:$Vm,111:$Vn}),o($VP,[2,95]),{23:$Vx,24:342,28:$Vy,31:$Vz,35:79,36:103,91:$VA,95:100,96:$VB,97:$VC,98:$VD,99:$VE,100:$VF,101:$VG,104:96,105:98,106:101,110:$Vm,111:$Vn,118:94,120:95,124:90,126:88,128:89,129:$VH,130:87,131:$VI,132:$VJ,134:86,140:85,142:84,147:83,154:82,158:81,162:80},o($Vo,[2,48]),{29:[1,343]},o($Vo,[2,53]),o($Vo,[2,102]),o($VP,[2,93]),{25:[1,344],76:$VS},o($Vo,[2,49]),o($Vo,[2,33])],
defaultActions: {2:[2,1],3:[2,2],43:[2,4],44:[2,5],266:[2,144],275:[2,130],297:[2,37],301:[2,88],322:[2,90]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    var lexicos = [];
    var sintacticos = [];
    var semanticos = [];
    var errores = [];
    var ast = [];
    var intermedia = require('./TS.js');
    var tab = new intermedia.TablaSimbolos();
    var Temp = new intermedia.temporal();
    var Label = new intermedia.bandera();
    var arr = new intermedia.Arreglos();
    var ff = [];
    var pos = 0;
    var stac = 0;
    var posS = 0;
    var C3D = '';
    var posS = 50000;
    var posA = 1000000;
    var entorno = 'global';
    var entornoanterior = 'global';
    var func = false;
    var ifs = false;
    var whiles = false;
    var fores = false;
    var does = false;
    var switches = false;
    var breaks = '';
    var continues = '';
    var returns = '';

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* ignore comment*/
break;
case 1:"*/"               /* ignore c-style comment*/
break;
case 2:/* skip whitespace */
break;
case 3:/* skip retorno de carro */
break;
case 4:/* skip salto linea */
break;
case 5:/* skip tabulacion */
break;
case 6:return 96
break;
case 7:return 97
break;
case 8:return 98
break;
case 9:return 86
break;
case 10:return 88
break;
case 11:return 85
break;
case 12:return 82
break;
case 13:return 83
break;
case 14:return 81
break;
case 15:return 84
break;
case 16:return 87
break;
case 17:return 34
break;
case 18:return 33
break;
case 19:return 20
break;
case 20:return 22
break;
case 21:return 55
break;
case 22:return 54
break;
case 23:return 64
break;
case 24:return 63
break;
case 25:return 57
break;
case 26:return 49
break;
case 27:return 66
break;
case 28:return 68
break;
case 29:return 69
break;
case 30:return 67
break;
case 31:return 70
break;
case 32:return 73
break;
case 33:return 72
break;
case 34:return 56
break;
case 35:return 114
break;
case 36:return 116
break;
case 37:return 113
break;
case 38:return 112
break;
case 39:return 115
break;
case 40:return 43
break;
case 41:return 44
break;
case 42:return 46
break;
case 43:return 45
break;
case 44:return 47
break;
case 45:return 48
break;
case 46:return 148
break;
case 47:return 149
break;
case 48:return 150
break;
case 49:return 151
break;
case 50:return 144
break;
case 51:return 143
break;
case 52:return 159
break;
case 53:return 155
break;
case 54:return 132
break;
case 55:return 110
break;
case 56:return 111
break;
case 57:return 137
break;
case 58:return 129
break;
case 59:return 131
break;
case 60:return 135
break;
case 61:return 136
break;
case 62:return 138
break;
case 63:return 31
break;
case 64:return 99;
break;
case 65: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 100;
break;
case 66: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 101;
break;
case 67:return 32
break;
case 68:return 19
break;
case 69:return 38
break;
case 70:return 76
break;
case 71:return 21
break;
case 72:return 23
break;
case 73:return 25
break;
case 74:return 91
break;
case 75:return 92
break;
case 76:return 28
break;
case 77:return 29
break;
case 78:return 163
break;
case 79:return 5;
break;
case 80:
                                   console.error('Error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column+';');
                                   lexicos.push('{\"token\":\"' + yy_.yytext + '\", \"linea\": \"' + yy_.yylloc.first_line + '\", \"columna\": \"' + yy_.yylloc.first_column+'\"}');

break;
}
},
rules: [/^(?:\/\/.*)/,/^(?:\/\*[^"*\/"]*)/,/^(?:\s+)/,/^(?:\\r)/,/^(?:\\n)/,/^(?:\\t)/,/^(?:null\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:const\b)/,/^(?:let\b)/,/^(?:var\b)/,/^(?:number\b)/,/^(?:boolean\b)/,/^(?:string\b)/,/^(?:void\b)/,/^(?:type\b)/,/^(?:Array\b)/,/^(?:new\b)/,/^(?:console\b)/,/^(?:log\b)/,/^(?:break\b)/,/^(?:continue\b)/,/^(?:default\b)/,/^(?:case\b)/,/^(?:switch\b)/,/^(?:function\b)/,/^(?:if\b)/,/^(?:Do\b)/,/^(?:While\b)/,/^(?:else\b)/,/^(?:for\b)/,/^(?:of\b)/,/^(?:in\b)/,/^(?:return\b)/,/^(?:length\b)/,/^(?:CharAt\b)/,/^(?:ToLowerCase\b)/,/^(?:ToUpperCase\b)/,/^(?:Concat\b)/,/^(?:\+=)/,/^(?:-=)/,/^(?:\/=)/,/^(?:\*=)/,/^(?:\^=)/,/^(?:%=)/,/^(?:==)/,/^(?:!=)/,/^(?:>=)/,/^(?:<=)/,/^(?:>)/,/^(?:<)/,/^(?:\|\|)/,/^(?:&&)/,/^(?:!)/,/^(?:\+\+)/,/^(?:--)/,/^(?:\*\*)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:[a-zA-Z_\$][a-zA-Z0-9_\$]*)/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:"[^\"]*")/,/^(?:'[^\']*')/,/^(?:=)/,/^(?:;)/,/^(?::)/,/^(?:,)/,/^(?:\.)/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?:\{)/,/^(?:\})/,/^(?:\?)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
module.exports.parser = WE_C3D;
module.exports.Parser = WE_C3D.Parser;
module.exports.parse = function () { return WE_C3D.parse.apply(WE_C3D, arguments); };
module.exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return module.exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  module.exports.main(process.argv.slice(1));
}
}
