/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var WE_C3D = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,17],$V1=[1,22],$V2=[1,32],$V3=[1,23],$V4=[1,19],$V5=[1,21],$V6=[1,30],$V7=[1,29],$V8=[1,28],$V9=[1,31],$Va=[1,24],$Vb=[1,25],$Vc=[1,26],$Vd=[1,27],$Ve=[1,33],$Vf=[1,34],$Vg=[1,35],$Vh=[1,36],$Vi=[1,37],$Vj=[1,38],$Vk=[1,39],$Vl=[1,40],$Vm=[1,42],$Vn=[1,41],$Vo=[1,2,5,19,25,28,29,31,57,61,62,63,64,70,71,73,74,75,76,77,88,89,90,91,92,93,94,95,112,113],$Vp=[1,50],$Vq=[2,139],$Vr=[1,61],$Vs=[1,53],$Vt=[1,54],$Vu=[1,55],$Vv=[1,56],$Vw=[1,57],$Vx=[1,58],$Vy=[1,59],$Vz=[1,48],$VA=[1,49],$VB=[1,79],$VC=[1,67],$VD=[1,111],$VE=[1,107],$VF=[1,105],$VG=[1,119],$VH=[1,108],$VI=[1,113],$VJ=[1,114],$VK=[1,115],$VL=[1,116],$VM=[1,117],$VN=[1,118],$VO=[1,98],$VP=[1,99],$VQ=[1,100],$VR=[1,2,5,19,28,29,31,57,61,62,63,64,70,71,73,74,75,76,77,88,89,90,91,92,93,94,95,112,113],$VS=[1,2,5,19,25,28,29,31,39,44,57,61,62,63,64,70,71,73,74,75,76,77,84,88,89,90,91,92,93,94,95,112,113],$VT=[1,2,5,19,20,24,25,28,29,31,39,40,42,57,61,62,63,64,70,71,73,74,75,76,77,80,81,84,88,89,90,91,92,93,94,95,112,113,130,132,136,137,138,139,144,145,149,150,151,152,156,160,164],$VU=[1,138],$VV=[1,2,5,19,20,24,25,28,29,31,39,40,42,44,51,52,53,54,55,56,57,61,62,63,64,70,71,73,74,75,76,77,80,81,84,88,89,90,91,92,93,94,95,112,113,130,132,136,137,138,139,144,145,149,150,151,152,156,160,164],$VW=[22,28,31,39,57,101,102,103,104,105,106,112,113,130,132,133],$VX=[29,70,71],$VY=[2,5,19,25,28,29,31,61,62,63,64,70,71,73,75,76,77,88,89,90,91,92,93,94,95,112,113],$VZ=[1,152],$V_=[1,154],$V$=[1,2,5,19,24,25,28,29,31,40,42,57,61,62,63,64,70,71,73,74,75,76,77,84,88,89,90,91,92,93,94,95,112,113],$V01=[1,2,5,19,20,24,25,28,29,31,39,40,42,57,61,62,63,64,70,71,73,74,75,76,77,80,81,84,88,89,90,91,92,93,94,95,112,113,130,132,136,137,138,139,144,145,149,150,151,152,160,164],$V11=[1,157],$V21=[1,2,5,19,20,24,25,28,29,31,39,40,42,57,61,62,63,64,70,71,73,74,75,76,77,80,81,84,88,89,90,91,92,93,94,95,112,113,130,132,136,137,138,139,144,145,156,160,164],$V31=[1,158],$V41=[1,159],$V51=[1,160],$V61=[1,161],$V71=[1,2,5,19,20,24,25,28,29,31,39,40,42,57,61,62,63,64,70,71,73,74,75,76,77,80,81,84,88,89,90,91,92,93,94,95,112,113,130,132,136,137,138,139,149,150,151,152,156,160,164],$V81=[1,162],$V91=[1,163],$Va1=[1,2,5,19,20,24,25,28,29,31,39,40,42,57,61,62,63,64,70,71,73,74,75,76,77,80,81,84,88,89,90,91,92,93,94,95,112,113,136,137,138,139,144,145,149,150,151,152,156,160,164],$Vb1=[1,164],$Vc1=[1,165],$Vd1=[1,2,5,19,20,24,25,28,29,31,39,40,42,57,61,62,63,64,70,71,73,74,75,76,77,80,81,84,88,89,90,91,92,93,94,95,112,113,130,132,144,145,149,150,151,152,156,160,164],$Ve1=[1,166],$Vf1=[1,167],$Vg1=[1,168],$Vh1=[1,169],$Vi1=[1,2,5,19,24,25,28,29,31,40,42,57,61,62,63,64,70,71,73,74,75,76,77,80,81,84,88,89,90,91,92,93,94,95,112,113,130,132,136,137,138,139,144,145,149,150,151,152,156,160,164],$Vj1=[1,183],$Vk1=[1,182],$Vl1=[1,192],$Vm1=[1,199],$Vn1=[1,209],$Vo1=[1,2,5,19,20,22,24,25,28,29,31,39,40,42,57,61,62,63,64,70,71,73,74,75,76,77,80,81,84,88,89,90,91,92,93,94,95,112,113,130,132,136,137,138,139,144,145,149,150,151,152,156,160,164],$Vp1=[29,84],$Vq1=[40,84],$Vr1=[1,251],$Vs1=[24,84],$Vt1=[1,324],$Vu1=[1,325];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"S":3,"Source1":4,"EOF":5,"Statement":6,"Declaration_statements":7,"Assignation_statements":8,"Function_statements":9,"Native_statements":10,"Block_statements":11,"If_statements":12,"Iteration_statements":13,"Return_statements":14,"Break_statements":15,"Continue_statements":16,"Switch_statements":17,"Empty_statements":18,"CONSOLE":19,".":20,"LOG":21,"(":22,"Expr":23,")":24,";":25,"Expr_statements":26,"ExprNB":27,"OPENBRACE":28,"CLOSEBRACE":29,"Source2":30,"IDENT":31,"initialNo":32,"Expr1_statements":33,"CallExprNoIn":34,"Arguments":35,"ArrList":36,"Expr1_statement":37,"Arr":38,"[":39,"]":40,"TypeV":41,":":42,"Array":43,"=":44,"AssignmentExpr":45,"NEWT":46,"ARRAYS":47,"ValStatement1":48,"Type":49,"AssignmentOperator":50,"+=":51,"-=":52,"*=":53,"/=":54,"^=":55,"%=":56,"FUNCTION":57,"ParameterList":58,"FunctionExpr":59,"Statement1":60,"CONTINUE":61,"BREAK":62,"RETURN":63,"SWITCH":64,"CaseBlock":65,"CaseClausesOpt":66,"CaseClauses1":67,"CaseClauses":68,"CaseClause":69,"CASE":70,"DEFAULT":71,"DefaultClause":72,"IF":73,"ELSE":74,"DO":75,"WHILE":76,"FOR":77,"ExprOpt":78,"LeftHandSideExpr":79,"INTOKEN":80,"OFTOKEN":81,"ExprNoInOpt":82,"ExprNoIn":83,",":84,"AssignmentExprNoIn":85,"AssignmentExprNoBF":86,"Parameter":87,"STRING":88,"NUMBERS":89,"BOOLEAN":90,"VOID":91,"VAR":92,"CONST":93,"TYPE":94,"LET":95,"ArrayList":96,"ArrayList1":97,"Elements":98,"Element":99,"Literal":100,"NULLTOKEN":101,"TRUETOKEN":102,"FALSETOKEN":103,"NUMBER":104,"CADENA":105,"CADENA2":106,"Property":107,"PropertyList":108,"PrimaryExpr":109,"PrimaryExprNoBrace":110,"ArrayLiteral":111,"PLUSPLUS":112,"MINSMINS":113,"CHARAT":114,"TOLOWER":115,"TOUPPER":116,"CONCAT":117,"LENGTH":118,"ElementList":119,"ArrayLiterals":120,"MemberExpr":121,"MemberExprNoBF":122,"CallExpr":123,"CallExprNoBF":124,"ArgumentList":125,"LeftHandSideExprNoBF":126,"PostfixExpr":127,"PostfixExprNoBF":128,"UnaryExprCommon":129,"+":130,"UnaryExpr":131,"-":132,"!":133,"UnaryExprNoBF":134,"MultiplicativeExpr":135,"*":136,"/":137,"POTENCIA":138,"%":139,"MultiplicativeExprNoBF":140,"AdicionExpr":141,"AdicionExprNoBF":142,"RelacionalExpr":143,"<":144,">":145,"RelacionalExprNoIn":146,"RelacionalExprNoBF":147,"IgualdadExpr":148,"EQQ":149,"NOEQQ":150,"MAQ":151,"MIQ":152,"IgualdadExprNoIn":153,"IgualdadExprNoBF":154,"LogicaYYExpr":155,"AND":156,"LogicaYYExprNoIn":157,"LogicaYYExprNoBF":158,"LogicaOOExpr":159,"OR":160,"LogicaOOExprNoIn":161,"LogicaOOExprNoBF":162,"CondicionTernariaExpr":163,"?":164,"CondicionTernariaExprNoIn":165,"CondicionTernariaExprNoBF":166,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",19:"CONSOLE",20:".",21:"LOG",22:"(",24:")",25:";",28:"OPENBRACE",29:"CLOSEBRACE",31:"IDENT",39:"[",40:"]",42:":",44:"=",46:"NEWT",47:"ARRAYS",49:"Type",51:"+=",52:"-=",53:"*=",54:"/=",55:"^=",56:"%=",57:"FUNCTION",61:"CONTINUE",62:"BREAK",63:"RETURN",64:"SWITCH",70:"CASE",71:"DEFAULT",73:"IF",74:"ELSE",75:"DO",76:"WHILE",77:"FOR",80:"INTOKEN",81:"OFTOKEN",84:",",88:"STRING",89:"NUMBERS",90:"BOOLEAN",91:"VOID",92:"VAR",93:"CONST",94:"TYPE",95:"LET",101:"NULLTOKEN",102:"TRUETOKEN",103:"FALSETOKEN",104:"NUMBER",105:"CADENA",106:"CADENA2",112:"PLUSPLUS",113:"MINSMINS",114:"CHARAT",115:"TOLOWER",116:"TOUPPER",117:"CONCAT",118:"LENGTH",130:"+",132:"-",133:"!",136:"*",137:"/",138:"POTENCIA",139:"%",144:"<",145:">",149:"EQQ",150:"NOEQQ",151:"MAQ",152:"MIQ",156:"AND",160:"OR",164:"?"},
productions_: [0,[3,1],[3,1],[4,1],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[10,7],[10,6],[26,2],[26,1],[18,1],[11,2],[11,3],[8,3],[8,2],[8,1],[34,2],[34,2],[34,3],[34,2],[34,1],[37,2],[37,3],[37,2],[37,1],[36,2],[36,1],[38,3],[7,4],[7,2],[7,7],[7,11],[7,8],[7,6],[7,4],[48,5],[48,3],[32,2],[50,1],[50,1],[50,1],[50,1],[50,1],[50,1],[50,1],[9,7],[9,8],[9,9],[9,10],[9,6],[9,7],[9,8],[9,9],[59,6],[59,7],[59,7],[59,8],[59,5],[59,7],[59,6],[59,7],[30,1],[30,2],[30,1],[60,1],[60,1],[60,1],[60,1],[60,1],[60,1],[60,1],[60,1],[60,1],[60,1],[60,1],[60,1],[16,2],[16,1],[15,2],[15,1],[14,2],[14,1],[14,3],[14,2],[17,5],[65,3],[66,0],[66,1],[68,2],[67,2],[67,1],[69,3],[69,4],[69,2],[69,3],[72,2],[72,3],[12,5],[12,7],[13,7],[13,6],[13,5],[13,9],[13,7],[13,8],[13,7],[13,8],[78,1],[82,1],[23,1],[23,3],[83,1],[83,3],[27,1],[27,3],[58,3],[58,1],[87,3],[87,1],[41,1],[41,1],[41,1],[41,1],[41,1],[41,1],[41,1],[41,1],[41,1],[96,2],[96,1],[97,2],[97,1],[97,1],[43,2],[98,3],[98,1],[99,1],[100,1],[100,1],[100,1],[100,1],[100,1],[100,1],[107,3],[107,3],[107,1],[108,1],[108,3],[109,1],[109,2],[109,3],[110,1],[110,1],[110,1],[110,3],[110,1],[33,2],[33,2],[33,2],[33,6],[33,5],[33,5],[33,6],[33,2],[33,2],[33,3],[33,3],[33,3],[33,3],[33,3],[33,4],[33,4],[33,3],[111,2],[111,3],[120,4],[120,3],[119,1],[119,3],[121,1],[121,1],[121,4],[121,3],[122,1],[122,4],[122,3],[123,1],[123,2],[123,4],[123,3],[124,1],[124,2],[124,4],[124,3],[35,2],[35,3],[125,1],[125,3],[79,1],[79,1],[126,1],[126,1],[127,1],[128,1],[129,2],[129,2],[129,2],[131,1],[131,1],[134,1],[134,1],[135,1],[135,3],[135,3],[135,3],[135,3],[140,1],[140,3],[140,3],[140,3],[140,3],[141,1],[141,3],[141,3],[142,1],[142,3],[142,3],[143,1],[143,3],[143,3],[146,1],[146,3],[146,3],[147,1],[147,3],[147,3],[148,1],[148,3],[148,3],[148,3],[148,3],[153,1],[153,3],[153,3],[153,3],[153,3],[154,1],[154,3],[154,3],[154,3],[154,3],[155,1],[155,3],[157,1],[157,3],[158,1],[158,3],[159,1],[159,3],[161,1],[161,3],[162,1],[162,3],[163,1],[163,5],[165,1],[165,5],[166,1],[45,1],[85,1],[86,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

        console.log('-----      CODIGO         ------')
        console.log(C3D);
        console.log('-----   ERRORES LEXICOS   ------');
        for(let m of lexicos)
        {
            console.log(m);
        }
        console.log('----- ERRORES SINTACTICOS ------');
        for(let m of sintacticos)
        {
            console.log(m);
        }
        console.log('----- ERRORES SEMANTICOS ------');
        for(let m of semanticos)
        {
            console.log(m);
        }
        console.log('----- TABLA DE SIMBOLOS  ------');
        tab.printSimbolos();
    
break;
case 3: case 74:

        if($$[$0] instanceof Array)
        {
            C3D = $$[$0][3] + C3D;
        }
    
break;
case 4: case 75:

        if($$[$0-1] instanceof Array)
        {
            C3D = $$[$0-1][3] + C3D;
        }

    
break;
case 6: case 7: case 8: case 9: case 10: case 11: case 12: case 13: case 14: case 15: case 16: case 77: case 78: case 79: case 80: case 81: case 82: case 83: case 84: case 85: case 86:

        var r = [];
        r[0]  = $$[$0][0];
        r[1] = $$[$0][1];
        r[2] = $$[$0][2];
        r[3] = $$[$0][3];
        this.$ = r;
    
break;
case 19:

        //0 -> tipo
        //1 -> temporal
        //2 -> label
        //3 -> C3D
        //4 -> nameVariable (if exists)


        var r = [];
        if($$[$0-2][0] == "STRING")
        {

        }
        else if($$[$0-2][0] == "NUMBER")
        {
            var valor = $$[$0-2][3];
            valor += '\n';
            valor += 'printf("%d",'+$$[$0-2][1]+');';
            r[3] = valor;
        }
        else if($$[$0-2][0] == "FLOAT")
        {
            var valor = $$[$0-2][3];
            valor += '\n';
            valor += 'printf("%f",'+$$[$0-2][1]+');';
            r[3] = valor;
        }
        else if($$[$0-2][0] == "BOOLEAN")
        {
            //convert ASCII
            var valor = $$[$0-2][3];
            valor += '\n';
            valor += 'printf("%f",'+$$[$0-2][1]+');';
            r[3] = valor;
        }
        else
        {
            if($$[$0-2][4] != '')
            {
                var n = tab.getPositionAmbito($$[$0-2][4]);
                if(n!=null && n!=undefined)
                {
                    if(n.rol.toUpperCase() == "ARREGLO")
                    {

                    }
                    else if(n.rol.toUpperCase() == "VARIABLE")
                    {
                        if(n.tipo.toUpperCase() == "NUMBER")
                        {
                            var valor = '';
                            valor += '\n';
                            var temp = Temp.getTemporal();
                            valor = temp+' = stack['+n.position+'];';
                            valor += '\n';
                            valor += 'printf("%d",'+temp+');';
                            r[3] = valor;
                        }
                        else if(n.tipo.toUpperCase() == "FLOAT")
                        {
                            var valor = '';
                            valor += '\n';
                            var temp = Temp.getTemporal();
                            valor = temp+' = stack['+n.position+'];';
                            valor += '\n';
                            valor += 'printf("%f",'+temp+');';
                            r[3] = valor;
                        }
                        else if(n.tipo.toUpperCase() == "STRING")
                        {
                            var valor = '';
                            valor += '\n';

                            var temp = Temp.getTemporal();
                            valor = temp + ' = stack['+n.position+'];';

                            var temp1 = Temp.getTemporal();
                            valor += '\n';
                            valor += temp1 + '= stack['+temp+'];';
                            valor += temp1 + ' = '+ temp1 + ' + 1;';

                            var temp2  = Temp.getTemporal();
                            valor += '\n';
                            valor += temp2 + '= heap['+temp1+'];';

                            var temp3 = Temp.getTemporal();
                            valor += '\n';
                            valor += temp3 + ' = 1;';

                            var label = Label.getBandera();
                            valor += '\n';
                            valor += label + ':';
                            var label1 = Label.getBandera();

                            valor += '\n';
                            valor += 'if(' + temp3 + '==' + temp2 + ') goto '+label1+';';
                            valor += '\n';

                            var temp4 = Temp.getTemporal();
                            valor += temp4 + ' = ' + temp3 + ' + ' + temp2 + ';';
                            valor += '\n';
                            valor += temp3 + ' = ' + temp3 + ' + 1;';
                            valor += '\n';

                            var temp5 = Temp.getTemporal();
                            valor += temp5 + ' = heap[' + temp4 + '];';
                            valor += '\n';
                            valor += 'printf("%c",' + temp5 + ');';
                            valor += '\n';
                            valor += 'goto ' + label + ';';
                            valor += '\n';
                            valor += label1 + ':';
                            valor += '\n';
                            r[3] = valor;
                        }
                    }
                }
                else
                {
                    semanticos.push('{\"valor\":\"'+`Error Semantico en la linea: ${(yylineno+1)}, no existe la variable ${$$[$0-2][4]}`+'\"}');
                    r[3] = '';
                }
            }
        }
        this.$ = r;
    
break;
case 23: case 24:

        this.$ = ['','','','','',''];
    
break;
case 25: case 167:

        this.$ = $$[$0-1];
    
break;
case 41:

        if(tab.getPositionAmbito($$[$0-2])==null)
        {
            if($$[$0-3].toUpperCase() == 'CONST')
            {
                semanticos.push('{\"valor\":\"'+`Error Semantico en la linea: ${(yylineno+1)}, necesita asignar un valor a una variable de tipo CONST`+'\"}');
                this.$ = ['','','',''];
            }
            else
            {
                var temp1 = Temp.getTemporal();

                var valor = '';
                valor += '\n';
                valor += temp1 + ' = ' + pos +';';
                valor += '\n';
                var temp2 = Temp.getTemporal();
                if($$[$0-3].toUpperCase() == 'NUMBER')
                {
                    valor += temp2 + ' = 0;';
                }
                else if($$[$0-3].toUpperCase() == 'BOOLEAN')
                {
                    valor += temp2 + ' = 0;';
                }
                else
                {
                    valor += temp2 + ' = -1;';
                }

                valor += '\n';
                valor += 'stack[' + temp1 + '] = ' + temp2 +';';

                var r = [];
                r[3] = valor;
                r[0] = '';
                r[1] = temp2;
                r[2] = '';
                r[4] = '';
                r[5] = '';
                r[6] = '';
                r[7] = '';

                var sym = new intermedia.simbolo();
                sym.ambito = tab.ambitoLevel;
                sym.name = $$[$0-2];
                sym.position = pos;
                sym.rol = 'variable';
                sym.direccion = pos;
                sym.direccionrelativa = pos;
                sym.tipo = $$[$0];
                sym.valor = null;
                tab.insert(sym);
                this.$ = r;
                if(pos >0 && pos != 0) pos++;
                if (pos == 0) pos++;
            }
        }
        else
        {
            semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, ya existe una variable con el nombre ${$$[$0-2]};`+'\"}');
            this.$ = ['','','',''];
        }
    
break;
case 42:

        if(tab.getPositionAmbito($$[$0])==null)
        {
            if($$[$0-1].toUpperCase() == 'CONST')
            {
                semanticos.push('{\"valor\":\"'+`Error Semantico en la linea: ${(yylineno+1)}, necesita asignar un valor a una variable de tipo CONST`+'\"}');
                this.$ = ['','','',''];
            }
            else
            {
                var temp1 = Temp.getTemporal();

                var valor = '';
                valor += '\n';
                valor += temp1 + ' = ' + pos +';';
                valor += '\n';
                var temp2 = Temp.getTemporal();
                if($$[$0-1].toUpperCase() == 'NUMBER')
                {
                    valor += temp2 + ' = 0;';
                }
                else if($$[$0-1].toUpperCase() == 'BOOLEAN')
                {
                    valor += temp2 + ' = 0;';
                }
                else
                {
                    valor += temp2 + ' = -1;';
                }
                valor += '\n';
                valor += 'stack[' + temp1 + '] = ' + temp2 +';';

                var r = [];
                r[3] = valor;
                r[0] = '';
                r[1] = temp2;
                r[2] = '';
                r[4] = '';
                r[5] = '';
                r[6] = '';
                r[7] = '';

                var sym = new intermedia.simbolo();
                sym.ambito = tab.ambitoLevel;
                sym.name = $$[$0];
                sym.position = pos;
                sym.rol = 'variable';
                sym.direccion = pos;
                sym.direccionrelativa = pos;
                sym.tipo = '';
                sym.valor = null;
                tab.insert(sym);
                this.$ = r;
                if(pos >0 && pos != 0) pos++;
                if (pos == 0) pos++;
            }
        }
        else
        {
            semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, ya existe una variable con el nombre ${$$[$0]};`+'\"}');
            this.$ = ['','','',''];
        }
    
break;
case 43:

        if(tab.getPositionAmbito($$[$0-5])==null)
        {
            if($$[$0][0].toString().toUpperCase() != '')
            {
                switch($$[$0][0].toString().toUpperCase())
                {
                    case 'ARREGLO':
                        if($$[$0][8].toUpperCase() == $$[$0-3].toUpperCase())
                        {
                            var valor = '';
                            var temp = Temp.getTemporal();
                            valor += temp + ' = ' + pos + ';';
                            valor += '\n';

                            var temp1 = Temp.getTemporal();
                            var temp0 = Temp.getTemporal();
                            valor += temp1 + ' = ' + posA + ';';
                            valor += '\n';
                            valor += temp0+ ' = ' + posA + ';\n';
                            valor += 'stack['+temp+'] = ' + temp1 + ';';
                            valor += '\n';
                            valor += temp1 + ' = ' + temp1 + ' + 1;';
                            valor += '\n';
                            valor += 'heap['+temp0+'] = ' + temp1 + ';\n';
                            var temp2 = Temp.getTemporal();
                            valor += temp2 + ' = '+ $$[$0][7] + ';';
                            valor += '\n';
                            valor += 'heap['+temp1+'] = ' + temp2 + ';';
                            valor += '\n';
                            valor += $$[$0][1] + ' = ' + temp1 + ';';
                            valor += '\n';
                            valor += $$[$0][3];
                            valor += '\n';

                             var sym = new intermedia.simbolo();
                             sym.ambito = tab.ambitoLevel;
                             sym.name = $$[$0-5];
                             sym.position = pos;
                             sym.rol = 'arreglo';
                             sym.direccion = pos;
                             sym.direccionrelativa = pos;
                             sym.tipo = ($$[$0-3][8]!='')?$$[$0][8]:$$[$0-3][0];
                             sym.valor = $$[$0][6];
                             sym.constante = ($$[$0-6].toUpperCase() == 'CONST')?true:false;
                             tab.insert(sym);

                            var r = [];
                            r[3] = valor;
                            r[0] = '';
                            r[1] = temp3;
                            r[2] = '';
                            r[4] = '';
                            r[5] = '';
                            r[6] = '';
                            r[7] = '';

                            arr.valores.push($$[$0][6]);

                            this.$ = r;

                            if(pos >0 && pos != 0) pos++;
                            if (pos == 0) pos++;
                            posA += 50000;
                        }
                        else
                        {
                            semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no puedes asignar ${$$[$0][8]}, a una variable de tipo ${$$[$0-3]};`+'\"}');
                            this.$ = ['','','','']
                        }

                        break;

                    DEFAULT:
                        semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no puedes asignar ${$$[$0][0]}, a una variable de tipo ${$$[$0-3]};`+'\"}');
                        this.$ = ['','','',''];
                        break;

                }
            }
            else
            {
                semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no puedes asignar ${$$[$0][6]}, a una variable de tipo ${$$[$0-3]};`+'\"}');
                this.$ = ['','','',''];
            }
        }
        else
        {
            semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, ya existe una variable con el nombre ${$$[$0-5]};`+'\"}');
            this.$ = ['','','',''];
        }
    
break;
case 44:

        if(tab.getPositionAmbito($$[$0-9])==null)
        {
                var temp1 = Temp.getTemporal();

                var u = $$[$0-1];
                if(u[0].toUpperCase() == 'NUMBER')
                {
                    var valor = '';
                    valor += u[3];
                    valor += '\n';
                    valor += temp1 + ' = ' + pos +';';
                    valor += '\n';
                    var temp2 = Temp.getTemporal();
                    valor += temp2 + ' = '+posA+';';
                    valor += '\n';
                    valor += 'stack[' + temp1 + '] = ' + temp2 +';';
                    valor += '\n';
                    valor += 'heap[' + temp2 + '] = ' + temp2 + ' + 1;';
                    valor += '\n';
                    valor = valor  + temp2 + ' = ' + temp2 + ' + 1;';
                    valor += '\n';
                    valor += 'heap[' + temp2 + '] = ' + u[1] + ';';
                    valor += '\n';
                    var temp3 = Temp.getTemporal();
                    valor += temp3 + ' = 0;';
                    valor += '\n';
                    var label = Label.getBandera();
                    var label1 = Label.getBandera();
                    valor += label + ': ';
                    valor += '\n';
                    valor += '\t' + 'if( ' + temp3 + ' == ' + u[1] + ' ) goto ' + label1 + ';';
                    valor += '\n';
                    valor += '\t' + temp2 + ' = ' + temp2 + ' + 1;';
                    valor += '\n';
                    valor += '\t' + temp3 + ' = ' + temp3 + ' + 1;';
                    valor += '\n';
                    valor += '\t' + 'heap['+temp2+'] = -1;';
                    valor += '\n';
                    valor += '\t' + 'goto ' + label + ';';
                    valor += '\n';
                    valor += label1 + ': ';

                    var a = new intermedia.arreglo()
                    a.name = $$[$0-9];
                    a.tipo = $$[$0-7];
                    a.positions.push(u[6]);
                    a.c3d = valor;
                    a.temporal = temp3;
                    a.bandera = label1;

                    var r = [];
                    r[3] = valor;
                    r[0] = '';
                    r[1] = temp3;
                    r[2] = label1;
                    r[4] = '';
                    r[5] = '';
                    r[6] = '';
                    r[7] = '';

                    var sym = new intermedia.simbolo();
                    sym.ambito = tab.ambitoLevel;
                    sym.name = $$[$0-9];
                    sym.position = pos;
                    sym.rol = 'arreglo';
                    sym.direccion = pos;
                    sym.direccionrelativa = pos;
                    sym.tipo = $$[$0-7];
                    sym.valor = a;
                    sym.constante = ($$[$0-10].toUpperCase() == 'CONST')?true:false;
                    tab.insert(sym);

                    this.$ = r;

                    arr.push(a);

                    if(pos >0 && pos != 0) pos++;
                    if (pos == 0) pos++;
                    posA += 50000;
                }
                else
                {
                    semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no puedes asignar un tamaño  de tipo ${u[0]};`+'\"}');
                    this.$ = ['','','',''];
                }
        }
        else
        {
            semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, ya existe una variable con el nombre ${$$[$0-9]};`+'\"}');
            this.$ = ['','','',''];
        }
    
break;
case 45:

        if(tab.getPositionAmbito($$[$0-6])==null)
        {
                var temp1 = Temp.getTemporal();

                var u = $$[$0-1];
                if(u[0].toUpperCase() == 'NUMBER')
                {
                    var valor = '';
                    valor += u[3];
                    valor += '\n';
                    valor += temp1 + ' = ' + pos +';';
                    valor += '\n';
                    var temp2 = Temp.getTemporal();
                    valor += temp2 + ' = '+posA+';';
                    valor += '\n';
                    valor += 'stack[' + temp1 + '] = ' + temp2 +';';
                    valor += '\n';
                    valor += 'heap[' + temp2 + '] = ' + temp2 + ' + 1;';
                    valor += '\n';
                    valor = valor  + temp2 + ' = ' + temp2 + ' + 1;';
                    valor += '\n';
                    valor += 'heap[' + temp2 + '] = ' + u[1] + ';';
                    valor += '\n';
                    var temp3 = Temp.getTemporal();
                    valor += temp3 + ' = 0;';
                    valor += '\n';
                    var label = Label.getBandera();
                    var label1 = Label.getBandera();
                    valor += label + ': ';
                    valor += '\n';
                    valor += '\t' + 'if( ' + temp3 + ' == ' + u[1] + ' ) goto ' + label1 + ';';
                    valor += '\n';
                    valor += '\t' + temp2 + ' = ' + temp2 + ' + 1;';
                    valor += '\n';
                    valor += '\t' + temp3 + ' = ' + temp3 + ' + 1;';
                    valor += '\n';
                    valor += '\t' + 'heap['+temp2+'] = -1;';
                    valor += '\n';
                    valor += '\t' + 'goto ' + label + ';';
                    valor += '\n';
                    valor += label1 + ': ';

                    var a = new intermedia.arreglo()
                    a.name = $$[$0-6];
                    a.positions.push(u[6]);
                    a.c3d = valor;
                    a.temporal = temp3;
                    a.bandera = label1;
                    a.tipo = $$[$0-7];

                    var r = [];
                    r[3] = valor;
                    r[0] = '';
                    r[1] = temp3;
                    r[2] = label1;
                    r[4] = '';
                    r[5] = '';
                    r[6] = '';
                    r[7] = '';

                    var sym = new intermedia.simbolo();
                    sym.ambito = tab.ambitoLevel;
                    sym.name = $$[$0-6];
                    sym.position = pos;
                    sym.rol = 'arreglo';
                    sym.direccion = pos;
                    sym.direccionrelativa = pos;
                    sym.tipo = $$[$0-7];

                    sym.valor = a;
                    tab.insert(sym);

                    this.$ = r;

                    arr.valores.push(a);

                    if(pos >0 && pos != 0) pos++;
                    if (pos == 0) pos++;
                    posA += 50000;
                }
                else if(u[0] == '')
                {
                }
                else
                {
                    semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no puedes asignar un tamaño  de tipo ${u[0]};`+'\"}');
                    this.$ = ['','','',''];
                }
        }
        else
        {
            semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, ya existe una variable con el nombre ${$$[$0-6]};`+'\"}');
            this.$ = ['','','',''];
        }
    
break;
case 46:

        if(tab.getPositionAmbito($$[$0-4])==null)
        {
            if($$[$0-2].toUpperCase() == $$[$0][0].toUpperCase())
            {
                switch($$[$0-2].toUpperCase())
                {
                    case "STRING":
                        var val = $$[$0][6].toString();
                        var valor = '';
                        var temp = Temp.getTemporal();
                        valor += temp + ' = ' + pos + ';';
                        valor += '\n';

                        var temp1 = Temp.getTemporal();
                        valor += temp1 + ' = ' + posS + ';';
                        valor += '\n';
                        valor += 'stack['+temp+'] = ' + temp1 + ';';
                        valor += '\n';
                        valor += temp1 + ' = ' + temp1 + ' + 1;';
                        valor += '\n';
                        var temp2 = Temp.getTemporal();
                        valor += temp2 + ' = '+ val.length + ';';
                        valor += '\n';
                        valor += 'heap['+temp1+'] = ' + temp2 + ';';
                        valor += '\n';
                        valor += $$[$0][1] + ' = ' + temp1 + ';';
                        valor += '\n';
                        valor += $$[$0][3];

                        var r = [];
                        r[3] = valor;
                        r[0] = '';
                        r[1] = temp3;
                        r[2] = label1;
                        r[4] = '';
                        r[5] = '';
                        r[6] = '';
                        r[7] = '';

                        var sym = new intermedia.simbolo();
                        sym.ambito = tab.ambitoLevel;
                        sym.name = $$[$0-4];
                        sym.position = pos;
                        sym.rol = 'variable';
                        sym.direccion = pos;
                        sym.direccionrelativa = pos;
                        sym.tipo = $$[$0-2];
                        sym.valor = $$[$0][6];
                        sym.constante = ($$[$0-5].toUpperCase() == 'CONST')?true:false;
                        tab.insert(sym);

                        this.$ = r;

                        if(pos >0 && pos != 0) pos++;
                        if (pos == 0) pos++;
                        posS += 50000;
                        break;

                    case "NUMBER":
                        var valor = '';
                        var temp = Temp.getTemporal();
                        valor += temp + ' = ' + pos + ';';
                        valor += '\n';
                        valor += $$[$0][3];
                        valor += '\n';
                        valor += 'stack['+ temp + '] = ' + $$[$0][1] +';';
                        valor += '\n';

                         var sym = new intermedia.simbolo();
                         sym.ambito = tab.ambitoLevel;
                         sym.name = $$[$0-4];
                         sym.position = pos;
                         sym.rol = 'variable';
                         sym.direccion = pos;
                         sym.direccionrelativa = pos;
                         sym.tipo = $$[$0-2];
                         sym.valor = $$[$0][6];
                         sym.constante = ($$[$0-5].toUpperCase() == 'CONST')?true:false;
                         tab.insert(sym);

                        var r = [];
                        r[3] = valor;
                        r[0] = '';
                        r[1] = temp3;
                        r[2] = '';
                        r[4] = '';
                        r[5] = '';
                        r[6] = '';
                        r[7] = '';


                        this.$ = r;

                        if(pos >0 && pos != 0) pos++;
                        if (pos == 0) pos++;
                        break;

                    case 'BOOLEAN':
                        var valor = '';
                        var temp = Temp.getTemporal();
                        valor += temp + ' = ' + pos + ';';
                        valor += '\n';
                        valor += $$[$0][3];
                        valor += '\n';
                        valor += 'stack['+ temp + '] = ' + $$[$0][1] +';';
                        valor += '\n';

                         var sym = new intermedia.simbolo();
                         sym.ambito = tab.ambitoLevel;
                         sym.name = $$[$0-4];
                         sym.position = pos;
                         sym.rol = 'variable';
                         sym.direccion = pos;
                         sym.direccionrelativa = pos;
                         sym.tipo = $$[$0-2];
                         sym.valor = $$[$0][6];
                         sym.constante = ($$[$0-5].toUpperCase() == 'CONST')?true:false;
                         tab.insert(sym);

                        var r = [];
                        r[3] = valor;
                        r[0] = '';
                        r[1] = temp3;
                        r[2] = '';
                        r[4] = '';
                        r[5] = '';
                        r[6] = '';
                        r[7] = '';


                        this.$ = r;

                        if(pos >0 && pos != 0) pos++;
                        if (pos == 0) pos++;
                        break;

                    case "FLOAT":
                        var valor = '';
                        var temp = Temp.getTemporal();
                        valor += temp + ' = ' + pos + ';';
                        valor += '\n';
                        valor += $$[$0][3];
                        valor += '\n';
                        valor += 'stack['+ temp + '] = ' + $$[$0][1] +';';
                        valor += '\n';

                         var sym = new intermedia.simbolo();
                         sym.ambito = tab.ambitoLevel;
                         sym.name = $$[$0-4];
                         sym.position = pos;
                         sym.rol = 'variable';
                         sym.direccion = pos;
                         sym.direccionrelativa = pos;
                         sym.tipo = $$[$0-2];
                         sym.valor = $$[$0][6];
                         sym.constante = ($$[$0-5].toUpperCase() == 'CONST')?true:false;
                         tab.insert(sym);

                        var r = [];
                        r[3] = valor;
                        r[0] = '';
                        r[1] = temp3;
                        r[2] = '';
                        r[4] = '';
                        r[5] = '';
                        r[6] = '';
                        r[7] = '';


                        this.$ = r;

                        if(pos >0 && pos != 0) pos++;
                        if (pos == 0) pos++;
                        break;

                    case 'ARREGLO':
                        semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no puedes asignar un arreglo, a una variable de tipo ${$$[$0-2]};`+'\"}');
                        this.$ = ['','','',''];
                        /*
                         var val = $$[$0-2][6].toString();
                         var valor = '';
                         var temp = Temp.getTemporal();
                         valor += temp + ' = ' + pos + ';';
                         valor += '\n';

                         var temp1 = Temp.getTemporal();
                         valor += temp1 + ' = ' + posA + ';';
                         valor += '\n';
                         valor += 'stack['+temp+'] = ' + temp1 + ';';
                         valor += '\n';
                         valor += temp1 + ' = ' + temp1 + ' + 1;';
                         valor += '\n';
                         var temp2 = Temp.getTemporal();
                         valor += temp2 + ' = '+ $$[$0-2][7] + ';';
                         valor += '\n';
                         valor += 'heap['+temp1+'] = ' + temp2 + ';';
                         valor += '\n';
                         valor += $$[$0-2][1] + ' = ' + temp1 + ';';
                         valor += '\n';
                         valor += $$[$0-2][3]+'\n';

                         var sym = new intermedia.simbolo();
                         sym.ambito = tab.ambitoLevel;
                         sym.name = $$[$0-4];
                         sym.position = pos;
                         sym.rol = 'arreglo';
                         sym.direccion = pos;
                         sym.direccionrelativa = pos;
                         sym.tipo = ($$[$0-2][8]!='')?$$[$0-2][8]:$$[$0-2][0];
                         sym.valor = $$[$0-2][6];
                         tab.insert(sym);

                        var r = [];
                        r[3] = valor;
                        r[0] = '';
                        r[1] = temp3;
                        r[2] = '';
                        r[4] = '';
                        r[5] = '';
                        r[6] = '';
                        r[7] = '';

                        arr.valores.push($$[$0-2][6]);

                        this.$ = r;

                         if(pos >0 && pos != 0) pos++;
                         if (pos == 0) pos++;
                         posA += 50000;
                         */
                         break;
                }
            }
            else if($$[$0][0] == '')
            {
                 var n = tab.getPositionAmbito($$[$0][4]);
                 if(n!=null)
                 {
                     if(n.tipo.toUpperCase() == $$[$0-2].toUpperCase())
                     {
                         switch(n.tipo.toUpperCase())
                         {
                             case 'STRING':
                                 var valor = '';
                                  var temp = Temp.getTemporal();
                                  valor += temp + ' = ' + pos + ';';
                                  valor += '\n';

                                  var temp1 = Temp.getTemporal();
                                  valor += temp1 + ' = ' + posS + ';';
                                  valor += '\n';
                                  valor += 'stack['+temp+'] = ' + temp1 + ';';
                                  valor += '\n';
                                  valor += temp1 + ' = ' + temp1 + ' + 1;';
                                  valor += '\n';
                                  var temp2 = Temp.getTemporal();
                                  valor += temp2 + ' = '+ val.length + ';';
                                  valor += '\n';
                                  valor += 'heap['+temp1+'] = ' + temp2 + ';';
                                  valor += '\n';

                                 for(var a = 0; a<n.valor.length; a++)
                                 {
                                     valor += temp1 + ' = ' + temp1 + ' + 1;';
                                     valor += '\n';
                                     valor += 'heap['+temp1+'] = ' + n.valor.charCodeAt(a) + ';';
                                     valor += '\n'
                                 }
                               var r = [];
                               r[3] = valor;
                               r[0] = '';
                               r[1] = temp1;
                               r[2] = '';
                               r[4] = '';
                               r[5] = '';
                               r[6] = '';
                               r[7] = '';

                               var sym = new intermedia.simbolo();
                               sym.ambito = tab.ambitoLevel;
                               sym.name = $$[$0-4];
                               sym.position = pos;
                               sym.rol = 'variable';
                               sym.direccion = pos;
                               sym.direccionrelativa = pos;
                               sym.tipo = $$[$0-2];
                               sym.valor = n.valor;
                               sym.constante = ($$[$0-5].toUpperCase() == 'CONST')?true:false;
                               tab.insert(sym);

                               this.$ = r;

                               if(pos >0 && pos != 0) pos++;
                               if (pos == 0) pos++;
                               posS += 50000;
                               break;

                             case 'NUMBER':
                                  var valor = '';
                                  var temp = Temp.getTemporal();
                                  valor += temp + ' = ' + pos + ';';
                                  valor += '\n';
                                  var temp1 = Temp.getTemporal();
                                  valor += temp1 + ' = stack['+n.position+'];';
                                  valor += '\n';
                                  valor += 'stack['+ temp + '] = ' + temp1 +';';
                                  valor += '\n';

                                   var sym = new intermedia.simbolo();
                                   sym.ambito = tab.ambitoLevel;
                                   sym.name = $$[$0-4];
                                   sym.position = pos;
                                   sym.rol = 'variable';
                                   sym.direccion = pos;
                                   sym.direccionrelativa = pos;
                                   sym.tipo = $$[$0-2];
                                   sym.valor = n.valor;
                                   sym.constante = ($$[$0-5].toUpperCase() == 'CONST')?true:false;
                                   tab.insert(sym);

                                  var r = [];
                                  r[3] = valor;
                                  r[0] = '';
                                  r[1] = temp3;
                                  r[2] = '';
                                  r[4] = '';
                                  r[5] = '';
                                  r[6] = '';
                                  r[7] = '';


                                  this.$ = r;

                                  if(pos >0 && pos != 0) pos++;
                                  if (pos == 0) pos++;
                                  break;

                             case 'BOOLEAN':
                                  var valor = '';
                                  var temp = Temp.getTemporal();
                                  valor += temp + ' = ' + pos + ';';
                                  valor += '\n';
                                  var temp1 = Temp.getTemporal();
                                  valor += temp1 + ' = stack['+n.position+'];';
                                  valor += '\n';
                                  valor += 'stack['+ temp + '] = ' + temp1 +';';
                                  valor += '\n';

                                   var sym = new intermedia.simbolo();
                                   sym.ambito = tab.ambitoLevel;
                                   sym.name = $$[$0-4];
                                   sym.position = pos;
                                   sym.rol = 'variable';
                                   sym.direccion = pos;
                                   sym.direccionrelativa = pos;
                                   sym.tipo = $$[$0-2];
                                   sym.valor = n.valor;
                                   sym.constante = ($$[$0-5].toUpperCase() == 'CONST')?true:false;
                                   tab.insert(sym);

                                  var r = [];
                                  r[3] = valor;
                                  r[0] = '';
                                  r[1] = temp3;
                                  r[2] = '';
                                  r[4] = '';
                                  r[5] = '';
                                  r[6] = '';
                                  r[7] = '';


                                  this.$ = r;

                                  if(pos >0 && pos != 0) pos++;
                                  if (pos == 0) pos++;
                                  break;

                             DEFAULT:
                              semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no puedes asignar ${$$[$0][0]}, a una variable de tipo arreglo;`+'\"}');
                              this.$ = ['','','',''];
                              break;
                         }
                     }
                     else
                     {
                         semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no puedes asignar ${$$[$0][0]}, a una variable de tipo ${$$[$0-2]};`+'\"}');
                         this.$ = ['','','',''];
                     }

                 }
                 else
                 {
                     semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no puedes asignar ${$$[$0][0]}, a una variable de tipo ${$$[$0-2]};`+'\"}');
                     this.$ = ['','','',''];
                 }
            }
             else
             {
                 semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no puedes asignar ${$$[$0][0]}, a una variable de tipo ${$$[$0-2]};`+'\"}');
                 this.$ = ['','','',''];
             }
        }
        else
        {
            semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, ya existe una variable con el nombre ${$$[$0-4]};`+'\"}');
            this.$ = ['','','',''];
        }

    
break;
case 47:

        if(tab.getPositionAmbito($$[$0-2])==null)
        {
            if($$[$0][0].toString().toUpperCase() != '')
            {
                switch($$[$0][0].toString().toUpperCase())
                {
                    case "STRING":
                        var val = $$[$0][6].toString();
                        var valor = '';
                        var temp = Temp.getTemporal();
                        valor += temp + ' = ' + pos + ';';
                        valor += '\n';

                        var temp1 = Temp.getTemporal();
                        valor += temp1 + ' = ' + posS + ';';
                        valor += '\n';
                        valor += 'stack['+temp+'] = ' + temp1 + ';';
                        valor += '\n';
                        valor += temp1 + ' = ' + temp1 + ' + 1;';
                        valor += '\n';
                        var temp2 = Temp.getTemporal();
                        valor += temp2 + ' = '+ val.length + ';';
                        valor += '\n';
                        valor += 'heap['+temp1+'] = ' + temp2 + ';';
                        valor += '\n';
                        valor += $$[$0][1] + ' = ' + temp1 + ';';
                        valor += '\n';
                        valor += $$[$0][3];

                        var r = [];
                        r[3] = valor;
                        r[0] = '';
                        r[1] = temp3;
                        r[2] = label1;
                        r[4] = '';
                        r[5] = '';
                        r[6] = '';
                        r[7] = '';

                        var sym = new intermedia.simbolo();
                        sym.ambito = tab.ambitoLevel;
                        sym.name = $$[$0-2];
                        sym.position = pos;
                        sym.rol = 'variable';
                        sym.direccion = pos;
                        sym.direccionrelativa = pos;
                        sym.tipo = $$[$0][0];
                        sym.valor = $$[$0][6];
                        sym.constante = ($$[$0-3].toUpperCase() == 'CONST')?true:false;
                        tab.insert(sym);

                        this.$ = r;

                        if(pos >0 && pos != 0) pos++;
                        if (pos == 0) pos++;
                        posS += 50000;
                        break;

                    case "NUMBER":
                        var valor = '';
                        var temp = Temp.getTemporal();
                        valor += temp + ' = ' + pos + ';';
                        valor += '\n';
                        valor += $$[$0][3];
                        valor += '\n';
                        valor += 'stack['+ temp + '] = ' + $$[$0][1] +';';
                        valor += '\n';

                         var sym = new intermedia.simbolo();
                         sym.ambito = tab.ambitoLevel;
                         sym.name = $$[$0-2];
                         sym.position = pos;
                         sym.rol = 'variable';
                         sym.direccion = pos;
                         sym.direccionrelativa = pos;
                         sym.tipo = $$[$0][0];
                         sym.valor = $$[$0][6];
                         sym.constante = ($$[$0-3].toUpperCase() == 'CONST')?true:false;
                         tab.insert(sym);

                        var r = [];
                        r[3] = valor;
                        r[0] = '';
                        r[1] = temp3;
                        r[2] = '';
                        r[4] = '';
                        r[5] = '';
                        r[6] = '';
                        r[7] = '';


                        this.$ = r;

                        if(pos >0 && pos != 0) pos++;
                        if (pos == 0) pos++;
                        break;

                    case 'BOOLEAN':
                        var valor = '';
                        var temp = Temp.getTemporal();
                        valor += temp + ' = ' + pos + ';';
                        valor += '\n';
                        valor += $$[$0][3];
                        valor += '\n';
                        valor += 'stack['+ temp + '] = ' + $$[$0][1] +';';
                        valor += '\n';

                         var sym = new intermedia.simbolo();
                         sym.ambito = tab.ambitoLevel;
                         sym.name = $$[$0-2];
                         sym.position = pos;
                         sym.rol = 'variable';
                         sym.direccion = pos;
                         sym.direccionrelativa = pos;
                         sym.tipo = $$[$0][0];
                         sym.valor = $$[$0][6];
                         sym.constante = ($$[$0-3].toUpperCase() == 'CONST')?true:false;
                         tab.insert(sym);

                        var r = [];
                        r[3] = valor;
                        r[0] = '';
                        r[1] = temp3;
                        r[2] = '';
                        r[4] = '';
                        r[5] = '';
                        r[6] = '';
                        r[7] = '';


                        this.$ = r;

                        if(pos >0 && pos != 0) pos++;
                        if (pos == 0) pos++;
                        break;

                    case "FLOAT":
                        var valor = '';
                        var temp = Temp.getTemporal();
                        valor += temp + ' = ' + pos + ';';
                        valor += '\n';
                        valor += $$[$0][3];
                        valor += '\n';
                        valor += 'stack['+ temp + '] = ' + $$[$0][1] +';';
                        valor += '\n';

                         var sym = new intermedia.simbolo();
                         sym.ambito = tab.ambitoLevel;
                         sym.name = $$[$0-2];
                         sym.position = pos;
                         sym.rol = 'variable';
                         sym.direccion = pos;
                         sym.direccionrelativa = pos;
                         sym.tipo = $$[$0][0];
                         sym.valor = $$[$0][6];
                         sym.constante = ($$[$0-3].toUpperCase() == 'CONST')?true:false;
                         tab.insert(sym);

                        var r = [];
                        r[3] = valor;
                        r[0] = '';
                        r[1] = temp3;
                        r[2] = '';
                        r[4] = '';
                        r[5] = '';
                        r[6] = '';
                        r[7] = '';


                        this.$ = r;

                        if(pos >0 && pos != 0) pos++;
                        if (pos == 0) pos++;
                        break;

                    case 'ARREGLO':
                        var val = $$[$0][6].toString();
                        var valor = '';
                        var temp = Temp.getTemporal();
                        valor += temp + ' = ' + pos + ';';
                        valor += '\n';

                        var temp1 = Temp.getTemporal();
                        var temp0 = Temp.getTemporal();
                        valor += temp1 + ' = ' + posA + ';';
                        valor += '\n';
                        valor += temp0+ ' = ' + posA + ';\n';
                        valor += 'stack['+temp+'] = ' + temp1 + ';';
                        valor += '\n';
                        valor += temp1 + ' = ' + temp1 + ' + 1;';
                        valor += '\n';
                        valor += 'heap['+temp0+'] = ' + temp1 + ';\n';

                        var temp2 = Temp.getTemporal();
                        valor += temp2 + ' = '+ $$[$0][7] + ';';
                        valor += '\n';
                        valor += 'heap['+temp1+'] = ' + temp2 + ';';
                        valor += '\n';
                        valor += $$[$0][1] + ' = ' + temp1 + ';';
                        valor += '\n';
                        valor += $$[$0][3];
                        valor += '\n';

                         var sym = new intermedia.simbolo();
                         sym.ambito = tab.ambitoLevel;
                         sym.name = $$[$0-2];
                         sym.position = pos;
                         sym.rol = 'arreglo';
                         sym.direccion = pos;
                         sym.direccionrelativa = pos;
                         sym.tipo = ($$[$0][8]!='')?$$[$0][8]:$$[$0][0];
                         sym.valor = $$[$0][6];
                         sym.constante = ($$[$0-3].toUpperCase() == 'CONST')?true:false;
                         tab.insert(sym);

                        var r = [];
                        r[3] = valor;
                        r[0] = '';
                        r[1] = temp3;
                        r[2] = '';
                        r[4] = '';
                        r[5] = '';
                        r[6] = '';
                        r[7] = '';

                        arr.valores.push($$[$0][6]);

                        this.$ = r;

                        if(pos >0 && pos != 0) pos++;
                        if (pos == 0) pos++;
                        posA += 50000;
                        break;

                    DEFAULT:
                        semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no puedes asignar ${$$[$0][0]}, a una variable de tipo arreglo;`+'\"}');
                        this.$ = ['','','',''];

                }
            }
            else if($$[$0][0] == '')
            {
                 var n = tab.getPositionAmbito($$[$0][4]);
                 if(n!=null)
                 {
                     if(n.tipo.toUpperCase()!='')
                     {
                         switch(n.tipo.toUpperCase())
                         {
                             case 'STRING':
                                 var valor = '';
                                  var temp = Temp.getTemporal();
                                  valor += temp + ' = ' + pos + ';';
                                  valor += '\n';

                                  var temp1 = Temp.getTemporal();
                                  valor += temp1 + ' = ' + posS + ';';
                                  valor += '\n';
                                  valor += 'stack['+temp+'] = ' + temp1 + ';';
                                  valor += '\n';
                                  valor += temp1 + ' = ' + temp1 + ' + 1;';
                                  valor += '\n';
                                  var temp2 = Temp.getTemporal();
                                  valor += temp2 + ' = '+ val.length + ';';
                                  valor += '\n';
                                  valor += 'heap['+temp1+'] = ' + temp2 + ';';
                                  valor += '\n';

                                 for(var a = 0; a<n.valor.length; a++)
                                 {
                                     valor += temp1 + ' = ' + temp1 + ' + 1;';
                                     valor += '\n';
                                     valor += 'heap['+temp1+'] = ' + n.valor.charCodeAt(a) + ';';
                                     valor += '\n'
                                 }
                               var r = [];
                               r[3] = valor;
                               r[0] = '';
                               r[1] = temp1;
                               r[2] = '';
                               r[4] = '';
                               r[5] = '';
                               r[6] = '';
                               r[7] = '';

                               var sym = new intermedia.simbolo();
                               sym.ambito = tab.ambitoLevel;
                               sym.name = $$[$0-2];
                               sym.position = pos;
                               sym.rol = 'variable';
                               sym.direccion = pos;
                               sym.direccionrelativa = pos;
                               sym.tipo = n.tipo;
                               sym.valor = n.valor;
                               sym.constante = ($$[$0-3].toUpperCase() == 'CONST')?true:false;
                               tab.insert(sym);

                               this.$ = r;

                               if(pos >0 && pos != 0) pos++;
                               if (pos == 0) pos++;
                               posS += 50000;
                               break;

                             case 'NUMBER':
                                  var valor = '';
                                  var temp = Temp.getTemporal();
                                  valor += temp + ' = ' + pos + ';';
                                  valor += '\n';
                                  var temp1 = Temp.getTemporal();
                                  valor += temp1 + ' = stack['+n.position+'];';
                                  valor += '\n';
                                  valor += 'stack['+ temp + '] = ' + temp1 +';';
                                  valor += '\n';

                                   var sym = new intermedia.simbolo();
                                   sym.ambito = tab.ambitoLevel;
                                   sym.name = $$[$0-2];
                                   sym.position = pos;
                                   sym.rol = 'variable';
                                   sym.direccion = pos;
                                   sym.direccionrelativa = pos;
                                   sym.tipo = n.tipo;
                                   sym.valor = n.valor;
                                   sym.constante = ($$[$0-3].toUpperCase() == 'CONST')?true:false;
                                   tab.insert(sym);

                                  var r = [];
                                  r[3] = valor;
                                  r[0] = '';
                                  r[1] = temp3;
                                  r[2] = '';
                                  r[4] = '';
                                  r[5] = '';
                                  r[6] = '';
                                  r[7] = '';


                                  this.$ = r;

                                  if(pos >0 && pos != 0) pos++;
                                  if (pos == 0) pos++;
                                  break;
                             case 'BOOLEAN':
                                  var valor = '';
                                  var temp = Temp.getTemporal();
                                  valor += temp + ' = ' + pos + ';';
                                  valor += '\n';
                                  var temp1 = Temp.getTemporal();
                                  valor += temp1 + ' = stack['+n.position+'];';
                                  valor += '\n';
                                  valor += 'stack['+ temp + '] = ' + temp1 +';';
                                  valor += '\n';

                                   var sym = new intermedia.simbolo();
                                   sym.ambito = tab.ambitoLevel;
                                   sym.name = $$[$0-2];
                                   sym.position = pos;
                                   sym.rol = 'variable';
                                   sym.direccion = pos;
                                   sym.direccionrelativa = pos;
                                   sym.tipo = n.tipo;
                                   sym.valor = n.valor;
                                   sym.constante = ($$[$0-3].toUpperCase() == 'CONST')?true:false;
                                   tab.insert(sym);

                                  var r = [];
                                  r[3] = valor;
                                  r[0] = '';
                                  r[1] = temp3;
                                  r[2] = '';
                                  r[4] = '';
                                  r[5] = '';
                                  r[6] = '';
                                  r[7] = '';


                                  this.$ = r;

                                  if(pos >0 && pos != 0) pos++;
                                  if (pos == 0) pos++;
                                  break;
                             DEFAULT:
                              semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no puedes asignar ${$$[$02][0]}, a una variable de tipo arreglo;`+'\"}');
                              this.$ = ['','','',''];
                              break;
                         }
                     }
                     else
                     {
                         semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no puedes asignar ${$$[$02][0]}, a una variable de tipo ${$$[$0]};`+'\"}');
                         this.$ = ['','','',''];
                     }

                 }
                 else
                 {
                     semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no puedes asignar ${$$[$02][0]}, a una variable de tipo ${$$[$0]};`+'\"}');
                     this.$ = ['','','',''];
                 }
            }
            else
            {
                semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no puedes asignar ${$$[$0][6]}, a una variable de tipo ${$$[$0][0]};`+'\"}');
                this.$ = ['','','',''];
            }
        }
        else
        {
            semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, ya existe una variable con el nombre ${$$[$0-2]};`+'\"}');
            this.$ = ['','','',''];
        }
    
break;
case 120: case 121: case 122: case 124: case 126: case 149: case 161: case 164: case 165: case 168: case 192: case 196: case 211: case 212: case 213: case 214: case 215: case 216: case 220: case 221: case 222: case 223: case 224: case 229: case 234: case 237: case 240: case 243: case 246: case 249: case 254: case 259: case 264: case 266: case 268: case 270: case 272: case 274: case 276: case 278: case 280: case 281: case 282: case 283:

        this.$ = $$[$0];
    
break;
case 151:

        var r = [];
        r[0] = 'BOOLEAN';
        var temp = Temp.getTemporal();
        r[1] = temp;
        r[2] = '';
        var valor = '';
        valor += temp + ' = 1;';
        r[3] = valor;
        r[4] = '';
        r[5] = 1;
        r[6] = true;
        this.$ = r;
    
break;
case 152:

        var r = [];
        r[0] = 'BOOLEAN';
        var temp = Temp.getTemporal();
        r[1] = temp;
        r[2] = '';
        var valor = '';
        valor += temp + ' = 0;';
        r[3] = valor;
        r[4] = '';
        r[5] = 1;
        r[6] = false;
        this.$ = r;
    
break;
case 153:

        var r = [];
        r[0] = "NUMBER";
        var temp = Temp.getTemporal();
        r[1] = temp;
        r[2] = '';
        var valor = '';
        valor += temp + ' = ' + $$[$0] + ';';
        r[3] = valor;
        r[4] = '';
        r[5] = $$[$0];
        r[6] = Number($$[$0]);
        this.$ = r;

    
break;
case 154:

        var temp = Temp.getTemporal();
        var r = [];
        r[0] = "STRING";
        r[1] = temp;
        r[2] = '';

        var valor = '';
        for(var a = 0; a<$$[$0].length; a++)
        {
            valor += temp + ' = ' + temp + ' + 1;';
            valor += '\n';
            valor += 'heap['+temp+'] = ' + $$[$0].charCodeAt(a) + ';';
            valor += '\n';
        }
        r[3] = valor;
        r[4] = '';
        r[5] = $$[$0];
        r[6] = $$[$0];

        this.$ = r;

    
break;
case 155:

        var temp = Temp.getTemporal();
        var r = [];
        r[0] = "STRING";
        r[1] = temp;
        r[2] = '';

        var valor = '';
        for(var a = 0; a<$$[$0].length; a++)
        {
            valor += temp + ' = ' + temp + ' + 1;';
            valor += '\n';
            valor += 'heap['+temp+'] = ' + $$[$0].charCodeAt(a) + ';';
            valor += '\n'
        }
        r[3] = valor;
        r[4] = '';
        r[5] = $$[$0];
        r[6] = $$[$0];

        this.$ = r;

    
break;
case 166: case 199: case 203:

        var r = [];
        r[0] = '';
        r[1] = '';
        r[2] = '';
        r[3] = '';
        r[4] = $$[$0];
        r[5] = '';
        r[6] = '';
        this.$ = r;
    
break;
case 186:

        var temp = Temp.getTemporal();
        var r = [];
        r[0] = "ARREGLO";
        r[1] = temp;
        r[2] = '';

        var valor = '';
        valor += temp + ' = ' + temp + ' + 1;';
        valor += '\n';
        valor += 'heap['+temp+'] = -1;';
        valor += '\n';
        var a = new intermedia.arreglo();
        a.c3d = valor;
        a.positions.push(0);

        r[3] = valor;
        r[4] = '';
        r[5] = [];
        r[6] = a;
        r[7] = 0;
        r[8] = '';

        this.$ = r;
    
break;
case 187:

        var temp = Temp.getTemporal();
        var r = [];
        r[0] = "ARREGLO";
        r[1] = temp;
        r[2] = '';
        var lm = false;
        var valor = '';
        var arreglito = new intermedia.arreglo();

        if($$[$0-1][0][6] instanceof intermedia.arreglo)
        {
            var tipo = $$[$0-1][0][6].tipo.toUpperCase();
            var pass = false;
            r[8] = tipo;

            for(let pos of $$[$0-1])
            {
                lm = true;

                valor += temp + ' = ' + temp + ' + 1;';
                valor += '\n';
                if(pos[6] instanceof intermedia.arreglo)
                {
                    if(pos[6].tipo.toUpperCase() == tipo)
                    {
                        pass = true;
                        var aux = pos[6].tipo.toUpperCase();
                        switch(aux)
                        {
                            case 'STRING':
                                var val = pos[6].valor;
                                var temp0 = Temp.getTemporal();
                                var temp1 = Temp.getTemporal();
                                valor += temp1 + ' = ' + posS + ';';
                                valor += temp0 + ' = ' + posS + ';';
                                valor += '\n';
                                valor += 'heap['+temp+'] = ' + temp1 + ';';
                                valor += '\n';
                                valor += temp1 + ' = ' + temp1 + ' + 1;';
                                valor += '\n';
                                var temp2 = Temp.getTemporal();
                                valor += temp2 + ' = '+ val.length + ';';
                                valor += '\n';
                                valor += 'heap['+temp1+'] = ' + temp2 + ';';
                                valor += '\n';
                                valor += pos[6].temporal + ' = ' + temp1 + ';';
                                valor += '\n';
                                valor += pos[6].c3d;
                                valor += '\n';
                                valor += 'heap['+temp+'] = '+temp0+';';
                                valor += '\n';

                                if(pos >0 && pos != 0) pos++;
                                if (pos == 0) pos++;
                                posS += 50000;
                                break;
                            case 'NUMBER':
                                valor += pos[6].c3d;
                                valor += '\n';
                                valor += 'heap['+temp+'] = '+pos[6].temporal+';';
                                valor += '\n';
                                break;
                            case 'BOOLEAN':
                                valor += pos[6].c3d;
                                valor += '\n';
                                valor += 'heap['+temp+'] = '+pos[6].temporal+';';
                                valor += '\n';
                                break;

                            case 'ARREGLO':
                                var val = pos[7];
                                var post = 1;
                                for(let m of val) post *= m;

                                var temp0 = Temp.getTemporal();
                                var temp1 = Temp.getTemporal();
                                valor += temp1 + ' = ' + posA + ';';
                                valor += temp0 + ' = ' + posA + ';';

                                var temp2 = Temp.getTemporal();
                                valor += temp2 + ' = '+ post + ';';
                                valor += '\n';
                                valor += 'heap['+temp1+'] = ' + temp2 + ';';
                                valor += '\n';
                                valor += pos[6].temporal + ' = ' + temp1 + ';';
                                valor += '\n';
                                valor += pos[6].c3d;
                                valor += '\n';
                                valor += 'heap['+temp+'] = '+temp0+';';
                                valor += '\n';

                                if(pos >0 && pos != 0) pos++;
                                if (pos == 0) pos++;
                                posA += 50000;
                                break;
                        }
                    }
                    else
                    {
                        pass = false;
                        break;
                    }
                }
                else
                {
                    pass = false;
                    break;
                }
            }
            if(pass)
            {
                arreglito.c3d = valor;
                arreglito.temporal = temp;
                arreglito.bandera = '';
                arreglito.tipo = 'ARREGLO';
                r[3] = valor;
                r[4] = '';
                r[5] = [];

                var posis = [];
                posis.push($$[$0-1].length);
                if( $$[$0-1][0][6].tipo.toUpperCase() == 'ARREGLO' )
                {
                    for(let o of $$[$0-1][0][6].positions)
                    {
                        posis.push(o);
                    }
                }
                arreglito.positions = posis;
                r[6] = arreglito;
                var rra = 1;
                for(let v of arreglito.positions)rra *= v;
                r[7] = rra;
                this.$ = r;
            }
            else
            {
                    semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no se puede realizar dicha operacion., error en implementacion de tipos.`+'\"}');
                    this.$ = ['','','',''];
            }
        }

        if(!lm)
        {
            semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no se puede realizar dicha operacion.`+'\"}');
            this.$ = ['','','','','','','',''];
        }

    
break;
case 190:

        this.$ = [];
        if($$[$0][0].tipo != '')
        {
            var r = [];
            var arrs = new intermedia.arreglo();
            if($$[$0][0].tipo == 'ARREGLO')
            {
                arrs.positions.push($$[$0][7]);
            }
            arrs.valor = $$[$0][6];
            arrs.tipo = $$[$0][0];
            arrs.c3d = $$[$0][3];
            arrs.temporal = $$[$0][1];
            arrs.bandera = $$[$0][2];
            r[0] = 'ARREGLO';
            r[1] = $$[$0][1];
            r[2] = $$[$0][2];
            r[3] = $$[$0][3];
            r[4] = '';
            r[5] = '';
            r[6] = arrs;
            r[7] = 1;
            this.$.push(r);
        }
        else
        {

        }

    
break;
case 217:

        if($$[$0][0] == '')
        {
            var n = tab.getPositionAmbito($$[$0][4]);
            if(n != null)
            {
                var r = [];
                var valor = '';
                r[0] = n.tipo;

                var temp0 = Temp.getTemporal();
                var temp = Temp.getTemporal();
                valor += $$[$0][3];

                valor += temp0 + ' = '+n.position +';\n';
                valor += temp + ' = stack['+temp0+'];\n';

                r[1] = temp;
                r[2] = '';
                r[3] = valor;
                r[4] = '';
                r[5] = '';
                r[6] = n.valor;

                this.$ = r;
            }
            else
            {
                semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no se puede realizar dicha operacion., la variable ${$$[$0][4]} no existe.`+'\"}');
                this.$ = ['','','',''];
            }
        }
        else if($$[$0][0] != 'STRING' && $$[$0][0] != 'BOOLEAN')
        {
            this.$ = $$[$0];
        }

    
break;
case 218:

        if($$[$0][0] != 'STRING' && $$[$0][0] != 'BOOLEAN')
        {
            if($$[$0][0] == '')
            {
                var n = tab.getPositionAmbito($$[$0][4]);
                if( n != null)
                {
                    if(n.tipo.toUpperCase() != 'STRING' && n.tipo.toUpperCase() != 'BOOLEAN')
                    {
                        var r = [];
                        var valor = '';
                        var temp0 = Temp.getTemporal();
                        valor += temp0 + ' = ' + n.position + ';\n';
                        valor += '';

                        var temp = Temp.getTemporal();
                        valor += temp + ' = stack['+temp0+'];\n';

                        var temp1 = Temp.getTemporal();
                        valor += temp1 + ' = -1 * ' + temp + ';\n';

                        r[0] = 'NUMBER';
                        r[1] = temp1;
                        r[2] = '';
                        r[3] = valor;
                        r[4] = '';
                        r[5] = '';
                        r[6] = Number(n.valor) * -1;

                        this.$ = r;
                    }
                    else
                    {
                        semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no se puede realizar dicha operacion.`+'\"}');
                        this.$ = ['','','',''];
                    }
                }
                else
                {
                    semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no se puede realizar dicha operacion., no existe la variable ${$$[$0][4]}.`+'\"}');
                    this.$ = ['','','',''];
                }
            }
            else
            {
                var r = [];
                var valor = '';
                valor += $$[$0][3];
                valor += '\n';

                var temp = Temp.getTemporal();
                valor += temp + ' = -1 * ' + $$[$0][1] + ';';

                r[0] = 'NUMBER';
                r[1] = temp;
                r[2] = '';
                r[3] = valor;
                r[4] = '';
                r[5] = '';
                r[6] = Number($$[$0][6]) * -1;

                this.$ = r;
            }
        }
        else
        {
            semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no se puede realizar dicha operacion.`+'\"}');
            this.$ = ['','','',''];
        }
    
break;
case 219:

        if($$[$0][0] !='STRING' && $$[$0][0] != 'NUMBER')
        {
            if($$[$0][0] == 'BOOLEAN')
            {
                var r = [];
                var valor = '';
                r[0] = 'BOOLEAN';

                var temp = Temp.getTemporal();
                var label = Label.getBandera();
                var label1 = Label.getBandera();
                valor += $$[$0][3];

                valor += 'if('+$$[$0][1]+' == 0) goto '+label+';\n';
                valor += temp + ' = 0;\n';
                valor += 'goto '+label1+';\n';

                valor += label + ':\n';
                valor += '\t'+temp + ' = 1;\n';
                valor += '\tgoto '+label1+';\n';

                valor += label1 + ':\n';

                r[1] = temp;
                r[2] = label1;
                r[3] = valor;
                r[4] = '';
                r[5] = '';
                r[6] = !$$[$0][6];

                this.$ = r;

            }
            else
            {
                var n = tab.getPositionAmbito($$[$0][4]);
                if(n != null)
                {
                    if(n.tipo.toUpperCase() == 'BOOLEAN')
                    {
                        var r = [];
                        var valor = '';
                        r[0] = 'BOOLEAN';

                        var temp0 = Temp.getTemporal();
                        var temp1 = Temp.getTemporal();
                        var temp = Temp.getTemporal();
                        var label = Label.getBandera();
                        var label1 = Label.getBandera();
                        valor += $$[$0][3];

                        valor += temp0 + ' = '+n.position +';\n';
                        valor += temp1 + ' = stack['+temp0+'];\n';

                        valor += 'if('+temp1+' == 0) goto '+label+';\n';
                        valor += temp + ' = 0;\n';
                        valor += 'goto '+label1+';\n';

                        valor += label + ':\n';
                        valor += '\t'+temp + ' = 1;\n';
                        valor += '\tgoto '+label1+';\n';

                        valor += label1 + ':\n';

                        r[1] = temp;
                        r[2] = label1;
                        r[3] = valor;
                        r[4] = '';
                        r[5] = '';
                        r[6] = !n.valor;

                        this.$ = r;
                    }
                    else
                    {
                        semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no se puede realizar dicha operacion.`+'\"}');
                        this.$ = ['','','',''];
                    }
                }
                else
                {
                    semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no se puede realizar dicha operacion., la variable ${$$[$0][4]} no existe.`+'\"}');
                    this.$ = ['','','',''];
                }
            }
        }
        else
        {
            semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no se puede realizar dicha operacion.`+'\"}');
            this.$ = ['','','',''];
        }
    
break;
case 225: case 230:

        if($$[$0-2][0] != 'STRING' && $$[$0][0] != 'STRING')
        {
            if($$[$0-2][0]!= '')
            {
                if($$[$0][0] != '')
                {
                        var valor = '';
                        var r = [];
                        valor += $$[$0-2][3];
                        valor += '\n';
                        valor += $$[$0][3];
                        valor += '\n';

                        var temp = Temp.getTemporal();
                        valor += temp +'='+$$[$0-2][1]+'*'+$$[$0][1]+';';

                        r[0] = 'NUMBER';
                        r[1] = temp;
                        r[2] = '';
                        r[3] = valor;
                        r[4] = '';
                        r[5] = '';
                        r[6] = Number($$[$0-2][6])*Number($$[$0][6]);
                        this.$ = r;
                }
                else
                {
                    var n = tab.getPositionAmbito($$[$0][4]);
                    if(n!=null)
                    {
                        var valor = '';
                        var r = [];
                        valor += $$[$0-2][3];
                        valor += '\n';

                        var tempant = Temp.getTemporal();
                        var tempant1 = Temp.getTemporal();

                        valor += tempant +'='+n.position+';\n';
                        valor += tempant1 +'=stack['+tempant+'];\n';

                        var temp = Temp.getTemporal();
                        valor += temp +'='+$$[$0-2][1]+'*'+tempant1+';';

                        r[0] = 'NUMBER';
                        r[1] = temp;
                        r[2] = '';
                        r[3] = valor;
                        r[4] = '';
                        r[5] = '';
                        r[6] = Number($$[$0-2][6])*Number(n.valor);
                        this.$ = r;
                    }
                    else
                    {
                        semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no existe la variable: ${$$[$0][4]}`+'\"}');
                        this.$ = ['','','',''];
                    }
                }
            }
            else
            {
                var n = tab.getPositionAmbito($$[$0-2][4]);
                if(n!=null)
                {
                    if($$[$0][0] != '')
                    {
                            var valor = '';
                            var r = [];
                            var tempant = Temp.getTemporal();
                            var tempant1 = Temp.getTemporal();

                            valor += tempant +'='+n.position+';\n';
                            valor += tempant1 +'=stack['+tempant+'];\n';
                            valor += $$[$0][3];
                            valor += '\n';

                            var temp = Temp.getTemporal();
                            valor += temp+'='+tempant1+'*'+$$[$0][1]+';';

                            r[0] = 'NUMBER';
                            r[1] = temp;
                            r[2] = '';
                            r[3] = valor;
                            r[4] = '';
                            r[5] = '';
                            r[6] = Number(n.valor)*Number($$[$0][6]);
                            this.$ = r;
                    }
                    else
                    {
                        var n1 = tab.getPositionAmbito($$[$0][4]);
                        if(n1!=null)
                        {
                            var valor = '';
                            var r = [];
                            var tempant = Temp.getTemporal();
                            var tempant1 = Temp.getTemporal();

                            valor += tempant +'='+n.position+';\n';
                            valor += tempant1 +'=stack['+tempant+'];\n';
                            valor += '\n';

                            var tempant11 = Temp.getTemporal();
                            var tempant111 = Temp.getTemporal();

                            valor += tempant11 +'='+n1.position+';\n';
                            valor += tempant111 +'=stack['+tempant11+'];\n';

                            var temp = Temp.getTemporal();
                            valor += temp +'='+tempant1+'*'+tempant111+';';

                            r[0] = 'NUMBER';
                            r[1] = temp;
                            r[2] = '';
                            r[3] = valor;
                            r[4] = '';
                            r[5] = '';
                            r[6] = Number(n.valor)*Number(n1.valor);
                            this.$ = r;
                        }
                        else
                        {
                            semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no existe la variable: ${$$[$0][4]}`+'\"}');
                            this.$ = ['','','',''];
                        }
                    }
                }
                else
                {
                    semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no existe la variable: ${$$[$0-2][4]}`+'\"}');
                    this.$ = ['','','',''];
                }
            }
        }
        else
        {
            semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no se puede ejecutar la operacion, no se puede aplicar  a variables de tipo STRING`+'\"}');
            this.$ = ['','','',''];
        }
    
break;
case 226: case 231:

        if($$[$0-2][0] != 'STRING' && $$[$0][0] != 'STRING')
        {
            if($$[$0-2][0]!= '')
            {
                if($$[$0][0] != '')
                {
                        var valor = '';
                        var r = [];
                        valor += $$[$0-2][3];
                        valor += '\n';
                        valor += $$[$0][3];
                        valor += '\n';

                        var temp = Temp.getTemporal();
                        valor += temp +'='+$$[$0-2][1]+'/'+$$[$0][1]+';';

                        r[0] = 'NUMBER';
                        r[1] = temp;
                        r[2] = '';
                        r[3] = valor;
                        r[4] = '';
                        r[5] = '';
                        r[6] = Number($$[$0-2][6])/Number($$[$0][6]);
                        this.$ = r;
                }
                else
                {
                    var n = tab.getPositionAmbito($$[$0][4]);
                    if(n!=null)
                    {
                        var valor = '';
                        var r = [];
                        valor += $$[$0-2][3];
                        valor += '\n';

                        var tempant = Temp.getTemporal();
                        var tempant1 = Temp.getTemporal();

                        valor += tempant +'='+n.position+';\n';
                        valor += tempant1 +'=stack['+tempant+'];\n';

                        var temp = Temp.getTemporal();
                        valor += temp +'='+$$[$0-2][1]+'/'+tempant1+';';

                        r[0] = 'NUMBER';
                        r[1] = temp;
                        r[2] = '';
                        r[3] = valor;
                        r[4] = '';
                        r[5] = '';
                        r[6] = Number($$[$0-2][6])/Number(n.valor);
                        this.$ = r;
                    }
                    else
                    {
                        semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no existe la variable: ${$$[$0][4]}`+'\"}');
                        this.$ = ['','','',''];
                    }
                }
            }
            else
            {
                var n = tab.getPositionAmbito($$[$0-2][4]);
                if(n!=null)
                {
                    if($$[$0][0] != '')
                    {
                            var valor = '';
                            var r = [];
                            var tempant = Temp.getTemporal();
                            var tempant1 = Temp.getTemporal();

                            valor += tempant +'='+n.position+';\n';
                            valor += tempant1 +'=stack['+tempant+'];\n';
                            valor += $$[$0][3];
                            valor += '\n';

                            var temp = Temp.getTemporal();
                            valor += temp+'='+tempant1+'/'+$$[$0][1]+';';

                            r[0] = 'NUMBER';
                            r[1] = temp;
                            r[2] = '';
                            r[3] = valor;
                            r[4] = '';
                            r[5] = '';
                            r[6] = Number(n.valor)/Number($$[$0][6]);
                            this.$ = r;
                    }
                    else
                    {
                        var n1 = tab.getPositionAmbito($$[$0][4]);
                        if(n1!=null)
                        {
                            var valor = '';
                            var r = [];
                            var tempant = Temp.getTemporal();
                            var tempant1 = Temp.getTemporal();

                            valor += tempant +'='+n.position+';\n';
                            valor += tempant1 +'=stack['+tempant+'];\n';
                            valor += '\n';

                            var tempant11 = Temp.getTemporal();
                            var tempant111 = Temp.getTemporal();

                            valor += tempant11 +'='+n1.position+';\n';
                            valor += tempant111 +'=stack['+tempant11+'];\n';

                            var temp = Temp.getTemporal();
                            valor += temp +'='+tempant1+'/'+tempant111+';';

                            r[0] = 'NUMBER';
                            r[1] = temp;
                            r[2] = '';
                            r[3] = valor;
                            r[4] = '';
                            r[5] = '';
                            r[6] = Number(n.valor)/Number(n1.valor);
                            this.$ = r;
                        }
                        else
                        {
                            semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no existe la variable: ${$$[$0][4]}`+'\"}');
                            this.$ = ['','','',''];
                        }
                    }
                }
                else
                {
                    semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no existe la variable: ${$$[$0-2][4]}`+'\"}');
                    this.$ = ['','','',''];
                }
            }
        }
        else
        {
            semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no se puede ejecutar la operacion, no se puede aplicar  a variables de tipo STRING`+'\"}');
            this.$ = ['','','',''];
        }
    
break;
case 227: case 232:

        if($$[$0-2][0] != 'STRING' && $$[$0][0] != 'STRING')
        {
            if($$[$0-2][0]!= '')
            {
                if($$[$0][0] != '')
                {
                        var valor = '';
                        var r = [];
                        valor += $$[$0-2][3];
                        valor += '\n';
                        valor += $$[$0][3];
                        valor += '\n';

                        var temp = Temp.getTemporal();
                        var temp1 = Temp.getTemporal();
                        var label0 = Temp.getTemporal();
                        var label1 = Temp.getTemporal();
                        var label2 = Temp.getTemporal();

                        valor += 'if('+$$[$0][1]+'==0) goto '+label1+';\n';
                        valor += temp + ' = 1;\n';
                        valor += temp1 + ' = '+$$[$0-2][1] +';\n';
                        valor += label0 + ':\n';
                        valor += '\t'+'if('+$$[$0][1]+'=='+temp+') goto '+label2+';\n';
                        valor += '\t'+temp1 + ' = '+temp1+'*'+$$[$0-2][1]+';\n';
                        valor += '\t'+temp+'='+temp+'+'+1+';\n';
                        valor += '\tgoto '+label0+';\n';
                        valor += label1 +':\n';
                        valor += '\t'+temp1+'=1;\n';
                        valor += '\tgoto '+label2+';\n';
                        valor += label2 + ':\n';


                        r[0] = 'NUMBER';
                        r[1] = temp1;
                        r[2] = label2;
                        r[3] = valor;
                        r[4] = '';
                        r[5] = '';
                        r[6] = Math.pow(Number($$[$0-2][6]),Number($$[$0][6]));
                        this.$ = r;
                }
                else
                {
                    var n = tab.getPositionAmbito($$[$0][4]);
                    if(n!=null)
                    {
                        var valor = '';
                        var r = [];
                        valor += $$[$0-2][3];
                        valor += '\n';

                        var tempant = Temp.getTemporal();
                        var tempant1 = Temp.getTemporal();

                        valor += tempant +'='+n.position+';\n';
                        valor += tempant1 +'=stack['+tempant+'];\n';

                        var temp = Temp.getTemporal();
                        var temp1 = Temp.getTemporal();
                        var label0 = Temp.getTemporal();
                        var label1 = Temp.getTemporal();
                        var label2 = Temp.getTemporal();

                        valor += 'if('+tempant1+'==0) goto '+label1+';\n';
                        valor += temp + ' = 1;\n';
                        valor += temp1 + ' = '+$$[$0-2][1] +';\n';
                        valor += label0 + ':\n';
                        valor += '\t'+'if('+tempant1+'=='+temp+') goto '+label2+';\n';
                        valor += '\t'+temp1 + ' = '+temp1+'*'+$$[$0-2][1]+';\n';
                        valor += '\t'+temp+'='+temp+'+'+1+';\n';
                        valor += '\tgoto '+label0+';\n';
                        valor += label1 +':\n';
                        valor += '\t'+temp1+'=1;\n';
                        valor += '\tgoto '+label2+';\n';
                        valor += label2 + ':\n';


                        r[0] = 'NUMBER';
                        r[1] = temp1;
                        r[2] = label2;
                        r[3] = valor;
                        r[4] = '';
                        r[5] = '';
                        r[6] = Math.pow(Number($$[$0-2][6]),Number(n.valor));
                        this.$ = r;
                    }
                    else
                    {
                        semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no existe la variable: ${$$[$0][4]}`+'\"}');
                        this.$ = ['','','',''];
                    }
                }
            }
            else
            {
                var n = tab.getPositionAmbito($$[$0-2][4]);
                if(n!=null)
                {
                    if($$[$0][0] != '')
                    {
                            var valor = '';
                            var r = [];
                            var tempant = Temp.getTemporal();
                            var tempant1 = Temp.getTemporal();

                            valor += tempant +'='+n.position+';\n';
                            valor += tempant1 +'=stack['+tempant+'];\n';
                            valor += $$[$0][3];
                            valor += '\n';

                            var temp = Temp.getTemporal();
                            var temp1 = Temp.getTemporal();
                            var label0 = Temp.getTemporal();
                            var label1 = Temp.getTemporal();
                            var label2 = Temp.getTemporal();

                            valor += 'if('+$$[$0][1]+'==0) goto '+label1+';\n';
                            valor += temp + ' = 1;\n';
                            valor += temp1 + ' = '+tempant1+';\n';
                            valor += label0 + ':\n';
                            valor += '\t'+'if('+$$[$0][1]+'=='+temp+') goto '+label2+';\n';
                            valor += '\t'+temp1 + ' = '+temp1+'*'+tempant1+';\n';
                            valor += '\t'+temp+'='+temp+'+'+1+';\n';
                            valor += '\tgoto '+label0+';\n';
                            valor += label1 +':\n';
                            valor += '\t'+temp1+'=1;\n';
                            valor += '\tgoto '+label2+';\n';
                            valor += label2 + ':\n';


                            r[0] = 'NUMBER';
                            r[1] = temp1;
                            r[2] = label2;
                            r[3] = valor;
                            r[4] = '';
                            r[5] = '';
                            r[6] = Math.pow(Number(n.valor),Number($$[$0][6]));
                            this.$ = r;
                    }
                    else
                    {
                        var n1 = tab.getPositionAmbito($$[$0][4]);
                        if(n1!=null)
                        {
                            var valor = '';
                            var r = [];
                            var tempant = Temp.getTemporal();
                            var tempant1 = Temp.getTemporal();

                            valor += tempant +'='+n.position+';\n';
                            valor += tempant1 +'=stack['+tempant+'];\n';

                            var tempant11 = Temp.getTemporal();
                            var tempant111 = Temp.getTemporal();

                            valor += tempant11 +'='+n1.position+';\n';
                            valor += tempant111 +'=stack['+tempant11+'];\n';

                            var temp = Temp.getTemporal();
                            var temp1 = Temp.getTemporal();
                            var label0 = Temp.getTemporal();
                            var label1 = Temp.getTemporal();
                            var label2 = Temp.getTemporal();

                            valor += 'if('+tempant111+'==0) goto '+label1+';\n';
                            valor += temp + ' = 1;\n';
                            valor += temp1 + ' = '+tempant1 +';\n';
                            valor += label0 + ':\n';
                            valor += '\t'+'if('+tempant111+'=='+temp+') goto '+label2+';\n';
                            valor += '\t'+temp1 + ' = '+temp1+'*'+tempant1+';\n';
                            valor += '\t'+temp+'='+temp+'+'+1+';\n';
                            valor += '\tgoto '+label0+';\n';
                            valor += label1 +':\n';
                            valor += '\t'+temp1+'=1;\n';
                            valor += '\tgoto '+label2+';\n';
                            valor += label2 + ':\n';


                            r[0] = 'NUMBER';
                            r[1] = temp1;
                            r[2] = label2;
                            r[3] = valor;
                            r[4] = '';
                            r[5] = '';
                            r[6] = Math.pow(Number(n.valor),Number(n1.valor));
                            this.$ = r;
                        }
                        else
                        {
                            semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no existe la variable: ${$$[$0][4]}`+'\"}');
                            this.$ = ['','','',''];
                        }
                    }
                }
                else
                {
                    semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no existe la variable: ${$$[$0-2][4]}`+'\"}');
                    this.$ = ['','','',''];
                }
            }
        }
        else
        {
            semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no se puede ejecutar la operacion, no se puede aplicar  a variables de tipo STRING`+'\"}');
            this.$ = ['','','',''];
        }
    
break;
case 228: case 233:

        if($$[$0-2][0] != 'STRING' && $$[$0][0] != 'STRING')
        {
            if($$[$0-2][0]!= '')
            {
                if($$[$0][0] != '')
                {
                        var valor = '';
                        var r = [];
                        valor += $$[$0-2][3];
                        valor += '\n';
                        valor += $$[$0][3];
                        valor += '\n';

                        var temp = Temp.getTemporal();
                        valor += temp +'='+$$[$0-2][1]+'%'+$$[$0][1]+';';

                        r[0] = 'NUMBER';
                        r[1] = temp;
                        r[2] = '';
                        r[3] = valor;
                        r[4] = '';
                        r[5] = '';
                        r[6] = Number($$[$0-2][6])%Number($$[$0][6]);
                        this.$ = r;
                }
                else
                {
                    var n = tab.getPositionAmbito($$[$0][4]);
                    if(n!=null)
                    {
                        var valor = '';
                        var r = [];
                        valor += $$[$0-2][3];
                        valor += '\n';

                        var tempant = Temp.getTemporal();
                        var tempant1 = Temp.getTemporal();

                        valor += tempant +'='+n.position+';\n';
                        valor += tempant1 +'=stack['+tempant+'];\n';

                        var temp = Temp.getTemporal();
                        valor += temp +'='+$$[$0-2][1]+'%'+tempant1+';';

                        r[0] = 'NUMBER';
                        r[1] = temp;
                        r[2] = '';
                        r[3] = valor;
                        r[4] = '';
                        r[5] = '';
                        r[6] = Number($$[$0-2][6])%Number(n.valor);
                        this.$ = r;
                    }
                    else
                    {
                        semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no existe la variable: ${$$[$0][4]}`+'\"}');
                        this.$ = ['','','',''];
                    }
                }
            }
            else
            {
                var n = tab.getPositionAmbito($$[$0-2][4]);
                if(n!=null)
                {
                    if($$[$0][0] != '')
                    {
                            var valor = '';
                            var r = [];
                            var tempant = Temp.getTemporal();
                            var tempant1 = Temp.getTemporal();

                            valor += tempant +'='+n.position+';\n';
                            valor += tempant1 +'=stack['+tempant+'];\n';
                            valor += $$[$0][3];
                            valor += '\n';

                            var temp = Temp.getTemporal();
                            valor += temp+'='+tempant1+'%'+$$[$0][1]+';';

                            r[0] = 'NUMBER';
                            r[1] = temp;
                            r[2] = '';
                            r[3] = valor;
                            r[4] = '';
                            r[5] = '';
                            r[6] = Number(n.valor)%Number($$[$0][6]);
                            this.$ = r;
                    }
                    else
                    {
                        var n1 = tab.getPositionAmbito($$[$0][4]);
                        if(n1!=null)
                        {
                            var valor = '';
                            var r = [];
                            var tempant = Temp.getTemporal();
                            var tempant1 = Temp.getTemporal();

                            valor += tempant +'='+n.position+';\n';
                            valor += tempant1 +'=stack['+tempant+'];\n';
                            valor += '\n';

                            var tempant11 = Temp.getTemporal();
                            var tempant111 = Temp.getTemporal();

                            valor += tempant11 +'='+n1.position+';\n';
                            valor += tempant111 +'=stack['+tempant11+'];\n';

                            var temp = Temp.getTemporal();
                            valor += temp +'='+tempant1+'%'+tempant111+';';

                            r[0] = 'NUMBER';
                            r[1] = temp;
                            r[2] = '';
                            r[3] = valor;
                            r[4] = '';
                            r[5] = '';
                            r[6] = Number(n.valor)%Number(n1.valor);
                            this.$ = r;
                        }
                        else
                        {
                            semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no existe la variable: ${$$[$0][4]}`+'\"}');
                            this.$ = ['','','',''];
                        }
                    }
                }
                else
                {
                    semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no existe la variable: ${$$[$0-2][4]}`+'\"}');
                    this.$ = ['','','',''];
                }
            }
        }
        else
        {
            semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no se puede ejecutar la operacion, no se puede aplicar  a variables de tipo STRING`+'\"}');
            this.$ = ['','','',''];
        }
    
break;
case 235: case 238:

        if($$[$0-2][0] == 'STRING'  && $$[$0][0] == 'STRING')
        {
            var r = [];
            r[0] = "STRING";
            r[1] = $$[$0-2][1];
            var valor = '';
            valor += $$[$0-2][3];
            for(var a = 0; a<$$[$0][5].length; a++)
             {
                 valor += $$[$0-2][1] + ' = ' + $$[$0-2][1] + ' + 1;';
                 valor += '\n';
                 valor += 'heap['+$$[$0-2][1]+'] = ' + $$[$0][5].charCodeAt(a) + ';';
                 valor += '\n'
             }
            r[2] = '';
            r[3] = valor;
            r[4] = '';
            r[5] = $$[$0-2][5] + $$[$0][5];
            r[6] = $$[$0-2][6] + $$[$0][6];
            this.$ = r;
        }
        else if($$[$0-2][0] == 'STRING' && $$[$0][0] != '')
        {
             var r = [];
             r[0] = "STRING";
             r[1] = $$[$0-2][1];
             var valor = '';
             valor += $$[$0-2][3];
             var val = $$[$0][5].toString();
             for(var a = 0; a<val.length; a++)
              {
                  valor += $$[$0-2][1] + ' = ' + $$[$0-2][1] + ' + 1;';
                  valor += '\n';
                  valor += 'heap['+$$[$0-2][1]+'] = ' + val.charCodeAt(a) + ';';
                  valor += '\n'
              }
             r[2] = '';
             r[3] = valor;
             r[4] = '';
             r[5] = $$[$0-2][5] + $$[$0][5].toString();
             r[6] = $$[$0-2][6] + $$[$0][6];
             this.$ = r;
        }
        else if($$[$0-2][0] != '' && $$[$0][0] == 'STRING')
        {
             var r = [];
             r[0] = "STRING";
             r[1] = $$[$0-2][1];
             var valor = '';
             var val = $$[$0-2][5].toString();
             for(var a = 0; a<val.length; a++)
              {
                  valor += $$[$0-2][1] + ' = ' + $$[$0-2][1] + ' + 1;';
                  valor += '\n';
                  valor += 'heap['+$$[$0-2][1]+'] = ' + val.charCodeAt(a) + ';';
                  valor += '\n'
              }
              valor += $$[$0][3];
             r[2] = '';
             r[3] = valor;
             r[4] = '';
             r[5] = $$[$0-2][5].toString() + $$[$0][5];
             r[6] = $$[$0-2][6] + $$[$0][6];
             this.$ = r;
        }
        else if ($$[$0-2][0] != '' && $$[$0][0] != '')
        {
                        var valor = '';
                        var r = [];
                        valor += $$[$0-2][3];
                        valor += '\n';
                        valor += $$[$0][3];
                        valor += '\n';

                        var temp = Temp.getTemporal();
                        valor += temp + ' = ' + $$[$0-2][1] + ' + ' + $$[$0][1] + ';';

                        r[0] = 'NUMBER';
                        r[1] = temp;
                        r[2] = '';
                        r[3] = valor;
                        r[4] = '';
                        r[5] = '';
                        r[6] = Number($$[$0-2][6]) + Number($$[$0][6]);
                        this.$ = r;
        }
        else if ($$[$0-2][0] == '' && $$[$0][0] == '')
        {
            var n = tab.getPositionAmbito($$[$0-2][4]);
            if(n!=null)
            {
                var n1 = tab.getPositionAmbito($$[$0][4]);
                if(n1!=null)
                {
                    if(n.tipo.toUpperCase() != 'STRING' && n1.tipo.toUpperCase() != 'STRING')
                    {
                        var valor = '';
                        var r = [];

                        var temp = Temp.getTemporal();
                        valor += temp + ' = ' + n.position + ';';
                        valor += '\n';
                        var temp1 = Temp.getTemporal();
                        valor += temp1 + ' = stack['+temp+'];';
                        valor += '\n';

                        var temp2 = Temp.getTemporal();
                        valor += temp2 + ' = ' + n1.position + ';';
                        valor += '\n';
                        var temp3 = Temp.getTemporal();
                        valor += temp3 + ' = stack['+temp2+'];';
                        valor += '\n';

                        var temp4 = Temp.getTemporal();
                        valor += temp4 + ' = ' + temp1 + ' + ' + temp3 + ';';

                        r[0] = 'NUMBER';
                        r[1] = temp4;
                        r[2] = '';
                        r[3] = valor;
                        r[4] = '';
                        r[5] = '';
                        r[6] = Number(n.valor) + Number(n1.valor);
                        this.$ = r;
                    }
                    else
                    {
                        if(n.valor != null && n1.valor != null)
                        {
                            var temp = Temp.getTemporal();
                            var r = [];
                            r[0] = "STRING";
                            r[1] = temp;
                            r[2] = '';

                            var valor = '';
                            for(var a = 0; a<n.toString().length; a++)
                            {
                                valor += temp + ' = ' + temp + ' + 1;';
                                valor += '\n';
                                valor += 'heap['+temp+'] = ' + n.toString().charCodeAt(a) + ';';
                                valor += '\n';
                            }
                            for(var a = 0; a<n1.toString().length; a++)
                            {
                                valor += temp + ' = ' + temp + ' + 1;';
                                valor += '\n';
                                valor += 'heap['+temp+'] = ' + n1.toString().charCodeAt(a) + ';';
                                valor += '\n';
                            }
                            r[3] = valor;
                            r[4] = '';
                            r[5] = n.valor.toString() + n1.valor.toString();
                            r[6] = n.valor.toString() + n1.valor.toString();

                            this.$ = r;
                        }
                        else
                        {
                            semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no se operar con variables nulas;`+'\"}');
                            this.$ = ['','','',''];
                        }
                    }
                }
                else
                {
                    semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no existe una variable con el identificador: ${$$[$0][4]};`+'\"}');
                    this.$ = ['','','',''];
                }
            }
            else
            {
                semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no existe una variable con el identificador:  ${$$[$0-2][4]};`+'\"}');
                this.$ = ['','','',''];
            }
        }
        else
        {
            if($$[$0-2][0] == '' && $$[$0][0] != '')
            {
                var n = tab.getPositionAmbito($$[$0-2][4]);
                if(n!=null)
                {
                    if(n.tipo.toUpperCase() == "STRING")
                    {
                         var r = [];
                         r[0] = "STRING";

                         var temp = Temp.getTemporal();
                         var valor = '';
                         for(var a = 0; a<n.valor.toString().length; a++)
                         {
                            valor += temp + ' = ' + temp + ' + 1;';
                            valor += '\n';
                            valor += 'heap['+temp+'] = ' + n.valor.toString().charCodeAt(a) + ';';
                            valor += '\n';
                         }

                         for(var a = 0; a<$$[$0][6].toString().length; a++)
                         {
                            valor += temp + ' = ' + temp + ' + 1;';
                            valor += '\n';
                            valor += 'heap['+temp+'] = ' + $$[$0][6].toString().charCodeAt(a) + ';';
                            valor += '\n';
                         }
                         r[1] = temp;
                         r[2] = '';
                         r[3] = valor;
                         r[4] = '';
                         r[5] = n.valor + $$[$0][6].toString();
                         r[6] = n.valor + $$[$0][6];
                         this.$ = r;
                    }
                    else if ( $$[$0][0] == 'STRING')
                    {
                         var r = [];
                         r[0] = "STRING";

                         var temp = Temp.getTemporal();
                         var valor = '';
                         for(var a = 0; a<n.toString().length; a++)
                         {
                            valor += temp + ' = ' + temp + ' + 1;';
                            valor += '\n';
                            valor += 'heap['+temp+'] = ' + n.valor.toString().charCodeAt(a) + ';';
                            valor += '\n';
                         }

                         for(var a = 0; a<$$[$0][6].toString().length; a++)
                         {
                            valor += temp + ' = ' + temp + ' + 1;';
                            valor += '\n';
                            valor += 'heap['+temp+'] = ' + $$[$0][6].toString().charCodeAt(a) + ';';
                            valor += '\n';
                         }
                         r[1] = temp;
                         r[2] = '';
                         r[3] = valor;
                         r[4] = '';
                         r[5] = n.valor + $$[$0][6].toString();
                         r[6] = n.valor + $$[$0][6];
                         this.$ = r;
                    }
                    else
                    {
                        var valor = '';
                        var r = [];

                        var temp = Temp.getTemporal();
                        valor += temp + ' = ' + n.position + ';';
                        valor += '\n';
                        var temp1 = Temp.getTemporal();
                        valor += temp1 + ' = stack['+temp+'];';
                        valor += '\n';

                        valor += $$[$0][3];
                        valor += '\n';

                        var temp4 = Temp.getTemporal();
                        valor += temp4 + ' = ' + temp1 + ' + ' + $$[$0][1] + ';';

                        r[0] = 'NUMBER';
                        r[1] = temp4;
                        r[2] = '';
                        r[3] = valor;
                        r[4] = '';
                        r[5] = Number(n.valor) + Number($$[$0][6]);
                        r[6] = Number(n.valor) + Number($$[$0][6]);
                        this.$ = r;
                    }
                }
                else
                {
                   semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no existe una variable con el identificador:  ${$$[$0-2][4]};`+'\"}');
                   this.$ = ['','','',''];
                }
            }
            else if($$[$0-2][0] != '' && $$[$0][0] == '')
            {
                var n = tab.getPositionAmbito($$[$0][4]);
                if(n!=null)
                {
                    if(n.tipo.toUpperCase() == "STRING")
                    {
                         var r = [];
                         r[0] = "STRING";

                         var temp = Temp.getTemporal();
                         var valor = '';


                         for(var a = 0; a<$$[$0-2][6].toString().length; a++)
                         {
                            valor += temp + ' = ' + temp + ' + 1;';
                            valor += '\n';
                            valor += 'heap['+temp+'] = ' + $$[$0][6].toString().charCodeAt(a) + ';';
                            valor += '\n';
                         }

                        for(var a = 0; a<n.valor.toString().length; a++)
                         {
                            valor += temp + ' = ' + temp + ' + 1;';
                            valor += '\n';
                            valor += 'heap['+temp+'] = ' + n.valor.toString().charCodeAt(a) + ';';
                            valor += '\n';
                         }

                         r[1] = temp;
                         r[2] = '';
                         r[3] = valor;
                         r[4] = '';
                         r[5] = $$[$0-2][6].toString() + n.valor;
                         r[6] = $$[$0-2][6].toString() + n.valor;
                         this.$ = r;
                    }
                    else if ( $$[$0-2][0] == 'STRING')
                    {
                         var r = [];
                         r[0] = "STRING";

                         var temp = Temp.getTemporal();
                         var valor = '';

                          for(var a = 0; a<$$[$0-2][6].toString().length; a++)
                          {
                             valor += temp + ' = ' + temp + ' + 1;';
                             valor += '\n';
                             valor += 'heap['+temp+'] = ' + $$[$0-2][6].toString().charCodeAt(a) + ';';
                             valor += '\n';
                          }

                         for(var a = 0; a<n.valor.toString().length; a++)
                         {
                            valor += temp + ' = ' + temp + ' + 1;';
                            valor += '\n';
                            valor += 'heap['+temp+'] = ' + n.valor.toString().charCodeAt(a) + ';';
                            valor += '\n';
                         }


                         r[1] = temp;
                         r[2] = '';
                         r[3] = valor;
                         r[4] = '';
                         r[5] = $$[$0-2][6] + n.valor.toString();
                         r[6] = $$[$0-2][6] + n.valor.toString();
                         this.$ = r;
                    }
                    else
                    {
                        var valor = '';
                        var r = [];

                        valor += $$[$0-2][3];
                        valor += '\n';

                        var temp = Temp.getTemporal();
                        valor += temp + ' = ' + n.position + ';';
                        valor += '\n';
                        var temp1 = Temp.getTemporal();
                        valor += temp1 + ' = stack['+temp+'];';
                        valor += '\n';

                        var temp4 = Temp.getTemporal();
                        valor += temp4 + ' = ' + $$[$0-2][1] + ' + ' + temp1 + ';';

                        r[0] = 'NUMBER';
                        r[1] = temp4;
                        r[2] = '';
                        r[3] = valor;
                        r[4] = '';
                        r[5] = '';
                        r[6] = Number($$[$0-2][6]) + Number(n.valor);
                        this.$ = r;
                    }
                }
                else
                {
                   semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no existe una variable con el identificador:  ${$$[$0-2][4]};`+'\"}');
                   this.$ = ['','','',''];
                }
            }
            else
            {
                        var valor = '';
                        var r = [];
                        valor += $$[$0-2][3];
                        valor += '\n';
                        valor += $$[$0][3];
                        valor += '\n';

                        var temp = Temp.getTemporal();
                        valor += temp + ' = ' + $$[$0-2][1] + ' + ' + $$[$0][1] + ';';

                        r[0] = 'NUMBER';
                        r[1] = temp;
                        r[2] = '';
                        r[3] = valor;
                        r[4] = '';
                        r[5] = '';
                        r[6] = Number($$[$0-2][6]) + Number($$[$0][6]);
                        this.$ = r;
            }
        }
    
break;
case 236: case 239:

        if($$[$0-2][0] != 'STRING' && $$[$0][0] != 'STRING')
        {
            if($$[$0-2][0]!= '')
            {
                if($$[$0][0] != '')
                {
                        var valor = '';
                        var r = [];
                        valor += $$[$0-2][3];
                        valor += '\n';
                        valor += $$[$0][3];
                        valor += '\n';

                        var temp = Temp.getTemporal();
                        valor += temp +'='+$$[$0-2][1]+'-'+$$[$0][1]+';';

                        r[0] = 'NUMBER';
                        r[1] = temp;
                        r[2] = '';
                        r[3] = valor;
                        r[4] = '';
                        r[5] = '';
                        r[6] = Number($$[$0-2][6])-Number($$[$0][6]);
                        this.$ = r;
                }
                else
                {
                    var n = tab.getPositionAmbito($$[$0][4]);
                    if(n!=null)
                    {
                        var valor = '';
                        var r = [];
                        valor += $$[$0-2][3];
                        valor += '\n';

                        var tempant = Temp.getTemporal();
                        var tempant1 = Temp.getTemporal();

                        valor += tempant +'='+n.position+';\n';
                        valor += tempant1 +'=stack['+tempant+'];\n';

                        var temp = Temp.getTemporal();
                        valor += temp +'='+$$[$0-2][1]+'-'+tempant1+';';

                        r[0] = 'NUMBER';
                        r[1] = temp;
                        r[2] = '';
                        r[3] = valor;
                        r[4] = '';
                        r[5] = '';
                        r[6] = Number($$[$0-2][6])-Number(n.valor);
                        this.$ = r;
                    }
                    else
                    {
                        semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no existe la variable: ${$$[$0][4]}`+'\"}');
                        this.$ = ['','','',''];
                    }
                }
            }
            else
            {
                var n = tab.getPositionAmbito($$[$0-2][4]);
                if(n!=null)
                {
                    if($$[$0][0] != '')
                    {
                            var valor = '';
                            var r = [];
                            var tempant = Temp.getTemporal();
                            var tempant1 = Temp.getTemporal();

                            valor += tempant +'='+n.position+';\n';
                            valor += tempant1 +'=stack['+tempant+'];\n';
                            valor += $$[$0][3];
                            valor += '\n';

                            var temp = Temp.getTemporal();
                            valor += temp+'='+tempant1+'-'+$$[$0][1]+';';

                            r[0] = 'NUMBER';
                            r[1] = temp;
                            r[2] = '';
                            r[3] = valor;
                            r[4] = '';
                            r[5] = '';
                            r[6] = Number(n.valor)-Number($$[$0][6]);
                            this.$ = r;
                    }
                    else
                    {
                        var n1 = tab.getPositionAmbito($$[$0][4]);
                        if(n1!=null)
                        {
                            var valor = '';
                            var r = [];
                            var tempant = Temp.getTemporal();
                            var tempant1 = Temp.getTemporal();

                            valor += tempant +'='+n.position+';\n';
                            valor += tempant1 +'=stack['+tempant+'];\n';
                            valor += '\n';

                            var tempant11 = Temp.getTemporal();
                            var tempant111 = Temp.getTemporal();

                            valor += tempant11 +'='+n1.position+';\n';
                            valor += tempant111 +'=stack['+tempant11+'];\n';

                            var temp = Temp.getTemporal();
                            valor += temp +'='+tempant1+'-'+tempant111+';';

                            r[0] = 'NUMBER';
                            r[1] = temp;
                            r[2] = '';
                            r[3] = valor;
                            r[4] = '';
                            r[5] = '';
                            r[6] = Number(n.valor)-Number(n1.valor);
                            this.$ = r;
                        }
                        else
                        {
                            semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no existe la variable: ${$$[$0][4]}`+'\"}');
                            this.$ = ['','','',''];
                        }
                    }
                }
                else
                {
                    semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no existe la variable: ${$$[$0-2][4]}`+'\"}');
                    this.$ = ['','','',''];
                }
            }
        }
        else
        {
            semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no se puede ejecutar la operacion, no se puede aplicar  a variables de tipo STRING`+'\"}');
            this.$ = ['','','',''];
        }
    
break;
case 241:

        if($$[$0-2][0] != 'STRING' && $$[$0][0] != 'STRING')
        {
            if($$[$0-2][0]!= '')
            {
                if($$[$0][0] != '')
                {
                        var valor = '';
                        var r = [];
                        valor += $$[$0-2][3];
                        valor += '\n';
                        valor += $$[$0][3];
                        valor += '\n';

                        var temp = Temp.getTemporal();
                        valor += temp +'='+$$[$0-2][1]+'<'+$$[$0][1]+';';

                        r[0] = 'NUMBER';
                        r[1] = temp;
                        r[2] = '';
                        r[3] = valor;
                        r[4] = '';
                        r[5] = '';
                        r[6] = Number($$[$0-2][6])<Number($$[$0][6]);
                        this.$ = r;
                }
                else
                {
                    var n = tab.getPositionAmbito($$[$0][4]);
                    if(n!=null)
                    {
                        var valor = '';
                        var r = [];
                        valor += $$[$0-2][3];
                        valor += '\n';

                        var tempant = Temp.getTemporal();
                        var tempant1 = Temp.getTemporal();

                        valor += tempant +'='+n.position+';\n';
                        valor += tempant1 +'=stack['+tempant+'];\n';

                        var temp = Temp.getTemporal();
                        valor += temp +'='+$$[$0-2][1]+'<'+tempant1+';';

                        r[0] = 'NUMBER';
                        r[1] = temp;
                        r[2] = '';
                        r[3] = valor;
                        r[4] = '';
                        r[5] = '';
                        r[6] = Number($$[$0-2][6])<Number(n.valor);
                        this.$ = r;
                    }
                    else
                    {
                        semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no existe la variable: ${$$[$0][4]}`+'\"}');
                        this.$ = ['','','',''];
                    }
                }
            }
            else
            {
                var n = tab.getPositionAmbito($$[$0-2][4]);
                if(n!=null)
                {
                    if($$[$0][0] != '')
                    {
                            var valor = '';
                            var r = [];
                            var tempant = Temp.getTemporal();
                            var tempant1 = Temp.getTemporal();

                            valor += tempant +'='+n.position+';\n';
                            valor += tempant1 +'=stack['+tempant+'];\n';
                            valor += $$[$0][3];
                            valor += '\n';

                            var temp = Temp.getTemporal();
                            valor += temp+'='+tempant1+'<'+$$[$0][1]+';';

                            r[0] = 'NUMBER';
                            r[1] = temp;
                            r[2] = '';
                            r[3] = valor;
                            r[4] = '';
                            r[5] = '';
                            r[6] = Number(n.valor)<Number($$[$0][6]);
                            this.$ = r;
                    }
                    else
                    {
                        var n1 = tab.getPositionAmbito($$[$0][4]);
                        if(n1!=null)
                        {
                            var valor = '';
                            var r = [];
                            var tempant = Temp.getTemporal();
                            var tempant1 = Temp.getTemporal();

                            valor += tempant +'='+n.position+';\n';
                            valor += tempant1 +'=stack['+tempant+'];\n';
                            valor += '\n';

                            var tempant11 = Temp.getTemporal();
                            var tempant111 = Temp.getTemporal();

                            valor += tempant11 +'='+n1.position+';\n';
                            valor += tempant111 +'=stack['+tempant11+'];\n';

                            var temp = Temp.getTemporal();
                            valor += temp +'='+tempant1+'<'+tempant111+';';

                            r[0] = 'BOOLEAN';
                            r[1] = temp;
                            r[2] = '';
                            r[3] = valor;
                            r[4] = '';
                            r[5] = '';
                            r[6] = Number(n.valor)<Number(n1.valor);
                            this.$ = r;
                        }
                        else
                        {
                            semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no existe la variable: ${$$[$0][4]}`+'\"}');
                            this.$ = ['','','',''];
                        }
                    }
                }
                else
                {
                    semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no existe la variable: ${$$[$0-2][4]}`+'\"}');
                    this.$ = ['','','',''];
                }
            }
        }
        else
        {
            semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no se puede ejecutar la operacion, no se puede aplicar  a variables de tipo STRING`+'\"}');
            this.$ = ['','','',''];
        }
    
break;
case 242: case 245: case 248:

        if($$[$0-2][0] != 'STRING' && $$[$0][0] != 'STRING')
        {
            if($$[$0-2][0]!= '')
            {
                if($$[$0][0] != '')
                {
                        var valor = '';
                        var r = [];
                        valor += $$[$0-2][3];
                        valor += '\n';
                        valor += $$[$0][3];
                        valor += '\n';

                        var temp = Temp.getTemporal();
                        valor += temp +'='+$$[$0-2][1]+'>'+$$[$0][1]+';';

                        r[0] = 'BOOLEAN';
                        r[1] = temp;
                        r[2] = '';
                        r[3] = valor;
                        r[4] = '';
                        r[5] = '';
                        r[6] = Number($$[$0-2][6])>Number($$[$0][6]);
                        this.$ = r;
                }
                else
                {
                    var n = tab.getPositionAmbito($$[$0][4]);
                    if(n!=null)
                    {
                        var valor = '';
                        var r = [];
                        valor += $$[$0-2][3];
                        valor += '\n';

                        var tempant = Temp.getTemporal();
                        var tempant1 = Temp.getTemporal();

                        valor += tempant +'='+n.position+';\n';
                        valor += tempant1 +'=stack['+tempant+'];\n';

                        var temp = Temp.getTemporal();
                        valor += temp +'='+$$[$0-2][1]+'>'+tempant1+';';

                        r[0] = 'BOOLEAN';
                        r[1] = temp;
                        r[2] = '';
                        r[3] = valor;
                        r[4] = '';
                        r[5] = '';
                        r[6] = Number($$[$0-2][6])>Number(n.valor);
                        this.$ = r;
                    }
                    else
                    {
                        semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no existe la variable: ${$$[$0][4]}`+'\"}');
                        this.$ = ['','','',''];
                    }
                }
            }
            else
            {
                var n = tab.getPositionAmbito($$[$0-2][4]);
                if(n!=null)
                {
                    if($$[$0][0] != '')
                    {
                            var valor = '';
                            var r = [];
                            var tempant = Temp.getTemporal();
                            var tempant1 = Temp.getTemporal();

                            valor += tempant +'='+n.position+';\n';
                            valor += tempant1 +'=stack['+tempant+'];\n';
                            valor += $$[$0][3];
                            valor += '\n';

                            var temp = Temp.getTemporal();
                            valor += temp+'='+tempant1+'>'+$$[$0][1]+';';

                            r[0] = 'BOOLEAN';
                            r[1] = temp;
                            r[2] = '';
                            r[3] = valor;
                            r[4] = '';
                            r[5] = '';
                            r[6] = Number(n.valor)>Number($$[$0][6]);
                            this.$ = r;
                    }
                    else
                    {
                        var n1 = tab.getPositionAmbito($$[$0][4]);
                        if(n1!=null)
                        {
                            var valor = '';
                            var r = [];
                            var tempant = Temp.getTemporal();
                            var tempant1 = Temp.getTemporal();

                            valor += tempant +'='+n.position+';\n';
                            valor += tempant1 +'=stack['+tempant+'];\n';
                            valor += '\n';

                            var tempant11 = Temp.getTemporal();
                            var tempant111 = Temp.getTemporal();

                            valor += tempant11 +'='+n1.position+';\n';
                            valor += tempant111 +'=stack['+tempant11+'];\n';

                            var temp = Temp.getTemporal();
                            valor += temp +'='+tempant1+'>'+tempant111+';';

                            r[0] = 'BOOLEAN';
                            r[1] = temp;
                            r[2] = '';
                            r[3] = valor;
                            r[4] = '';
                            r[5] = '';
                            r[6] = Number(n.valor)>Number(n1.valor);
                            this.$ = r;
                        }
                        else
                        {
                            semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no existe la variable: ${$$[$0][4]}`+'\"}');
                            this.$ = ['','','',''];
                        }
                    }
                }
                else
                {
                    semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no existe la variable: ${$$[$0-2][4]}`+'\"}');
                    this.$ = ['','','',''];
                }
            }
        }
        else
        {
            semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no se puede ejecutar la operacion, no se puede aplicar  a variables de tipo STRING`+'\"}');
            this.$ = ['','','',''];
        }
    
break;
case 244: case 247:

        if($$[$0-2][0] != 'STRING' && $$[$0][0] != 'STRING')
        {
            if($$[$0-2][0]!= '')
            {
                if($$[$0][0] != '')
                {
                        var valor = '';
                        var r = [];
                        valor += $$[$0-2][3];
                        valor += '\n';
                        valor += $$[$0][3];
                        valor += '\n';

                        var temp = Temp.getTemporal();
                        valor += temp +'='+$$[$0-2][1]+'<'+$$[$0][1]+';';

                        r[0] = 'BOOLEAN';
                        r[1] = temp;
                        r[2] = '';
                        r[3] = valor;
                        r[4] = '';
                        r[5] = '';
                        r[6] = Number($$[$0-2][6])<Number($$[$0][6]);
                        this.$ = r;
                }
                else
                {
                    var n = tab.getPositionAmbito($$[$0][4]);
                    if(n!=null)
                    {
                        var valor = '';
                        var r = [];
                        valor += $$[$0-2][3];
                        valor += '\n';

                        var tempant = Temp.getTemporal();
                        var tempant1 = Temp.getTemporal();

                        valor += tempant +'='+n.position+';\n';
                        valor += tempant1 +'=stack['+tempant+'];\n';

                        var temp = Temp.getTemporal();
                        valor += temp +'='+$$[$0-2][1]+'<'+tempant1+';';

                        r[0] = 'BOOLEAN';
                        r[1] = temp;
                        r[2] = '';
                        r[3] = valor;
                        r[4] = '';
                        r[5] = '';
                        r[6] = Number($$[$0-2][6])<Number(n.valor);
                        this.$ = r;
                    }
                    else
                    {
                        semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no existe la variable: ${$$[$0][4]}`+'\"}');
                        this.$ = ['','','',''];
                    }
                }
            }
            else
            {
                var n = tab.getPositionAmbito($$[$0-2][4]);
                if(n!=null)
                {
                    if($$[$0][0] != '')
                    {
                            var valor = '';
                            var r = [];
                            var tempant = Temp.getTemporal();
                            var tempant1 = Temp.getTemporal();

                            valor += tempant +'='+n.position+';\n';
                            valor += tempant1 +'=stack['+tempant+'];\n';
                            valor += $$[$0][3];
                            valor += '\n';

                            var temp = Temp.getTemporal();
                            valor += temp+'='+tempant1+'<'+$$[$0][1]+';';

                            r[0] = 'BOOLEAN';
                            r[1] = temp;
                            r[2] = '';
                            r[3] = valor;
                            r[4] = '';
                            r[5] = '';
                            r[6] = Number(n.valor)<Number($$[$0][6]);
                            this.$ = r;
                    }
                    else
                    {
                        var n1 = tab.getPositionAmbito($$[$0][4]);
                        if(n1!=null)
                        {
                            var valor = '';
                            var r = [];
                            var tempant = Temp.getTemporal();
                            var tempant1 = Temp.getTemporal();

                            valor += tempant +'='+n.position+';\n';
                            valor += tempant1 +'=stack['+tempant+'];\n';
                            valor += '\n';

                            var tempant11 = Temp.getTemporal();
                            var tempant111 = Temp.getTemporal();

                            valor += tempant11 +'='+n1.position+';\n';
                            valor += tempant111 +'=stack['+tempant11+'];\n';

                            var temp = Temp.getTemporal();
                            valor += temp +'='+tempant1+'<'+tempant111+';';

                            r[0] = 'BOOLEAN';
                            r[1] = temp;
                            r[2] = '';
                            r[3] = valor;
                            r[4] = '';
                            r[5] = '';
                            r[6] = Number(n.valor)<Number(n1.valor);
                            this.$ = r;
                        }
                        else
                        {
                            semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no existe la variable: ${$$[$0][4]}`+'\"}');
                            this.$ = ['','','',''];
                        }
                    }
                }
                else
                {
                    semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no existe la variable: ${$$[$0-2][4]}`+'\"}');
                    this.$ = ['','','',''];
                }
            }
        }
        else
        {
            semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no se puede ejecutar la operacion, no se puede aplicar  a variables de tipo STRING`+'\"}');
            this.$ = ['','','',''];
        }
    
break;
case 250: case 255: case 260:

        if($$[$0-2][0] != 'STRING' && $$[$0][0] != 'STRING')
        {
            if($$[$0-2][0]!= '')
            {
                if($$[$0][0] != '')
                {
                        var valor = '';
                        var r = [];
                        valor += $$[$0-2][3];
                        valor += '\n';
                        valor += $$[$0][3];
                        valor += '\n';

                        var temp = Temp.getTemporal();
                        valor += temp +'='+$$[$0-2][1]+'=='+$$[$0][1]+';';

                        r[0] = 'BOOLEAN';
                        r[1] = temp;
                        r[2] = '';
                        r[3] = valor;
                        r[4] = '';
                        r[5] = '';
                        r[6] = Number($$[$0-2][6])==Number($$[$0][6]);
                        this.$ = r;
                }
                else
                {
                    var n = tab.getPositionAmbito($$[$0][4]);
                    if(n!=null)
                    {
                        var valor = '';
                        var r = [];
                        valor += $$[$0-2][3];
                        valor += '\n';

                        var tempant = Temp.getTemporal();
                        var tempant1 = Temp.getTemporal();

                        valor += tempant +'='+n.position+';\n';
                        valor += tempant1 +'=stack['+tempant+'];\n';

                        var temp = Temp.getTemporal();
                        valor += temp +'='+$$[$0-2][1]+'=='+tempant1+';';

                        r[0] = 'BOOLEAN';
                        r[1] = temp;
                        r[2] = '';
                        r[3] = valor;
                        r[4] = '';
                        r[5] = '';
                        r[6] = Number($$[$0-2][6])==Number(n.valor);
                        this.$ = r;
                    }
                    else
                    {
                        semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no existe la variable: ${$$[$0][4]}`+'\"}');
                        this.$ = ['','','',''];
                    }
                }
            }
            else
            {
                var n = tab.getPositionAmbito($$[$0-2][4]);
                if(n!=null)
                {
                    if($$[$0][0] != '')
                    {
                            var valor = '';
                            var r = [];
                            var tempant = Temp.getTemporal();
                            var tempant1 = Temp.getTemporal();

                            valor += tempant +'='+n.position+';\n';
                            valor += tempant1 +'=stack['+tempant+'];\n';
                            valor += $$[$0][3];
                            valor += '\n';

                            var temp = Temp.getTemporal();
                            valor += temp+'='+tempant1+'=='+$$[$0][1]+';';

                            r[0] = 'BOOLEAN';
                            r[1] = temp;
                            r[2] = '';
                            r[3] = valor;
                            r[4] = '';
                            r[5] = '';
                            r[6] = Number(n.valor)==Number($$[$0][6]);
                            this.$ = r;
                    }
                    else
                    {
                        var n1 = tab.getPositionAmbito($$[$0][4]);
                        if(n1!=null)
                        {
                            var valor = '';
                            var r = [];
                            var tempant = Temp.getTemporal();
                            var tempant1 = Temp.getTemporal();

                            valor += tempant +'='+n.position+';\n';
                            valor += tempant1 +'=stack['+tempant+'];\n';
                            valor += '\n';

                            var tempant11 = Temp.getTemporal();
                            var tempant111 = Temp.getTemporal();

                            valor += tempant11 +'='+n1.position+';\n';
                            valor += tempant111 +'=stack['+tempant11+'];\n';

                            var temp = Temp.getTemporal();
                            valor += temp +'='+tempant1+'=='+tempant111+';';

                            r[0] = 'BOOLEAN';
                            r[1] = temp;
                            r[2] = '';
                            r[3] = valor;
                            r[4] = '';
                            r[5] = '';
                            r[6] = Number(n.valor)==Number(n1.valor);
                            this.$ = r;
                        }
                        else
                        {
                            semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no existe la variable: ${$$[$0][4]}`+'\"}');
                            this.$ = ['','','',''];
                        }
                    }
                }
                else
                {
                    semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no existe la variable: ${$$[$0-2][4]}`+'\"}');
                    this.$ = ['','','',''];
                }
            }
        }
        else
        {
            semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no se puede ejecutar la operacion, no se puede aplicar  a variables de tipo STRING`+'\"}');
            this.$ = ['','','',''];
        }
    
break;
case 251: case 256: case 261:

        if($$[$0-2][0] != 'STRING' && $$[$0][0] != 'STRING')
        {
            if($$[$0-2][0]!= '')
            {
                if($$[$0][0] != '')
                {
                        var valor = '';
                        var r = [];
                        valor += $$[$0-2][3];
                        valor += '\n';
                        valor += $$[$0][3];
                        valor += '\n';

                        var temp = Temp.getTemporal();
                        valor += temp +'='+$$[$0-2][1]+'!='+$$[$0][1]+';';

                        r[0] = 'BOOLEAN';
                        r[1] = temp;
                        r[2] = '';
                        r[3] = valor;
                        r[4] = '';
                        r[5] = '';
                        r[6] = Number($$[$0-2][6])!=Number($$[$0][6]);
                        this.$ = r;
                }
                else
                {
                    var n = tab.getPositionAmbito($$[$0][4]);
                    if(n!=null)
                    {
                        var valor = '';
                        var r = [];
                        valor += $$[$0-2][3];
                        valor += '\n';

                        var tempant = Temp.getTemporal();
                        var tempant1 = Temp.getTemporal();

                        valor += tempant +'='+n.position+';\n';
                        valor += tempant1 +'=stack['+tempant+'];\n';

                        var temp = Temp.getTemporal();
                        valor += temp +'='+$$[$0-2][1]+'!='+tempant1+';';

                        r[0] = 'BOOLEAN';
                        r[1] = temp;
                        r[2] = '';
                        r[3] = valor;
                        r[4] = '';
                        r[5] = '';
                        r[6] = Number($$[$0-2][6])!=Number(n.valor);
                        this.$ = r;
                    }
                    else
                    {
                        semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no existe la variable: ${$$[$0][4]}`+'\"}');
                        this.$ = ['','','',''];
                    }
                }
            }
            else
            {
                var n = tab.getPositionAmbito($$[$0-2][4]);
                if(n!=null)
                {
                    if($$[$0][0] != '')
                    {
                            var valor = '';
                            var r = [];
                            var tempant = Temp.getTemporal();
                            var tempant1 = Temp.getTemporal();

                            valor += tempant +'='+n.position+';\n';
                            valor += tempant1 +'=stack['+tempant+'];\n';
                            valor += $$[$0][3];
                            valor += '\n';

                            var temp = Temp.getTemporal();
                            valor += temp+'='+tempant1+'!='+$$[$0][1]+';';

                            r[0] = 'BOOLEAN';
                            r[1] = temp;
                            r[2] = '';
                            r[3] = valor;
                            r[4] = '';
                            r[5] = '';
                            r[6] = Number(n.valor)!=Number($$[$0][6]);
                            this.$ = r;
                    }
                    else
                    {
                        var n1 = tab.getPositionAmbito($$[$0][4]);
                        if(n1!=null)
                        {
                            var valor = '';
                            var r = [];
                            var tempant = Temp.getTemporal();
                            var tempant1 = Temp.getTemporal();

                            valor += tempant +'='+n.position+';\n';
                            valor += tempant1 +'=stack['+tempant+'];\n';
                            valor += '\n';

                            var tempant11 = Temp.getTemporal();
                            var tempant111 = Temp.getTemporal();

                            valor += tempant11 +'='+n1.position+';\n';
                            valor += tempant111 +'=stack['+tempant11+'];\n';

                            var temp = Temp.getTemporal();
                            valor += temp +'='+tempant1+'!='+tempant111+';';

                            r[0] = 'BOOLEAN';
                            r[1] = temp;
                            r[2] = '';
                            r[3] = valor;
                            r[4] = '';
                            r[5] = '';
                            r[6] = Number(n.valor)!=Number(n1.valor);
                            this.$ = r;
                        }
                        else
                        {
                            semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no existe la variable: ${$$[$0][4]}`+'\"}');
                            this.$ = ['','','',''];
                        }
                    }
                }
                else
                {
                    semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no existe la variable: ${$$[$0-2][4]}`+'\"}');
                    this.$ = ['','','',''];
                }
            }
        }
        else
        {
            semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no se puede ejecutar la operacion, no se puede aplicar  a variables de tipo STRING`+'\"}');
            this.$ = ['','','',''];
        }
    
break;
case 252: case 257: case 262:

        if($$[$0-2][0] != 'STRING' && $$[$0][0] != 'STRING')
        {
            if($$[$0-2][0]!= '')
            {
                if($$[$0][0] != '')
                {
                        var valor = '';
                        var r = [];
                        valor += $$[$0-2][3];
                        valor += '\n';
                        valor += $$[$0][3];
                        valor += '\n';

                        var temp = Temp.getTemporal();
                        valor += temp +'='+$$[$0-2][1]+'>='+$$[$0][1]+';';

                        r[0] = 'BOOLEAN';
                        r[1] = temp;
                        r[2] = '';
                        r[3] = valor;
                        r[4] = '';
                        r[5] = '';
                        r[6] = Number($$[$0-2][6])>=Number($$[$0][6]);
                        this.$ = r;
                }
                else
                {
                    var n = tab.getPositionAmbito($$[$0][4]);
                    if(n!=null)
                    {
                        var valor = '';
                        var r = [];
                        valor += $$[$0-2][3];
                        valor += '\n';

                        var tempant = Temp.getTemporal();
                        var tempant1 = Temp.getTemporal();

                        valor += tempant +'='+n.position+';\n';
                        valor += tempant1 +'=stack['+tempant+'];\n';

                        var temp = Temp.getTemporal();
                        valor += temp +'='+$$[$0-2][1]+'>='+tempant1+';';

                        r[0] = 'BOOLEAN';
                        r[1] = temp;
                        r[2] = '';
                        r[3] = valor;
                        r[4] = '';
                        r[5] = '';
                        r[6] = Number($$[$0-2][6])>=Number(n.valor);
                        this.$ = r;
                    }
                    else
                    {
                        semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no existe la variable: ${$$[$0][4]}`+'\"}');
                        this.$ = ['','','',''];
                    }
                }
            }
            else
            {
                var n = tab.getPositionAmbito($$[$0-2][4]);
                if(n!=null)
                {
                    if($$[$0][0] != '')
                    {
                            var valor = '';
                            var r = [];
                            var tempant = Temp.getTemporal();
                            var tempant1 = Temp.getTemporal();

                            valor += tempant +'='+n.position+';\n';
                            valor += tempant1 +'=stack['+tempant+'];\n';
                            valor += $$[$0][3];
                            valor += '\n';

                            var temp = Temp.getTemporal();
                            valor += temp+'='+tempant1+'>='+$$[$0][1]+';';

                            r[0] = 'BOOLEAN';
                            r[1] = temp;
                            r[2] = '';
                            r[3] = valor;
                            r[4] = '';
                            r[5] = '';
                            r[6] = Number(n.valor)>=Number($$[$0][6]);
                            this.$ = r;
                    }
                    else
                    {
                        var n1 = tab.getPositionAmbito($$[$0][4]);
                        if(n1!=null)
                        {
                            var valor = '';
                            var r = [];
                            var tempant = Temp.getTemporal();
                            var tempant1 = Temp.getTemporal();

                            valor += tempant +'='+n.position+';\n';
                            valor += tempant1 +'=stack['+tempant+'];\n';
                            valor += '\n';

                            var tempant11 = Temp.getTemporal();
                            var tempant111 = Temp.getTemporal();

                            valor += tempant11 +'='+n1.position+';\n';
                            valor += tempant111 +'=stack['+tempant11+'];\n';

                            var temp = Temp.getTemporal();
                            valor += temp +'='+tempant1+'>='+tempant111+';';

                            r[0] = 'BOOLEAN';
                            r[1] = temp;
                            r[2] = '';
                            r[3] = valor;
                            r[4] = '';
                            r[5] = '';
                            r[6] = Number(n.valor)>=Number(n1.valor);
                            this.$ = r;
                        }
                        else
                        {
                            semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no existe la variable: ${$$[$0][4]}`+'\"}');
                            this.$ = ['','','',''];
                        }
                    }
                }
                else
                {
                    semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no existe la variable: ${$$[$0-2][4]}`+'\"}');
                    this.$ = ['','','',''];
                }
            }
        }
        else
        {
            semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no se puede ejecutar la operacion, no se puede aplicar  a variables de tipo STRING`+'\"}');
            this.$ = ['','','',''];
        }
    
break;
case 253: case 258: case 263:

        if($$[$0-2][0] != 'STRING' && $$[$0][0] != 'STRING')
        {
            if($$[$0-2][0]!= '')
            {
                if($$[$0][0] != '')
                {
                        var valor = '';
                        var r = [];
                        valor += $$[$0-2][3];
                        valor += '\n';
                        valor += $$[$0][3];
                        valor += '\n';

                        var temp = Temp.getTemporal();
                        valor += temp +'='+$$[$0-2][1]+'<='+$$[$0][1]+';';

                        r[0] = 'BOOLEAN';
                        r[1] = temp;
                        r[2] = '';
                        r[3] = valor;
                        r[4] = '';
                        r[5] = '';
                        r[6] = Number($$[$0-2][6])<=Number($$[$0][6]);
                        this.$ = r;
                }
                else
                {
                    var n = tab.getPositionAmbito($$[$0][4]);
                    if(n!=null)
                    {
                        var valor = '';
                        var r = [];
                        valor += $$[$0-2][3];
                        valor += '\n';

                        var tempant = Temp.getTemporal();
                        var tempant1 = Temp.getTemporal();

                        valor += tempant +'='+n.position+';\n';
                        valor += tempant1 +'=stack['+tempant+'];\n';

                        var temp = Temp.getTemporal();
                        valor += temp +'='+$$[$0-2][1]+'<='+tempant1+';';

                        r[0] = 'BOOLEAN';
                        r[1] = temp;
                        r[2] = '';
                        r[3] = valor;
                        r[4] = '';
                        r[5] = '';
                        r[6] = Number($$[$0-2][6])<=Number(n.valor);
                        this.$ = r;
                    }
                    else
                    {
                        semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no existe la variable: ${$$[$0][4]}`+'\"}');
                        this.$ = ['','','',''];
                    }
                }
            }
            else
            {
                var n = tab.getPositionAmbito($$[$0-2][4]);
                if(n!=null)
                {
                    if($$[$0][0] != '')
                    {
                            var valor = '';
                            var r = [];
                            var tempant = Temp.getTemporal();
                            var tempant1 = Temp.getTemporal();

                            valor += tempant +'='+n.position+';\n';
                            valor += tempant1 +'=stack['+tempant+'];\n';
                            valor += $$[$0][3];
                            valor += '\n';

                            var temp = Temp.getTemporal();
                            valor += temp+'='+tempant1+'<='+$$[$0][1]+';';

                            r[0] = 'BOOLEAN';
                            r[1] = temp;
                            r[2] = '';
                            r[3] = valor;
                            r[4] = '';
                            r[5] = '';
                            r[6] = Number(n.valor)<=Number($$[$0][6]);
                            this.$ = r;
                    }
                    else
                    {
                        var n1 = tab.getPositionAmbito($$[$0][4]);
                        if(n1!=null)
                        {
                            var valor = '';
                            var r = [];
                            var tempant = Temp.getTemporal();
                            var tempant1 = Temp.getTemporal();

                            valor += tempant +'='+n.position+';\n';
                            valor += tempant1 +'=stack['+tempant+'];\n';
                            valor += '\n';

                            var tempant11 = Temp.getTemporal();
                            var tempant111 = Temp.getTemporal();

                            valor += tempant11 +'='+n1.position+';\n';
                            valor += tempant111 +'=stack['+tempant11+'];\n';

                            var temp = Temp.getTemporal();
                            valor += temp +'='+tempant1+'<='+tempant111+';';

                            r[0] = 'BOOLEAN';
                            r[1] = temp;
                            r[2] = '';
                            r[3] = valor;
                            r[4] = '';
                            r[5] = '';
                            r[6] = Number(n.valor)<=Number(n1.valor);
                            this.$ = r;
                        }
                        else
                        {
                            semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no existe la variable: ${$$[$0][4]}`+'\"}');
                            this.$ = ['','','',''];
                        }
                    }
                }
                else
                {
                    semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no existe la variable: ${$$[$0-2][4]}`+'\"}');
                    this.$ = ['','','',''];
                }
            }
        }
        else
        {
            semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no se puede ejecutar la operacion, no se puede aplicar  a variables de tipo STRING`+'\"}');
            this.$ = ['','','',''];
        }
    
break;
case 265:

        if($$[$0-2][0] != 'STRING' && $$[$0][0] != 'STRING')
        {
            if($$[$0-2][0]!= '' && $$[$0-2][0] == 'BOOLEAN')
            {
                if($$[$0][0] != '' && $$[$0][0] == 'BOOLEAN')
                {
                        var valor = '';
                        var r = [];
                        valor += $$[$0-2][3];
                        valor += '\n';
                        valor += $$[$0][3];
                        valor += '\n';

                        var temp = Temp.getTemporal();
                        var label0 = Label.getBandera();
                        var label1 = Label.getBandera();
                        var label2 = Label.getBandera();
                        var label3 = Label.getBandera();
                        var label4 = Label.getBandera();

                        valor += label0 + ':\n';
                        valor += '\t if('+$$[$0-2][1]+'==1) goto '+label1+';\n';
                        valor += '\t goto '+label3+';\n';
                        valor += label1 + ':\n';
                        valor += '\t if('+$$[$0][1]+'==1) goto '+label2+';\n';
                        valor += '\t goto '+label3+';\n';
                        valor += label2 + ':\n';
                        valor += '\t' + temp + '=1;\n';
                        valor += '\t goto '+label4+';\n';
                        valor += label3 + ':\n';
                        valor += '\t' + temp + '=0;\n';
                        valor += '\t goto '+label4+';\n';
                        valor += label4 + ':\n';


                        r[0] = 'BOOLEAN';
                        r[1] = temp;
                        r[2] = label4;
                        r[3] = valor;
                        r[4] = '';
                        r[5] = '';
                        r[6] = Boolean($$[$0-2][6]) && Boolean($$[$0][6]);
                        this.$ = r;
                }
                else
                {
                    var n = tab.getPositionAmbito($$[$0][4]);
                    if(n!=null && n.tipo.toUpperCase() == 'BOOLEAN')
                    {
                        var valor = '';
                        var r = [];
                        valor += $$[$0-2][3];
                        valor += '\n';

                        var tempant = Temp.getTemporal();
                        var tempant1 = Temp.getTemporal();

                        valor += tempant +'='+n.position+';\n';
                        valor += tempant1 +'=stack['+tempant+'];\n';

                        var temp = Temp.getTemporal();
                        var label0 = Label.getBandera();
                        var label1 = Label.getBandera();
                        var label2 = Label.getBandera();
                        var label3 = Label.getBandera();
                        var label4 = Label.getBandera();

                        valor += label0 + ':\n';
                        valor += '\t if('+$$[$0-2][1]+'==1) goto '+label1+';\n';
                        valor += '\t goto '+label3+';\n';
                        valor += label1 + ':\n';
                        valor += '\t if('+tempant1+'==1) goto '+label2+';\n';
                        valor += '\t goto '+label3+';\n';
                        valor += label2 + ':\n';
                        valor += '\t' + temp + '=1;\n';
                        valor += '\t goto '+label4+';\n';
                        valor += label3 + ':\n';
                        valor += '\t' + temp + '=0;\n';
                        valor += '\t goto '+label4+';\n';
                        valor += label4 + ':\n';


                        r[0] = 'BOOLEAN';
                        r[1] = temp;
                        r[2] = label4;
                        r[3] = valor;
                        r[4] = '';
                        r[5] = '';
                        r[6] = Boolean($$[$0-2][6]) && Boolean(n.valor);
                        this.$ = r;
                    }
                    else
                    {
                        semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no existe la variable: ${$$[$0][4]}, de tipo booleano`+'\"}');
                        this.$ = ['','','',''];
                    }
                }
            }
            else
            {
                var n = tab.getPositionAmbito($$[$0-2][4]);
                if(n!=null && n.tipo.toUpperCase() == 'BOOLEAN')
                {
                    if($$[$0][0] != '' && $$[$0][0] == 'BOOLEAN')
                    {
                            var valor = '';
                            var r = [];
                            var tempant = Temp.getTemporal();
                            var tempant1 = Temp.getTemporal();

                            valor += tempant +'='+n.position+';\n';
                            valor += tempant1 +'=stack['+tempant+'];\n';
                            valor += $$[$0][3];
                            valor += '\n';

                            var temp = Temp.getTemporal();
                            var label0 = Label.getBandera();
                            var label1 = Label.getBandera();
                            var label2 = Label.getBandera();
                            var label3 = Label.getBandera();
                            var label4 = Label.getBandera();

                            valor += label0 + ':\n';
                            valor += '\t if('+tempant1+'==1) goto '+label1+';\n';
                            valor += '\t goto '+label3+';\n';
                            valor += label1 + ':\n';
                            valor += '\t if('+$$[$0][1]+'==1) goto '+label2+';\n';
                            valor += '\t goto '+label3+';\n';
                            valor += label2 + ':\n';
                            valor += '\t' + temp + '=1;\n';
                            valor += '\t goto '+label4+';\n';
                            valor += label3 + ':\n';
                            valor += '\t' + temp + '=0;\n';
                            valor += '\t goto '+label4+';\n';
                            valor += label4 + ':\n';


                            r[0] = 'BOOLEAN';
                            r[1] = temp;
                            r[2] = label4;
                            r[3] = valor;
                            r[4] = '';
                            r[5] = '';
                            r[6] = Boolean(n.valor) && Boolean($$[$0][6]);
                            this.$ = r;
                    }
                    else
                    {
                        var n1 = tab.getPositionAmbito($$[$0][4]);
                        if(n1!=null && n1.tipo.toUpperCase() == 'BOOLEAN')
                        {
                            var valor = '';
                            var r = [];
                            var tempant = Temp.getTemporal();
                            var tempant1 = Temp.getTemporal();

                            valor += tempant +'='+n.position+';\n';
                            valor += tempant1 +'=stack['+tempant+'];\n';
                            valor += '\n';

                            var tempant11 = Temp.getTemporal();
                            var tempant111 = Temp.getTemporal();

                            valor += tempant11 +'='+n1.position+';\n';
                            valor += tempant111 +'=stack['+tempant11+'];\n';

                            var temp = Temp.getTemporal();
                            var label0 = Label.getBandera();
                            var label1 = Label.getBandera();
                            var label2 = Label.getBandera();
                            var label3 = Label.getBandera();
                            var label4 = Label.getBandera();

                            valor += label0 + ':\n';
                            valor += '\t if('+tempant1+'==1) goto '+label1+';\n';
                            valor += '\t goto '+label3+';\n';
                            valor += label1 + ':\n';
                            valor += '\t if('+tempant111+'==1) goto '+label2+';\n';
                            valor += '\t goto '+label3+';\n';
                            valor += label2 + ':\n';
                            valor += '\t' + temp + '=1;\n';
                            valor += '\t goto '+label4+';\n';
                            valor += label3 + ':\n';
                            valor += '\t' + temp + '=0;\n';
                            valor += '\t goto '+label4+';\n';
                            valor += label4 + ':\n';


                            r[0] = 'BOOLEAN';
                            r[1] = temp;
                            r[2] = label4;
                            r[3] = valor;
                            r[4] = '';
                            r[5] = '';
                            r[6] = Boolean(n.valor) && Boolean(n1.valor);
                            this.$ = r;
                        }
                        else
                        {
                            semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no existe la variable: ${$$[$0][4]}, de tipo booleano`+'\"}');
                            this.$ = ['','','',''];
                        }
                    }
                }
                else
                {
                    semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no existe la variable: ${$$[$0-2][4]}, de tipo booleano.`+'\"}');
                    this.$ = ['','','',''];
                }
            }
        }
        else
        {
            semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no se puede ejecutar la operacion, unicamente variables de tipo BOOLEANO.`+'\"}');
            this.$ = ['','','',''];
        }
    
break;
case 267:

        if($$[$0-2][0] != 'STRING' && $$[$0][0] != 'STRING')
        {
            if($$[$0-2][0]!= '' && $$[$0-2][0] == 'BOOLEAN')
            {
                if($$[$0][0] != '' && $$[$0][0] == 'BOOLEAN')
                {
                        var valor = '';
                        var r = [];
                        valor += $$[$0-2][3];
                        valor += '\n';
                        valor += $$[$0][3];
                        valor += '\n';

                        var temp = Temp.getTemporal();
                        var label0 = Label.getBandera();
                        var label1 = Label.getBandera();
                        var label2 = Label.getBandera();
                        var label3 = Label.getBandera();
                        var label4 = Label.getBandera();

                        valor += label0 + ':\n';
                        valor += '\t if('+$$[$0-2][1]+'==1) goto '+label1+';\n';
                        valor += '\t goto '+label3+';\n';
                        valor += label1 + ':\n';
                        valor += '\t if('+$$[$0][1]+'==1) goto '+label2+';\n';
                        valor += '\t goto '+label3+';\n';
                        valor += label2 + ':\n';
                        valor += '\t' + temp + '=1;\n';
                        valor += '\t goto '+label4+';\n';
                        valor += label3 + ':\n';
                        valor += '\t' + temp + '=0;\n';
                        valor += '\t goto '+label4+';\n';
                        valor += label4 + ':\n';


                        r[0] = 'BOOLEAN';
                        r[1] = temp;
                        r[2] = label4;
                        r[3] = valor;
                        r[4] = '';
                        r[5] = '';
                        r[6] = Boolean($$[$0-2][6]) && Boolean($$[$0][6]);
                        this.$ = r;
                }
                else
                {
                    var n = tab.getPositionAmbito($$[$0][4]);
                    if(n!=null && n.tipo.toUpperCase() == 'BOOLEAN')
                    {
                        var valor = '';
                        var r = [];
                        valor += $$[$0-2][3];
                        valor += '\n';

                        var tempant = Temp.getTemporal();
                        var tempant1 = Temp.getTemporal();

                        valor += tempant +'='+n.position+';\n';
                        valor += tempant1 +'=stack['+tempant+'];\n';

                        var temp = Temp.getTemporal();
                        var label0 = Label.getBandera();
                        var label1 = Label.getBandera();
                        var label2 = Label.getBandera();
                        var label3 = Label.getBandera();
                        var label4 = Label.getBandera();

                        valor += label0 + ':\n';
                        valor += '\t if('+$$[$0-2][1]+'==1) goto '+label1+';\n';
                        valor += '\t goto '+label3+';\n';
                        valor += label1 + ':\n';
                        valor += '\t if('+tempant1+'==1) goto '+label2+';\n';
                        valor += '\t goto '+label3+';\n';
                        valor += label2 + ':\n';
                        valor += '\t' + temp + '=1;\n';
                        valor += '\t goto '+label4+';\n';
                        valor += label3 + ':\n';
                        valor += '\t' + temp + '=0;\n';
                        valor += '\t goto '+label4+';\n';
                        valor += label4 + ':\n';


                        r[0] = 'BOOLEAN';
                        r[1] = temp;
                        r[2] = label4;
                        r[3] = valor;
                        r[4] = '';
                        r[5] = '';
                        r[6] = Boolean($$[$0-2][6]) && Boolean(n.valor);
                        this.$ = r;
                    }
                    else
                    {
                        semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no existe la variable: ${$$[$0][4]}, de tipo booleano`+'\"}');
                        this.$ = ['','','',''];
                    }
                }
            }
            else
            {
                var n = tab.getPositionAmbito($$[$0-2][4]);
                if(n!=null && n.tipo.toUpperCase() == 'BOOLEAN')
                {
                    if($$[$0][0] != '' && $$[$0][0] == 'BOOLEAN')
                    {
                            var valor = '';
                            var r = [];
                            var tempant = Temp.getTemporal();
                            var tempant1 = Temp.getTemporal();

                            valor += tempant +'='+n.position+';\n';
                            valor += tempant1 +'=stack['+tempant+'];\n';
                            valor += $$[$0][3];
                            valor += '\n';

                            var temp = Temp.getTemporal();
                            var label0 = Label.getBandera();
                            var label1 = Label.getBandera();
                            var label2 = Label.getBandera();
                            var label3 = Label.getBandera();
                            var label4 = Label.getBandera();

                            valor += label0 + ':\n';
                            valor += '\t if('+tempant1+'==1) goto '+label1+';\n';
                            valor += '\t goto '+label3+';\n';
                            valor += label1 + ':\n';
                            valor += '\t if('+$$[$0][1]+'==1) goto '+label2+';\n';
                            valor += '\t goto '+label3+';\n';
                            valor += label2 + ':\n';
                            valor += '\t' + temp + '=1;\n';
                            valor += '\t goto '+label4+';\n';
                            valor += label3 + ':\n';
                            valor += '\t' + temp + '=0;\n';
                            valor += '\t goto '+label4+';\n';
                            valor += label4 + ':\n';


                            r[0] = 'BOOLEAN';
                            r[1] = temp;
                            r[2] = label4;
                            r[3] = valor;
                            r[4] = '';
                            r[5] = '';
                            r[6] = Boolean(n.valor) && Boolean($$[$0][6]);
                            this.$ = r;
                    }
                    else
                    {
                        var n1 = tab.getPositionAmbito($$[$0][4]);
                        if(n1!=null && n1.tipo.toUpperCase() == 'BOOLEAN')
                        {
                            var valor = '';
                            var r = [];
                            var tempant = Temp.getTemporal();
                            var tempant1 = Temp.getTemporal();

                            valor += tempant +'='+n.position+';\n';
                            valor += tempant1 +'=stack['+tempant+'];\n';
                            valor += '\n';

                            var tempant11 = Temp.getTemporal();
                            var tempant111 = Temp.getTemporal();

                            valor += tempant11 +'='+n1.position+';\n';
                            valor += tempant111 +'=stack['+tempant11+'];\n';

                            var temp = Temp.getTemporal();
                            var label0 = Label.getBandera();
                            var label1 = Label.getBandera();
                            var label2 = Label.getBandera();
                            var label3 = Label.getBandera();
                            var label4 = Label.getBandera();

                            valor += label0 + ':\n';
                            valor += '\t if('+tempant1+'==1) goto '+label1+';\n';
                            valor += '\t goto '+label3+';\n';
                            valor += label1 + ':\n';
                            valor += '\t if('+tempant111+'==1) goto '+label2+';\n';
                            valor += '\t goto '+label3+';\n';
                            valor += label2 + ':\n';
                            valor += '\t' + temp + '=1;\n';
                            valor += '\t goto '+label4+';\n';
                            valor += label3 + ':\n';
                            valor += '\t' + temp + '=0;\n';
                            valor += '\t goto '+label4+';\n';
                            valor += label4 + ':\n';


                            r[0] = 'BOOLEAN';
                            r[1] = temp;
                            r[2] = label4;
                            r[3] = valor;
                            r[4] = '';
                            r[5] = '';
                            r[6] = Boolean(n.valor) && Boolean(n1.valor);
                            this.$ = r;
                        }
                        else
                        {
                            semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no existe la variable: ${$$[$0][4]}, de tipo booleano`+'\"}');
                            this.$ = ['','','',''];
                        }
                    }
                }
            }
        }
        else
        {
            semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no se puede ejecutar la operacion, unicamente variables de tipo BOOLEANO`+'\"}');
            this.$ = ['','','',''];
        }
    
break;
case 269:

        if($$[$0-2][0] != 'STRING' && $$[$0][0] != 'STRING')
        {
            if($$[$0-2][0]!= '' && $$[$0-2][0] == 'BOOLEAN')
            {
                if($$[$0][0] != '' && $$[$0][0] == 'BOOLEAN')
                {
                        var valor = '';
                        var r = [];
                        valor += $$[$0-2][3];
                        valor += '\n';
                        valor += $$[$0][3];
                        valor += '\n';

                        var temp = Temp.getTemporal();
                        var label0 = Label.getBandera();
                        var label1 = Label.getBandera();
                        var label2 = Label.getBandera();
                        var label3 = Label.getBandera();
                        var label4 = Label.getBandera();

                        valor += label0 + ':\n';
                        valor += '\t if('+$$[$0-2][1]+'==1) goto '+label1+';\n';
                        valor += '\t goto '+label3+';\n';
                        valor += label1 + ':\n';
                        valor += '\t if('+$$[$0][1]+'==1) goto '+label2+';\n';
                        valor += '\t goto '+label3+';\n';
                        valor += label2 + ':\n';
                        valor += '\t' + temp + '=1;\n';
                        valor += '\t goto '+label4+';\n';
                        valor += label3 + ':\n';
                        valor += '\t' + temp + '=0;\n';
                        valor += '\t goto '+label4+';\n';
                        valor += label4 + ':\n';


                        r[0] = 'BOOLEAN';
                        r[1] = temp;
                        r[2] = label4;
                        r[3] = valor;
                        r[4] = '';
                        r[5] = '';
                        r[6] = Boolean($$[$0-2][6]) && Boolean($$[$0][6]);
                        this.$ = r;
                }
                else
                {
                    var n = tab.getPositionAmbito($$[$0][4]);
                    if(n!=null && n.tipo.toUpperCase() == 'BOOLEAN')
                    {
                        var valor = '';
                        var r = [];
                        valor += $$[$0-2][3];
                        valor += '\n';

                        var tempant = Temp.getTemporal();
                        var tempant1 = Temp.getTemporal();

                        valor += tempant +'='+n.position+';\n';
                        valor += tempant1 +'=stack['+tempant+'];\n';

                        var temp = Temp.getTemporal();
                        var label0 = Label.getBandera();
                        var label1 = Label.getBandera();
                        var label2 = Label.getBandera();
                        var label3 = Label.getBandera();
                        var label4 = Label.getBandera();

                        valor += label0 + ':\n';
                        valor += '\t if('+$$[$0-2][1]+'==1) goto '+label1+';\n';
                        valor += '\t goto '+label3+';\n';
                        valor += label1 + ':\n';
                        valor += '\t if('+tempant1+'==1) goto '+label2+';\n';
                        valor += '\t goto '+label3+';\n';
                        valor += label2 + ':\n';
                        valor += '\t' + temp + '=1;\n';
                        valor += '\t goto '+label4+';\n';
                        valor += label3 + ':\n';
                        valor += '\t' + temp + '=0;\n';
                        valor += '\t goto '+label4+';\n';
                        valor += label4 + ':\n';


                        r[0] = 'BOOLEAN';
                        r[1] = temp;
                        r[2] = label4;
                        r[3] = valor;
                        r[4] = '';
                        r[5] = '';
                        r[6] = Boolean($$[$0-2][6]) && Boolean(n.valor);
                        this.$ = r;
                    }
                    else
                    {
                        semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no existe la variable: ${$$[$0][4]}, de tipo booleano`+'\"}');
                        this.$ = ['','','',''];
                    }
                }
            }
            else if($$[$0-2][0] == '')
            {
                var n = tab.getPositionAmbito($$[$0-2][4]);
                if(n!=null && n.tipo.toUpperCase() == 'BOOLEAN')
                {
                    if($$[$0][0] != '' && $$[$0][0] == 'BOOLEAN')
                    {
                            var valor = '';
                            var r = [];
                            var tempant = Temp.getTemporal();
                            var tempant1 = Temp.getTemporal();

                            valor += tempant +'='+n.position+';\n';
                            valor += tempant1 +'=stack['+tempant+'];\n';
                            valor += $$[$0][3];
                            valor += '\n';

                            var temp = Temp.getTemporal();
                            var label0 = Label.getBandera();
                            var label1 = Label.getBandera();
                            var label2 = Label.getBandera();
                            var label3 = Label.getBandera();
                            var label4 = Label.getBandera();

                            valor += label0 + ':\n';
                            valor += '\t if('+tempant1+'==1) goto '+label1+';\n';
                            valor += '\t goto '+label3+';\n';
                            valor += label1 + ':\n';
                            valor += '\t if('+$$[$0][1]+'==1) goto '+label2+';\n';
                            valor += '\t goto '+label3+';\n';
                            valor += label2 + ':\n';
                            valor += '\t' + temp + '=1;\n';
                            valor += '\t goto '+label4+';\n';
                            valor += label3 + ':\n';
                            valor += '\t' + temp + '=0;\n';
                            valor += '\t goto '+label4+';\n';
                            valor += label4 + ':\n';


                            r[0] = 'BOOLEAN';
                            r[1] = temp;
                            r[2] = label4;
                            r[3] = valor;
                            r[4] = '';
                            r[5] = '';
                            r[6] = Boolean(n.valor) && Boolean($$[$0][6]);
                            this.$ = r;
                    }
                    else
                    {
                        var n1 = tab.getPositionAmbito($$[$0][4]);
                        if(n1!=null && n1.tipo.toUpperCase() == 'BOOLEAN')
                        {
                            var valor = '';
                            var r = [];
                            var tempant = Temp.getTemporal();
                            var tempant1 = Temp.getTemporal();

                            valor += tempant +'='+n.position+';\n';
                            valor += tempant1 +'=stack['+tempant+'];\n';
                            valor += '\n';

                            var tempant11 = Temp.getTemporal();
                            var tempant111 = Temp.getTemporal();

                            valor += tempant11 +'='+n1.position+';\n';
                            valor += tempant111 +'=stack['+tempant11+'];\n';

                            var temp = Temp.getTemporal();
                            var label0 = Label.getBandera();
                            var label1 = Label.getBandera();
                            var label2 = Label.getBandera();
                            var label3 = Label.getBandera();
                            var label4 = Label.getBandera();

                            valor += label0 + ':\n';
                            valor += '\t if('+tempant1+'==1) goto '+label1+';\n';
                            valor += '\t goto '+label3+';\n';
                            valor += label1 + ':\n';
                            valor += '\t if('+tempant111+'==1) goto '+label2+';\n';
                            valor += '\t goto '+label3+';\n';
                            valor += label2 + ':\n';
                            valor += '\t' + temp + '=1;\n';
                            valor += '\t goto '+label4+';\n';
                            valor += label3 + ':\n';
                            valor += '\t' + temp + '=0;\n';
                            valor += '\t goto '+label4+';\n';
                            valor += label4 + ':\n';


                            r[0] = 'BOOLEAN';
                            r[1] = temp;
                            r[2] = label4;
                            r[3] = valor;
                            r[4] = '';
                            r[5] = '';
                            r[6] = Boolean(n.valor) && Boolean(n1.valor);
                            this.$ = r;
                        }
                        else
                        {
                            semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no existe la variable: ${$$[$0][4]}, de tipo booleano`+'\"}');
                            this.$ = ['','','',''];
                        }
                    }
                }
                else
                {
                    semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no existe la variable: ${$$[$0-2][4]}, de tipo booleano`+'\"}');
                    this.$ = ['','','',''];
                }
            }
            else
            {
                semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no se puede ejecutar la operacion`+'\"}');
                this.$ = ['','','',''];
            }
        }
        else
        {
            semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no se puede ejecutar la operacion, unicamente valores de tipo BOOLEANO`+'\"}');
            this.$ = ['','','',''];
        }
    
break;
case 271:

        if($$[$0-2][0] != 'STRING' && $$[$0][0] != 'STRING')
        {
            if($$[$0-2][0]!= '' && $$[$0-2][0] == 'BOOLEAN')
            {
                if($$[$0][0] != '' && $$[$0][0] == 'BOOLEAN')
                {
                        var valor = '';
                        var r = [];
                        valor += $$[$0-2][3];
                        valor += '\n';
                        valor += $$[$0][3];
                        valor += '\n';

                        var temp = Temp.getTemporal();
                        var label0 = Label.getBandera();
                        var label1 = Label.getBandera();
                        var label2 = Label.getBandera();
                        var label3 = Label.getBandera();
                        var label4 = Label.getBandera();
                        var label5 = Label.getBandera();

                        valor += label0 + ':\n';
                        valor += '\t if('+$$[$0-2][1]+'==1) goto '+label1+';\n';
                        valor += '\t goto '+label3+';\n';
                        valor += label1 + ':\n';
                        valor += '\t if('+$$[$0][1]+'==1) goto '+label2+';\n';
                        valor += '\t goto '+label2+';\n';
                        valor += label2 + ':\n';
                        valor += '\t' + temp + '=1;\n';
                        valor += '\t goto '+label4+';\n';
                        valor += label3 + ':\n';
                        valor += '\t if('+$$[$0][1]+'==1) goto '+label2+';\n';
                        valor += '\t goto '+label5+';\n';
                        valor += label5 + ':\n';
                        valor += '\t' + temp + '=0;\n';
                        valor += '\t goto '+label4+';\n';
                        valor += label4 + ':\n';


                        r[0] = 'BOOLEAN';
                        r[1] = temp;
                        r[2] = label4;
                        r[3] = valor;
                        r[4] = '';
                        r[5] = '';
                        r[6] = Boolean($$[$0-2][6]) || Boolean($$[$0][6]);
                        this.$ = r;
                }
                else
                {
                    var n = tab.getPositionAmbito($$[$0][4]);
                    if(n!=null && n.tipo.toUpperCase() == 'BOOLEAN' )
                    {
                        var valor = '';
                        var r = [];
                        valor += $$[$0-2][3];
                        valor += '\n';

                        var tempant = Temp.getTemporal();
                        var tempant1 = Temp.getTemporal();

                        valor += tempant +'='+n.position+';\n';
                        valor += tempant1 +'=stack['+tempant+'];\n';

                        var temp = Temp.getTemporal();
                        var label0 = Label.getBandera();
                        var label1 = Label.getBandera();
                        var label2 = Label.getBandera();
                        var label3 = Label.getBandera();
                        var label4 = Label.getBandera();
                        var label5 = Label.getBandera();

                        valor += label0 + ':\n';
                        valor += '\t if('+$$[$0-2][1]+'==1) goto '+label1+';\n';
                        valor += '\t goto '+label3+';\n';
                        valor += label1 + ':\n';
                        valor += '\t if('+tempant1+'==1) goto '+label2+';\n';
                        valor += '\t goto '+label2+';\n';
                        valor += label2 + ':\n';
                        valor += '\t' + temp + '=1;\n';
                        valor += '\t goto '+label4+';\n';
                        valor += label3 + ':\n';
                        valor += '\t if('+tempant1+'==1) goto '+label2+';\n';
                        valor += '\t goto '+label5+';\n';
                        valor += label5 + ':\n';
                        valor += '\t' + temp + '=0;\n';
                        valor += '\t goto '+label4+';\n';
                        valor += label4 + ':\n';


                        r[0] = 'BOOLEAN';
                        r[1] = temp;
                        r[2] = label4;
                        r[3] = valor;
                        r[4] = '';
                        r[5] = '';
                        r[6] = Boolean($$[$0-2][6]) || Boolean($$[$0][6]);
                        this.$ = r;
                    }
                    else
                    {
                        semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no existe la variable: ${$$[$0][4]}`+'\"}');
                        this.$ = ['','','',''];
                    }
                }
            }
            else if($$[$0-2][0] == '')
            {
                var n = tab.getPositionAmbito($$[$0-2][4]);
                if(n!=null && n.tipo.toUpperCase() == 'BOOLEAN')
                {
                    if($$[$0][0] != '' && $$[$0][0] == 'BOOLEAN')
                    {
                            var valor = '';
                            var r = [];
                            var tempant = Temp.getTemporal();
                            var tempant1 = Temp.getTemporal();

                            valor += tempant +'='+n.position+';\n';
                            valor += tempant1 +'=stack['+tempant+'];\n';
                            valor += $$[$0][3];
                            valor += '\n';

                            var temp = Temp.getTemporal();
                            var label0 = Label.getBandera();
                            var label1 = Label.getBandera();
                            var label2 = Label.getBandera();
                            var label3 = Label.getBandera();
                            var label4 = Label.getBandera();
                            var label5 = Label.getBandera();

                            valor += label0 + ':\n';
                            valor += '\t if('+tempant1+'==1) goto '+label1+';\n';
                            valor += '\t goto '+label3+';\n';
                            valor += label1 + ':\n';
                            valor += '\t if('+$$[$0][1]+'==1) goto '+label2+';\n';
                            valor += '\t goto '+label2+';\n';
                            valor += label2 + ':\n';
                            valor += '\t' + temp + '=1;\n';
                            valor += '\t goto '+label4+';\n';
                            valor += label3 + ':\n';
                            valor += '\t if('+$$[$0][1]+'==1) goto '+label2+';\n';
                            valor += '\t goto '+label5+';\n';
                            valor += label5 + ':\n';
                            valor += '\t' + temp + '=0;\n';
                            valor += '\t goto '+label4+';\n';
                            valor += label4 + ':\n';


                            r[0] = 'BOOLEAN';
                            r[1] = temp;
                            r[2] = label4;
                            r[3] = valor;
                            r[4] = '';
                            r[5] = '';
                            r[6] = Boolean($$[$0-2][6]) && Boolean($$[$0][6]);
                            this.$ = r;
                    }
                    else
                    {
                        var n1 = tab.getPositionAmbito($$[$0][4]);
                        if(n1!=null && n1.tipo.toUpperCase() == 'BOOLEAN')
                        {
                            var valor = '';
                            var r = [];
                            var tempant = Temp.getTemporal();
                            var tempant1 = Temp.getTemporal();

                            valor += tempant +'='+n.position+';\n';
                            valor += tempant1 +'=stack['+tempant+'];\n';
                            valor += '\n';

                            var tempant11 = Temp.getTemporal();
                            var tempant111 = Temp.getTemporal();

                            valor += tempant11 +'='+n1.position+';\n';
                            valor += tempant111 +'=stack['+tempant11+'];\n';

                            var temp = Temp.getTemporal();
                            var label0 = Label.getBandera();
                            var label1 = Label.getBandera();
                            var label2 = Label.getBandera();
                            var label3 = Label.getBandera();
                            var label4 = Label.getBandera();
                            var label5 = Label.getBandera();

                            valor += label0 + ':\n';
                            valor += '\t if('+tempant1+'==1) goto '+label1+';\n';
                            valor += '\t goto '+label3+';\n';
                            valor += label1 + ':\n';
                            valor += '\t if('+tempant11+'==1) goto '+label2+';\n';
                            valor += '\t goto '+label2+';\n';
                            valor += label2 + ':\n';
                            valor += '\t' + temp + '=1;\n';
                            valor += '\t goto '+label4+';\n';
                            valor += label3 + ':\n';
                            valor += '\t if('+tempant11+'==1) goto '+label2+';\n';
                            valor += '\t goto '+label5+';\n';
                            valor += label5 + ':\n';
                            valor += '\t' + temp + '=0;\n';
                            valor += '\t goto '+label4+';\n';
                            valor += label4 + ':\n';


                            r[0] = 'BOOLEAN';
                            r[1] = temp;
                            r[2] = label4;
                            r[3] = valor;
                            r[4] = '';
                            r[5] = '';
                            r[6] = Boolean($$[$0-2][6]) && Boolean($$[$0][6]);
                            this.$ = r;
                        }
                        else
                        {
                            semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no existe la variable: ${$$[$0][4]}, de tipo booleano`+'\"}');
                            this.$ = ['','','',''];
                        }
                    }
                }
                else
                {
                    semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no existe la variable: ${$$[$0-2][4]}, de tipo booleano`+'\"}');
                    this.$ = ['','','',''];
                }
            }
            else
            {
                semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no se puede ejecutar la operacion`+'\"}');
                this.$ = ['','','',''];
            }
        }
        else
        {
            semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no se puede ejecutar la operacion, unicamente variables de tipo BOOLEANO`+'\"}');
            this.$ = ['','','',''];
        }
    
break;
case 273:

        if($$[$0-2][0] != 'STRING' && $$[$0][0] != 'STRING')
        {
            if($$[$0-2][0]!= '' && $$[$0-2][0] == 'BOOLEAN')
            {
                if($$[$0][0] != '' && $$[$0][0] == 'BOOLEAN')
                {
                        var valor = '';
                        var r = [];
                        valor += $$[$0-2][3];
                        valor += '\n';
                        valor += $$[$0][3];
                        valor += '\n';

                        var temp = Temp.getTemporal();
                        var label0 = Label.getBandera();
                        var label1 = Label.getBandera();
                        var label2 = Label.getBandera();
                        var label3 = Label.getBandera();
                        var label4 = Label.getBandera();
                        var label5 = Label.getBandera();

                        valor += label0 + ':\n';
                        valor += '\t if('+$$[$0-2][1]+'==1) goto '+label1+';\n';
                        valor += '\t goto '+label3+';\n';
                        valor += label1 + ':\n';
                        valor += '\t if('+$$[$0][1]+'==1) goto '+label2+';\n';
                        valor += '\t goto '+label2+';\n';
                        valor += label2 + ':\n';
                        valor += '\t' + temp + '=1;\n';
                        valor += '\t goto '+label4+';\n';
                        valor += label3 + ':\n';
                        valor += '\t if('+$$[$0][1]+'==1) goto '+label2+';\n';
                        valor += '\t goto '+label5+';\n';
                        valor += label5 + ':\n';
                        valor += '\t' + temp + '=0;\n';
                        valor += '\t goto '+label4+';\n';
                        valor += label4 + ':\n';


                        r[0] = 'BOOLEAN';
                        r[1] = temp;
                        r[2] = label4;
                        r[3] = valor;
                        r[4] = '';
                        r[5] = '';
                        r[6] = Boolean($$[$0-2][6]) || Boolean($$[$0][6]);
                        this.$ = r;
                }
                else
                {
                    var n = tab.getPositionAmbito($$[$0][4]);
                    if(n!=null && n.tipo.toUpperCase() == 'BOOLEAN')
                    {
                        var valor = '';
                        var r = [];
                        valor += $$[$0-2][3];
                        valor += '\n';

                        var tempant = Temp.getTemporal();
                        var tempant1 = Temp.getTemporal();

                        valor += tempant +'='+n.position+';\n';
                        valor += tempant1 +'=stack['+tempant+'];\n';

                        var temp = Temp.getTemporal();
                        var label0 = Label.getBandera();
                        var label1 = Label.getBandera();
                        var label2 = Label.getBandera();
                        var label3 = Label.getBandera();
                        var label4 = Label.getBandera();
                        var label5 = Label.getBandera();

                        valor += label0 + ':\n';
                        valor += '\t if('+$$[$0-2][1]+'==1) goto '+label1+';\n';
                        valor += '\t goto '+label3+';\n';
                        valor += label1 + ':\n';
                        valor += '\t if('+tempant1+'==1) goto '+label2+';\n';
                        valor += '\t goto '+label2+';\n';
                        valor += label2 + ':\n';
                        valor += '\t' + temp + '=1;\n';
                        valor += '\t goto '+label4+';\n';
                        valor += label3 + ':\n';
                        valor += '\t if('+tempant1+'==1) goto '+label2+';\n';
                        valor += '\t goto '+label5+';\n';
                        valor += label5 + ':\n';
                        valor += '\t' + temp + '=0;\n';
                        valor += '\t goto '+label4+';\n';
                        valor += label4 + ':\n';


                        r[0] = 'BOOLEAN';
                        r[1] = temp;
                        r[2] = label4;
                        r[3] = valor;
                        r[4] = '';
                        r[5] = '';
                        r[6] = Boolean($$[$0-2][6]) || Boolean($$[$0][6]);
                        this.$ = r;
                    }
                    else
                    {
                        semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no existe la variable: ${$$[$0][4]}, de tipo booleano`+'\"}');
                        this.$ = ['','','',''];
                    }
                }
            }
            else if($$[$0-2][0] == '')
            {
                var n = tab.getPositionAmbito($$[$0-2][4]);
                if(n!=null && n.tipo.toUpperCase() == 'BOOLEAN')
                {
                    if($$[$0][0] != '' && $$[$0][0] == 'BOOLEAN')
                    {
                            var valor = '';
                            var r = [];
                            var tempant = Temp.getTemporal();
                            var tempant1 = Temp.getTemporal();

                            valor += tempant +'='+n.position+';\n';
                            valor += tempant1 +'=stack['+tempant+'];\n';
                            valor += $$[$0][3];
                            valor += '\n';

                            var temp = Temp.getTemporal();
                            var label0 = Label.getBandera();
                            var label1 = Label.getBandera();
                            var label2 = Label.getBandera();
                            var label3 = Label.getBandera();
                            var label4 = Label.getBandera();
                            var label5 = Label.getBandera();

                            valor += label0 + ':\n';
                            valor += '\t if('+tempant1+'==1) goto '+label1+';\n';
                            valor += '\t goto '+label3+';\n';
                            valor += label1 + ':\n';
                            valor += '\t if('+$$[$0][1]+'==1) goto '+label2+';\n';
                            valor += '\t goto '+label2+';\n';
                            valor += label2 + ':\n';
                            valor += '\t' + temp + '=1;\n';
                            valor += '\t goto '+label4+';\n';
                            valor += label3 + ':\n';
                            valor += '\t if('+$$[$0][1]+'==1) goto '+label2+';\n';
                            valor += '\t goto '+label5+';\n';
                            valor += label5 + ':\n';
                            valor += '\t' + temp + '=0;\n';
                            valor += '\t goto '+label4+';\n';
                            valor += label4 + ':\n';


                            r[0] = 'BOOLEAN';
                            r[1] = temp;
                            r[2] = label4;
                            r[3] = valor;
                            r[4] = '';
                            r[5] = '';
                            r[6] = Boolean($$[$0-2][6]) && Boolean($$[$0][6]);
                            this.$ = r;
                    }
                    else
                    {
                        var n1 = tab.getPositionAmbito($$[$0][4]);
                        if(n1!=null && n1.tipo.toUpperCase() == 'BOOLEAN')
                        {
                            var valor = '';
                            var r = [];
                            var tempant = Temp.getTemporal();
                            var tempant1 = Temp.getTemporal();

                            valor += tempant +'='+n.position+';\n';
                            valor += tempant1 +'=stack['+tempant+'];\n';
                            valor += '\n';

                            var tempant11 = Temp.getTemporal();
                            var tempant111 = Temp.getTemporal();

                            valor += tempant11 +'='+n1.position+';\n';
                            valor += tempant111 +'=stack['+tempant11+'];\n';

                            var temp = Temp.getTemporal();
                            var label0 = Label.getBandera();
                            var label1 = Label.getBandera();
                            var label2 = Label.getBandera();
                            var label3 = Label.getBandera();
                            var label4 = Label.getBandera();
                            var label5 = Label.getBandera();

                            valor += label0 + ':\n';
                            valor += '\t if('+tempant1+'==1) goto '+label1+';\n';
                            valor += '\t goto '+label3+';\n';
                            valor += label1 + ':\n';
                            valor += '\t if('+tempant11+'==1) goto '+label2+';\n';
                            valor += '\t goto '+label2+';\n';
                            valor += label2 + ':\n';
                            valor += '\t' + temp + '=1;\n';
                            valor += '\t goto '+label4+';\n';
                            valor += label3 + ':\n';
                            valor += '\t if('+tempant11+'==1) goto '+label2+';\n';
                            valor += '\t goto '+label5+';\n';
                            valor += label5 + ':\n';
                            valor += '\t' + temp + '=0;\n';
                            valor += '\t goto '+label4+';\n';
                            valor += label4 + ':\n';


                            r[0] = 'BOOLEAN';
                            r[1] = temp;
                            r[2] = label4;
                            r[3] = valor;
                            r[4] = '';
                            r[5] = '';
                            r[6] = Boolean($$[$0-2][6]) && Boolean($$[$0][6]);
                            this.$ = r;
                        }
                        else
                        {
                            semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no existe la variable: ${$$[$0][4]}, de tipo booleano`+'\"}');
                            this.$ = ['','','',''];
                        }
                    }
                }
                else
                {
                    semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no existe la variable: ${$$[$0-2][4]}, de tipo booleano`+'\"}');
                    this.$ = ['','','',''];
                }
            }
            else
            {
                semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no se puede ejecutar la operacion`+'\"}');
                this.$ = ['','','',''];
            }
        }
        else
        {
            semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no se puede ejecutar la operacion, unicamente variables de tipo BOOLEANO`+'\"}');
            this.$ = ['','','',''];
        }
    
break;
case 275:

        if($$[$0-2][0] != 'STRING' && $$[$0][0] != 'STRING')
        {
            if($$[$0-2][0]!= '' && $$[$0-2][0] == 'BOOLEAN')
            {
                if($$[$0][0] != '' && $$[$0][0] == 'BOOLEAN')
                {
                        var valor = '';
                        var r = [];
                        valor += $$[$0-2][3];
                        valor += '\n';
                        valor += $$[$0][3];
                        valor += '\n';

                        var temp = Temp.getTemporal();
                        var label0 = Label.getBandera();
                        var label1 = Label.getBandera();
                        var label2 = Label.getBandera();
                        var label3 = Label.getBandera();
                        var label4 = Label.getBandera();
                        var label5 = Label.getBandera();

                        valor += label0 + ':\n';
                        valor += '\t if('+$$[$0-2][1]+'==1) goto '+label1+';\n';
                        valor += '\t goto '+label3+';\n';
                        valor += label1 + ':\n';
                        valor += '\t if('+$$[$0][1]+'==1) goto '+label2+';\n';
                        valor += '\t goto '+label2+';\n';
                        valor += label2 + ':\n';
                        valor += '\t' + temp + '=1;\n';
                        valor += '\t goto '+label4+';\n';
                        valor += label3 + ':\n';
                        valor += '\t if('+$$[$0][1]+'==1) goto '+label2+';\n';
                        valor += '\t goto '+label5+';\n';
                        valor += label5 + ':\n';
                        valor += '\t' + temp + '=0;\n';
                        valor += '\t goto '+label4+';\n';
                        valor += label4 + ':\n';


                        r[0] = 'BOOLEAN';
                        r[1] = temp;
                        r[2] = label4;
                        r[3] = valor;
                        r[4] = '';
                        r[5] = '';
                        r[6] = Boolean($$[$0-2][6]) || Boolean($$[$0][6]);
                        this.$ = r;
                }
                else
                {
                    var n = tab.getPositionAmbito($$[$0][4]);
                    if(n!=null && n.tipo.toUpperCase() == 'BOOLEAN')
                    {
                        var valor = '';
                        var r = [];
                        valor += $$[$0-2][3];
                        valor += '\n';

                        var tempant = Temp.getTemporal();
                        var tempant1 = Temp.getTemporal();

                        valor += tempant +'='+n.position+';\n';
                        valor += tempant1 +'=stack['+tempant+'];\n';

                        var temp = Temp.getTemporal();
                        var label0 = Label.getBandera();
                        var label1 = Label.getBandera();
                        var label2 = Label.getBandera();
                        var label3 = Label.getBandera();
                        var label4 = Label.getBandera();
                        var label5 = Label.getBandera();

                        valor += label0 + ':\n';
                        valor += '\t if('+$$[$0-2][1]+'==1) goto '+label1+';\n';
                        valor += '\t goto '+label3+';\n';
                        valor += label1 + ':\n';
                        valor += '\t if('+tempant1+'==1) goto '+label2+';\n';
                        valor += '\t goto '+label2+';\n';
                        valor += label2 + ':\n';
                        valor += '\t' + temp + '=1;\n';
                        valor += '\t goto '+label4+';\n';
                        valor += label3 + ':\n';
                        valor += '\t if('+tempant1+'==1) goto '+label2+';\n';
                        valor += '\t goto '+label5+';\n';
                        valor += label5 + ':\n';
                        valor += '\t' + temp + '=0;\n';
                        valor += '\t goto '+label4+';\n';
                        valor += label4 + ':\n';


                        r[0] = 'BOOLEAN';
                        r[1] = temp;
                        r[2] = label4;
                        r[3] = valor;
                        r[4] = '';
                        r[5] = '';
                        r[6] = Boolean($$[$0-2][6]) || Boolean($$[$0][6]);
                        this.$ = r;
                    }
                    else
                    {
                        semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no existe la variable: ${$$[$0][4]} de tipo booleano`+'\"}');
                        this.$ = ['','','',''];
                    }
                }
            }
            else if($$[$0-2][0] == '')
            {
                var n = tab.getPositionAmbito($$[$0-2][4]);
                if(n!=null && n.tipo.toUpperCase() == 'BOOLEAN')
                {
                    if($$[$0][0] != '' && $$[$0][0] == 'BOOLEAN')
                    {
                            var valor = '';
                            var r = [];
                            var tempant = Temp.getTemporal();
                            var tempant1 = Temp.getTemporal();

                            valor += tempant +'='+n.position+';\n';
                            valor += tempant1 +'=stack['+tempant+'];\n';
                            valor += $$[$0][3];
                            valor += '\n';

                            var temp = Temp.getTemporal();
                            var label0 = Label.getBandera();
                            var label1 = Label.getBandera();
                            var label2 = Label.getBandera();
                            var label3 = Label.getBandera();
                            var label4 = Label.getBandera();
                            var label5 = Label.getBandera();

                            valor += label0 + ':\n';
                            valor += '\t if('+tempant1+'==1) goto '+label1+';\n';
                            valor += '\t goto '+label3+';\n';
                            valor += label1 + ':\n';
                            valor += '\t if('+$$[$0][1]+'==1) goto '+label2+';\n';
                            valor += '\t goto '+label2+';\n';
                            valor += label2 + ':\n';
                            valor += '\t' + temp + '=1;\n';
                            valor += '\t goto '+label4+';\n';
                            valor += label3 + ':\n';
                            valor += '\t if('+$$[$0][1]+'==1) goto '+label2+';\n';
                            valor += '\t goto '+label5+';\n';
                            valor += label5 + ':\n';
                            valor += '\t' + temp + '=0;\n';
                            valor += '\t goto '+label4+';\n';
                            valor += label4 + ':\n';


                            r[0] = 'BOOLEAN';
                            r[1] = temp;
                            r[2] = label4;
                            r[3] = valor;
                            r[4] = '';
                            r[5] = '';
                            r[6] = Boolean($$[$0-2][6]) && Boolean($$[$0][6]);
                            this.$ = r;
                    }
                    else
                    {
                        var n1 = tab.getPositionAmbito($$[$0][4]);
                        if(n1!=null && n1.tipo.toUpperCase() == 'BOOLEAN')
                        {
                            var valor = '';
                            var r = [];
                            var tempant = Temp.getTemporal();
                            var tempant1 = Temp.getTemporal();

                            valor += tempant +'='+n.position+';\n';
                            valor += tempant1 +'=stack['+tempant+'];\n';
                            valor += '\n';

                            var tempant11 = Temp.getTemporal();
                            var tempant111 = Temp.getTemporal();

                            valor += tempant11 +'='+n1.position+';\n';
                            valor += tempant111 +'=stack['+tempant11+'];\n';

                            var temp = Temp.getTemporal();
                            var label0 = Label.getBandera();
                            var label1 = Label.getBandera();
                            var label2 = Label.getBandera();
                            var label3 = Label.getBandera();
                            var label4 = Label.getBandera();
                            var label5 = Label.getBandera();

                            valor += label0 + ':\n';
                            valor += '\t if('+tempant1+'==1) goto '+label1+';\n';
                            valor += '\t goto '+label3+';\n';
                            valor += label1 + ':\n';
                            valor += '\t if('+tempant11+'==1) goto '+label2+';\n';
                            valor += '\t goto '+label2+';\n';
                            valor += label2 + ':\n';
                            valor += '\t' + temp + '=1;\n';
                            valor += '\t goto '+label4+';\n';
                            valor += label3 + ':\n';
                            valor += '\t if('+tempant11+'==1) goto '+label2+';\n';
                            valor += '\t goto '+label5+';\n';
                            valor += label5 + ':\n';
                            valor += '\t' + temp + '=0;\n';
                            valor += '\t goto '+label4+';\n';
                            valor += label4 + ':\n';


                            r[0] = 'BOOLEAN';
                            r[1] = temp;
                            r[2] = label4;
                            r[3] = valor;
                            r[4] = '';
                            r[5] = '';
                            r[6] = Boolean($$[$0-2][6]) && Boolean($$[$0][6]);
                            this.$ = r;
                        }
                        else
                        {
                            semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no existe la variable: ${$$[$0][4]} de tipo booleano`+'\"}');
                            this.$ = ['','','',''];
                        }
                    }
                }
                else
                {
                    semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no existe la variable: ${$$[$0-2][4]} de tipo booleano`+'\"}');
                    this.$ = ['','','',''];
                }
            }
            else
            {
                semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no se puede ejecutar la operacion`+'\"}');
                this.$ = ['','','',''];
            }
        }
        else
        {
            semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no se puede ejecutar la operacion, unicamente variables de tipo BOOLEANO`+'\"}');
            this.$ = ['','','',''];
        }
    
break;
case 277:


        if($$[$0-4][0] != 'STRING')
        {
            if($$[$0-4][0]!= '' && $$[$0-4][0] == 'BOOLEAN')
            {
                var valor = '';
                var r = [];
                valor += $$[$0-2][3];
                valor += '\n';
                valor += $$[$0][3];
                valor += '\n';

                var temp = Temp.getTemporal();
                var label0 = Label.getBandera();
                var label1 = Label.getBandera();
                var label2 = Label.getBandera();
                var label3 = Label.getBandera();

                valor += label0 + ':\n';
                valor += '\t if('+$$[$0-4][1]+'==1) goto '+label1+';\n';
                valor += '\t goto '+label2+';\n';
                valor += label1 + ':\n';
                valor += '\t'+temp+'='+$$[$0-2][1]+';\n';
                valor += '\t goto '+label3+';\n';
                valor += label2 + ':\n';
                valor += '\t'+temp+'='+$$[$0][1]+';\n';
                valor += '\t goto '+label3+';\n';
                valor += label3 + ':\n';


                if($$[$0-4][6] == true)
                {
                    if(typeof $$[$0-2][6] == "string")
                    {
                        r[0] = 'STRING';
                        r[6] = $$[$0-2][6];
                    }
                    else if(typeof $$[$0-2][6] == "number")
                    {
                        r[0] = 'NUMBER';
                        r[6] = Number($$[$0-2][6]);
                    }
                    else if(typeof $$[$0-2][6] == 'boolean')
                    {
                        r[0] = 'BOOLEAN';
                        r[6] = $$[$0-2][6];
                    }
                    else if($$[$0-2][6] instanceof Array)
                    {
                        r[0] = 'ARREGLO';
                        r[6] = $$[$0-2][6];
                    }
                }
                else
                {
                    if(typeof $$[$0][6] == "string")
                    {
                        r[0] = 'STRING';
                        r[6] = $$[$0][6];
                    }
                    else if(typeof $$[$0][6] == "number")
                    {
                        r[0] = 'NUMBER';
                        r[6] = Number($$[$0][6]);
                    }
                    else if(typeof $$[$0][6] == "boolean")
                    {
                        r[0] = 'BOOLEAN';
                        r[6] = $$[$0][6];
                    }
                    else if($$[$0][6] instanceof Array)
                    {
                        r[0] = 'ARREGLO';
                        r[6] = $$[$0][6];
                    }
                }

                r[1] = temp;
                r[2] = label3;
                r[3] = valor;
                r[4] = '';
                r[5] = '';
                this.$ = r;
            }
            else if($$[$0-4][0] == '')
            {
                var n = tab.getPositionAmbito($$[$0-4][4]);
                if(n!=null && n.tipo.toUpperCase() == 'BOOLEAN')
                {

                    var valor = '';
                    var r = [];
                    var tempant = Temp.getTemporal();
                    var tempant1 = Temp.getTemporal();

                    valor += tempant +'='+n.position+';\n';
                    valor += tempant1 +'=stack['+tempant+'];\n';
                    valor += $$[$0-2][3];
                    valor += '\n';

                    var temp = Temp.getTemporal();
                    var label0 = Label.getBandera();
                    var label1 = Label.getBandera();
                    var label2 = Label.getBandera();
                    var label3 = Label.getBandera();

                    valor += label0 + ':\n';
                    valor += '\t if('+tempant1+'==1) goto '+label1+';\n';
                    valor += '\t goto '+label2+';\n';
                    valor += label1 + ':\n';
                    valor += '\t'+temp+'='+$$[$0-2][1]+';\n';
                    valor += '\t goto '+label3+';\n';
                    valor += label2 + ':\n';
                    valor += '\t'+temp+'='+$$[$0][1]+';\n';
                    valor += '\t goto '+label3+';\n';
                    valor += label3 + ':\n';

                    if($$[$0-4][6] == true)
                    {
                        if(typeof $$[$0-2][6] == "string")
                        {
                            r[0] = 'STRING';
                            r[6] = $$[$0-2][6];
                        }
                        else if(typeof $$[$0-2][6] == "number")
                        {
                            r[0] = 'NUMBER';
                            r[6] = Number($$[$0-2][6]);
                        }
                        else if(typeof $$[$0-2][6] == "boolean")
                        {
                            r[0] = 'BOOLEAN';
                            r[6] = $$[$0-2][6];
                        }
                        else if($$[$0-2][6] instanceof Array)
                        {
                            r[0] = 'ARREGLO';
                            r[6] = $$[$0-2][6];
                        }
                    }
                    else
                    {
                        if(typeof $$[$0][6] == "string")
                        {
                            r[0] = 'STRING';
                            r[6] = $$[$0][6];
                        }
                        else if(typeof $$[$0][6] == "number")
                        {
                            r[0] = (Number($$[$0][6])%1!==0)?'FLOAT':'NUMBER';
                            r[6] = Number($$[$0][6]);
                        }
                        else if(typeof $$[$0][6] == "boolean")
                        {
                            r[0] = 'BOOLEAN';
                            r[6] = $$[$0][6];
                        }
                        else if($$[$0][6] instanceof Array)
                        {
                            r[0] = 'ARREGLO';
                            r[6] = $$[$0][6];
                        }
                    }

                    r[1] = temp;
                    r[2] = label3;
                    r[3] = valor;
                    r[4] = '';
                    r[5] = '';
                    this.$ = r;
                }
                else
                {
                    semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no existe la variable: ${$$[$0-4][4]} de tipo booleano`+'\"}');
                    this.$ = ['','','',''];
                }
            }
            else
            {
                semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no se puede ejecutar la operacion`+'\"}');
                this.$ = ['','','',''];
            }
        }
        else
        {
            semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no se puede ejecutar la operacion`+'\"}');
            this.$ = ['','','',''];
        }
    
break;
case 279:

        if($$[$0-4][0] != 'STRING')
        {
            if($$[$0-4][0]!= '' && $$[$0-4][0] == 'BOOLEAN')
            {
                var valor = '';
                var r = [];
                valor += $$[$0-2][3];
                valor += '\n';
                valor += $$[$0][3];
                valor += '\n';

                var temp = Temp.getTemporal();
                var label0 = Label.getBandera();
                var label1 = Label.getBandera();
                var label2 = Label.getBandera();
                var label3 = Label.getBandera();

                valor += label0 + ':\n';
                valor += '\t if('+$$[$0-4][1]+'==1) goto '+label1+';\n';
                valor += '\t goto '+label2+';\n';
                valor += label1 + ':\n';
                valor += '\t'+temp+'='+$$[$0-2][1]+';\n';
                valor += '\t goto '+label3+';\n';
                valor += label2 + ':\n';
                valor += '\t'+temp+'='+$$[$0][1]+';\n';
                valor += '\t goto '+label3+';\n';
                valor += label3 + ':\n';


                if($$[$0-4][6] == true)
                {
                    if(typeof $$[$0-2][6] == "string")
                    {
                        r[0] = 'STRING';
                        r[6] = $$[$0-2][6];
                    }
                    else if(typeof $$[$0-2][6] == "number")
                    {
                        r[0] = 'NUMBER';
                        r[6] = Number($$[$0-2][6]);
                    }
                    else if(typeof $$[$0-2][6] == "boolean")
                    {
                        r[0] = 'BOOLEAN';
                        r[6] = $$[$0-2][6];
                    }
                    else if($$[$0-2][6] instanceof Array)
                    {
                        r[0] = 'ARREGLO';
                        r[6] = $$[$0-2][6];
                    }
                }
                else
                {
                    if(typeof $$[$0][6] == "string")
                    {
                        r[0] = 'STRING';
                        r[6] = $$[$0][6];
                    }
                    else if(typeof $$[$0][6] == "number")
                    {
                        r[0] = 'NUMBER';
                        r[6] = Number($$[$0][6]);
                    }
                    else if(typeof $$[$0][6] == "boolean")
                    {
                        r[0] = 'BOOLEAN';
                        r[6] = $$[$0][6];
                    }
                    else if($$[$0][6] instanceof Array)
                    {
                        r[0] = 'ARREGLO';
                        r[6] = $$[$0][6];
                    }
                }

                r[1] = temp;
                r[2] = label3;
                r[3] = valor;
                r[4] = '';
                r[5] = '';
                this.$ = r;
            }
            else if($$[$0-4][0] == '')
            {
                var n = tab.getPositionAmbito($$[$0-4][4]);
                if(n!=null && n.tipo.toUpperCase() == 'BOOLEAN')
                {

                    var valor = '';
                    var r = [];
                    var tempant = Temp.getTemporal();
                    var tempant1 = Temp.getTemporal();

                    valor += tempant +'='+n.position+';\n';
                    valor += tempant1 +'=stack['+tempant+'];\n';
                    valor += $$[$0-2][3];
                    valor += '\n';

                    var temp = Temp.getTemporal();
                    var label0 = Label.getBandera();
                    var label1 = Label.getBandera();
                    var label2 = Label.getBandera();
                    var label3 = Label.getBandera();

                    valor += label0 + ':\n';
                    valor += '\t if('+tempant1+'==1) goto '+label1+';\n';
                    valor += '\t goto '+label2+';\n';
                    valor += label1 + ':\n';
                    valor += '\t'+temp+'='+$$[$0-2][1]+';\n';
                    valor += '\t goto '+label3+';\n';
                    valor += label2 + ':\n';
                    valor += '\t'+temp+'='+$$[$0][1]+';\n';
                    valor += '\t goto '+label3+';\n';
                    valor += label3 + ':\n';


                    if($$[$0-4][6] == true)
                    {
                        if(typeof $$[$0-2][6] == "string")
                        {
                            r[0] = 'STRING';
                            r[6] = $$[$0-2][6];
                        }
                        else if(typeof $$[$0-2][6] == "number")
                        {
                            r[0] = 'NUMBER';
                            r[6] = Number($$[$0-2][6]);
                        }
                        else if(typeof $$[$0-2][6] == "boolean")
                        {
                            r[0] = 'BOOLEAN';
                            r[6] = $$[$0-2][6];
                        }
                        else if($$[$0-2][6] instanceof Array)
                        {
                            r[0] = 'ARREGLO';
                            r[6] = $$[$0-2][6];
                        }
                    }
                    else
                    {
                        if(typeof $$[$0][6] == "string")
                        {
                            r[0] = 'STRING';
                            r[6] = $$[$0][6];
                        }
                        else if(typeof $$[$0][6] == "number")
                        {
                            r[0] = (Number($$[$0][6])%1!==0)?'FLOAT':'NUMBER';
                            r[6] = Number($$[$0][6]);
                        }
                        else if(typeof $$[$0][6] == "boolean")
                        {
                            r[0] = 'BOOLEAN';
                            r[6] = $$[$0][6];
                        }
                        else if($$[$0][6] instanceof Array)
                        {
                            r[0] = 'ARREGLO';
                            r[6] = $$[$0][6];
                        }
                    }

                    r[1] = temp;
                    r[2] = label3;
                    r[3] = valor;
                    r[4] = '';
                    r[5] = '';
                    this.$ = r;
                }
                else
                {
                    semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no existe la variable: ${$$[$0-4][4]} de tipo booleano`+'\"}');
                    this.$ = ['','','',''];
                }
            }
            else
            {
                semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no se puede ejecutar la operacion`+'\"}');
                this.$ = ['','','',''];
            }
        }
        else
        {
            semanticos.push('{\"valor\":\"'+`Error semantico en la linea ${(yylineno+1)}, no se puede ejecutar la operacion`+'\"}');
            this.$ = ['','','',''];
        }
    
break;
}
},
table: [{2:$V0,3:1,4:2,5:[1,3],6:4,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:$V1,25:$V2,28:$V3,31:$V4,33:20,41:18,57:$V5,61:$V6,62:$V7,63:$V8,64:$V9,73:$Va,75:$Vb,76:$Vc,77:$Vd,88:$Ve,89:$Vf,90:$Vg,91:$Vh,92:$Vi,93:$Vj,94:$Vk,95:$Vl,112:$Vm,113:$Vn},{1:[3]},{1:[2,1]},{1:[2,2]},{1:[2,3],2:$V0,4:43,5:[1,44],6:4,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:$V1,25:$V2,28:$V3,31:$V4,33:20,41:18,57:$V5,61:$V6,62:$V7,63:$V8,64:$V9,73:$Va,75:$Vb,76:$Vc,77:$Vd,88:$Ve,89:$Vf,90:$Vg,91:$Vh,92:$Vi,93:$Vj,94:$Vk,95:$Vl,112:$Vm,113:$Vn},o($Vo,[2,6]),o($Vo,[2,7]),o($Vo,[2,8]),o($Vo,[2,9]),o($Vo,[2,10]),o($Vo,[2,11]),o($Vo,[2,12]),o($Vo,[2,13]),o($Vo,[2,14]),o($Vo,[2,15]),o($Vo,[2,16]),o($Vo,[2,17]),o($Vo,[2,18]),{31:[1,45]},{20:$Vp,31:$Vq,32:46,36:52,37:47,38:60,39:$Vr,44:$Vs,50:51,51:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx,56:$Vy,112:$Vz,113:$VA},o($Vo,[2,28]),{31:[1,62]},{20:[1,63]},{2:$VB,5:$VC,7:68,8:69,10:70,11:71,12:72,13:73,14:74,15:75,16:76,17:77,18:78,19:$V1,25:$V2,28:$V3,29:[1,64],30:65,31:$V4,33:20,41:18,60:66,61:$V6,62:$V7,63:$V8,64:$V9,73:$Va,75:$Vb,76:$Vc,77:$Vd,88:$Ve,89:$Vf,90:$Vg,91:$Vh,92:$Vi,93:$Vj,94:$Vk,95:$Vl,112:$Vm,113:$Vn},{22:[1,80]},{2:$V0,6:81,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:$V1,25:$V2,28:$V3,31:$V4,33:20,41:18,57:$V5,61:$V6,62:$V7,63:$V8,64:$V9,73:$Va,75:$Vb,76:$Vc,77:$Vd,88:$Ve,89:$Vf,90:$Vg,91:$Vh,92:$Vi,93:$Vj,94:$Vk,95:$Vl,112:$Vm,113:$Vn},{22:[1,82]},{22:[1,83]},o([1,2,5,19,29,61,62,63,64,70,71,73,74,75,76,77,88,89,90,91,92,93,94,95],[2,94],{23:85,45:86,163:87,159:88,155:89,148:90,143:91,141:92,135:93,131:94,127:95,129:96,79:97,121:101,123:102,109:103,59:104,110:106,100:109,111:110,33:112,22:$VD,25:[1,84],28:$VE,31:$VF,39:$VG,57:$VH,101:$VI,102:$VJ,103:$VK,104:$VL,105:$VM,106:$VN,112:$Vm,113:$Vn,130:$VO,132:$VP,133:$VQ}),o($VR,[2,92],{25:[1,120]}),o($VR,[2,90],{25:[1,121]}),{22:[1,122]},o($Vo,[2,23]),o($VS,[2,132]),o($VS,[2,133]),o($VS,[2,134]),o($VS,[2,135]),o($VS,[2,136]),o($VS,[2,137]),o($VS,[2,138]),o($VS,[2,140]),{31:[1,123]},{31:[1,124]},{1:[2,4]},{1:[2,5]},o($Vo,[2,42],{42:[1,125],44:[1,126]}),o($VR,[2,27],{25:[1,127]}),o([1,2,5,19,24,25,28,29,31,40,42,57,61,62,63,64,70,71,73,74,75,76,77,80,81,84,88,89,90,91,92,93,94,95,130,132,136,137,138,139,144,145,149,150,151,152,156,160,164],[2,169],{50:51,38:60,32:131,36:132,20:[1,130],39:$Vr,44:$Vs,51:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx,56:$Vy,112:[1,128],113:[1,129]}),o($VT,[2,170]),o($VT,[2,171]),{31:$VU,114:[1,133],115:[1,134],116:[1,135],117:[1,136],118:[1,137]},{22:$VD,28:$VE,31:$VF,33:112,39:$VG,45:139,57:$VH,59:104,79:97,100:109,101:$VI,102:$VJ,103:$VK,104:$VL,105:$VM,106:$VN,109:103,110:106,111:110,112:$Vm,113:$Vn,121:101,123:102,127:95,129:96,130:$VO,131:94,132:$VP,133:$VQ,135:93,141:92,143:91,148:90,155:89,159:88,163:87},o($VV,[2,37]),o($VW,[2,51]),o($VW,[2,52]),o($VW,[2,53]),o($VW,[2,54]),o($VW,[2,55]),o($VW,[2,56]),o($VW,[2,57]),o([1,2,5,19,20,24,25,28,29,31,40,42,44,51,52,53,54,55,56,57,61,62,63,64,70,71,73,74,75,76,77,80,81,84,88,89,90,91,92,93,94,95,112,113,130,132,136,137,138,139,144,145,149,150,151,152,156,160,164],[2,39],{38:60,36:140,39:$Vr}),{22:$VD,23:141,28:$VE,31:$VF,33:112,39:$VG,45:86,57:$VH,59:104,79:97,100:109,101:$VI,102:$VJ,103:$VK,104:$VL,105:$VM,106:$VN,109:103,110:106,111:110,112:$Vm,113:$Vn,121:101,123:102,127:95,129:96,130:$VO,131:94,132:$VP,133:$VQ,135:93,141:92,143:91,148:90,155:89,159:88,163:87},{22:[1,142]},{21:[1,143]},o($Vo,[2,24]),{29:[1,144]},o($VX,[2,74],{41:18,33:20,60:66,7:68,8:69,10:70,11:71,12:72,13:73,14:74,15:75,16:76,17:77,18:78,30:145,2:$VB,5:$VC,19:$V1,25:$V2,28:$V3,31:$V4,61:$V6,62:$V7,63:$V8,64:$V9,73:$Va,75:$Vb,76:$Vc,77:$Vd,88:$Ve,89:$Vf,90:$Vg,91:$Vh,92:$Vi,93:$Vj,94:$Vk,95:$Vl,112:$Vm,113:$Vn}),o($VX,[2,76]),o($VY,[2,77]),o($VY,[2,78]),o($VY,[2,79]),o($VY,[2,80]),o($VY,[2,81]),o($VY,[2,82]),o($VY,[2,83]),o($VY,[2,84]),o($VY,[2,85]),o($VY,[2,86]),o($VY,[2,87]),o($VY,[2,88]),{22:$VD,23:146,28:$VE,31:$VF,33:112,39:$VG,45:86,57:$VH,59:104,79:97,100:109,101:$VI,102:$VJ,103:$VK,104:$VL,105:$VM,106:$VN,109:103,110:106,111:110,112:$Vm,113:$Vn,121:101,123:102,127:95,129:96,130:$VO,131:94,132:$VP,133:$VQ,135:93,141:92,143:91,148:90,155:89,159:88,163:87},{76:[1,147]},{22:$VD,23:148,28:$VE,31:$VF,33:112,39:$VG,45:86,57:$VH,59:104,79:97,100:109,101:$VI,102:$VJ,103:$VK,104:$VL,105:$VM,106:$VN,109:103,110:106,111:110,112:$Vm,113:$Vn,121:101,123:102,127:95,129:96,130:$VO,131:94,132:$VP,133:$VQ,135:93,141:92,143:91,148:90,155:89,159:88,163:87},{22:$VD,28:$VE,31:$VZ,33:112,39:$VG,41:151,48:149,57:$VH,59:104,79:150,88:$Ve,89:$Vf,90:$Vg,91:$Vh,92:$Vi,93:$Vj,94:$Vk,95:$Vl,100:109,101:$VI,102:$VJ,103:$VK,104:$VL,105:$VM,106:$VN,109:103,110:106,111:110,112:$Vm,113:$Vn,121:101,123:102},o($Vo,[2,93]),o($VR,[2,96],{25:[1,153],84:$V_}),o($V$,[2,122]),o($VT,[2,281]),o([1,2,5,19,20,24,25,28,29,31,39,40,42,57,61,62,63,64,70,71,73,74,75,76,77,80,81,84,88,89,90,91,92,93,94,95,112,113,130,132,136,137,138,139,144,145,149,150,151,152,156],[2,276],{160:[1,156],164:[1,155]}),o($V01,[2,270],{156:$V11}),o($V21,[2,264],{149:$V31,150:$V41,151:$V51,152:$V61}),o($V71,[2,249],{144:$V81,145:$V91}),o($Va1,[2,240],{130:$Vb1,132:$Vc1}),o($Vd1,[2,234],{136:$Ve1,137:$Vf1,138:$Vg1,139:$Vh1}),o($VT,[2,224]),o($VT,[2,220]),o($VT,[2,221]),o($VT,[2,215]),{22:$VD,28:$VE,31:$VF,33:112,39:$VG,57:$VH,59:104,79:97,100:109,101:$VI,102:$VJ,103:$VK,104:$VL,105:$VM,106:$VN,109:103,110:106,111:110,112:$Vm,113:$Vn,121:101,123:102,127:95,129:96,130:$VO,131:170,132:$VP,133:$VQ},{22:$VD,28:$VE,31:$VF,33:112,39:$VG,57:$VH,59:104,79:97,100:109,101:$VI,102:$VJ,103:$VK,104:$VL,105:$VM,106:$VN,109:103,110:106,111:110,112:$Vm,113:$Vn,121:101,123:102,127:95,129:96,130:$VO,131:171,132:$VP,133:$VQ},{22:$VD,28:$VE,31:$VF,33:112,39:$VG,57:$VH,59:104,79:97,100:109,101:$VI,102:$VJ,103:$VK,104:$VL,105:$VM,106:$VN,109:103,110:106,111:110,112:$Vm,113:$Vn,121:101,123:102,127:95,129:96,130:$VO,131:172,132:$VP,133:$VQ},o($Vi1,[2,211],{20:[1,174],39:[1,173]}),o($Vi1,[2,212],{35:175,20:[1,177],22:[1,178],39:[1,176]}),o($VT,[2,192]),o($VT,[2,193]),o([1,2,5,19,22,24,25,28,29,31,40,42,57,61,62,63,64,70,71,73,74,75,76,77,80,81,84,88,89,90,91,92,93,94,95,130,132,136,137,138,139,144,145,149,150,151,152,156,160,164],[2,199],{37:47,36:52,38:60,20:$Vp,39:$Vr,112:$Vz,113:$VA}),o($VT,[2,161]),{5:$Vj1,29:[1,179],31:$Vk1,107:181,108:180},{22:[1,184],31:[1,185]},o($VT,[2,164]),o($VT,[2,165]),{22:$VD,23:186,28:$VE,31:$VF,33:112,39:$VG,45:86,57:$VH,59:104,79:97,100:109,101:$VI,102:$VJ,103:$VK,104:$VL,105:$VM,106:$VN,109:103,110:106,111:110,112:$Vm,113:$Vn,121:101,123:102,127:95,129:96,130:$VO,131:94,132:$VP,133:$VQ,135:93,141:92,143:91,148:90,155:89,159:88,163:87},o($VT,[2,168]),o($VT,[2,150]),o($VT,[2,151]),o($VT,[2,152]),o($VT,[2,153]),o($VT,[2,154]),o($VT,[2,155]),{22:$VD,28:$VE,31:$VF,33:112,39:$VG,40:[1,187],45:189,57:$VH,59:104,79:97,100:109,101:$VI,102:$VJ,103:$VK,104:$VL,105:$VM,106:$VN,109:103,110:106,111:110,112:$Vm,113:$Vn,119:188,121:101,123:102,127:95,129:96,130:$VO,131:94,132:$VP,133:$VQ,135:93,141:92,143:91,148:90,155:89,159:88,163:87},o($Vo,[2,91]),o($Vo,[2,89]),{22:$VD,23:190,28:$VE,31:$VF,33:112,39:$VG,45:86,57:$VH,59:104,79:97,100:109,101:$VI,102:$VJ,103:$VK,104:$VL,105:$VM,106:$VN,109:103,110:106,111:110,112:$Vm,113:$Vn,121:101,123:102,127:95,129:96,130:$VO,131:94,132:$VP,133:$VQ,135:93,141:92,143:91,148:90,155:89,159:88,163:87},o($Vi1,[2,176],{36:52,38:60,37:191,20:$Vl1,39:$Vr}),o($Vi1,[2,177],{36:52,38:60,37:193,20:$Vl1,39:$Vr}),{31:[1,195],41:194,88:$Ve,89:$Vf,90:$Vg,91:$Vh,92:$Vi,93:$Vj,94:$Vk,95:$Vl},{22:$VD,28:$VE,31:$VF,33:112,39:$VG,45:197,46:[1,196],57:$VH,59:104,79:97,100:109,101:$VI,102:$VJ,103:$VK,104:$VL,105:$VM,106:$VN,109:103,110:106,111:110,112:$Vm,113:$Vn,121:101,123:102,127:95,129:96,130:$VO,131:94,132:$VP,133:$VQ,135:93,141:92,143:91,148:90,155:89,159:88,163:87},o($Vo,[2,26]),o($VT,[2,178]),o($VT,[2,179]),{31:$Vm1,118:[1,198]},o([1,2,5,19,20,24,28,29,31,39,40,42,57,61,62,63,64,70,71,73,74,75,76,77,80,81,84,88,89,90,91,92,93,94,95,112,113,130,132,136,137,138,139,144,145,149,150,151,152,156,160,164],[2,185],{25:[1,200]}),o($VV,[2,34]),{22:[1,201]},{22:[1,202]},{22:[1,203]},{22:[1,204]},o($VT,[2,182]),o($VV,[2,36]),o($VT,[2,50]),o($VV,[2,38]),{40:[1,205],84:$V_},{24:[1,206],31:$Vn1,58:207,87:208},{22:[1,210]},o($Vo,[2,25]),o($VX,[2,75]),{24:[1,211],84:$V_},{22:[1,212]},{24:[1,213],84:$V_},{25:[1,214]},{80:[1,215],81:[1,216]},{31:[1,217]},o([22,29,31,80,81,84,130,132,136,137,138,139,144,145,149,150,151,152,156,160,164],$Vq,{37:47,36:52,38:60,20:$Vp,39:$Vr,112:$Vz,113:$VA}),o($Vo,[2,95]),{22:$VD,28:$VE,31:$VF,33:112,39:$VG,45:218,57:$VH,59:104,79:97,100:109,101:$VI,102:$VJ,103:$VK,104:$VL,105:$VM,106:$VN,109:103,110:106,111:110,112:$Vm,113:$Vn,121:101,123:102,127:95,129:96,130:$VO,131:94,132:$VP,133:$VQ,135:93,141:92,143:91,148:90,155:89,159:88,163:87},{22:$VD,28:$VE,31:$VF,33:112,39:$VG,45:219,57:$VH,59:104,79:97,100:109,101:$VI,102:$VJ,103:$VK,104:$VL,105:$VM,106:$VN,109:103,110:106,111:110,112:$Vm,113:$Vn,121:101,123:102,127:95,129:96,130:$VO,131:94,132:$VP,133:$VQ,135:93,141:92,143:91,148:90,155:89,159:88,163:87},{22:$VD,28:$VE,31:$VF,33:112,39:$VG,57:$VH,59:104,79:97,100:109,101:$VI,102:$VJ,103:$VK,104:$VL,105:$VM,106:$VN,109:103,110:106,111:110,112:$Vm,113:$Vn,121:101,123:102,127:95,129:96,130:$VO,131:94,132:$VP,133:$VQ,135:93,141:92,143:91,148:90,155:220},{22:$VD,28:$VE,31:$VF,33:112,39:$VG,57:$VH,59:104,79:97,100:109,101:$VI,102:$VJ,103:$VK,104:$VL,105:$VM,106:$VN,109:103,110:106,111:110,112:$Vm,113:$Vn,121:101,123:102,127:95,129:96,130:$VO,131:94,132:$VP,133:$VQ,135:93,141:92,143:91,148:221},{22:$VD,28:$VE,31:$VF,33:112,39:$VG,57:$VH,59:104,79:97,100:109,101:$VI,102:$VJ,103:$VK,104:$VL,105:$VM,106:$VN,109:103,110:106,111:110,112:$Vm,113:$Vn,121:101,123:102,127:95,129:96,130:$VO,131:94,132:$VP,133:$VQ,135:93,141:92,143:222},{22:$VD,28:$VE,31:$VF,33:112,39:$VG,57:$VH,59:104,79:97,100:109,101:$VI,102:$VJ,103:$VK,104:$VL,105:$VM,106:$VN,109:103,110:106,111:110,112:$Vm,113:$Vn,121:101,123:102,127:95,129:96,130:$VO,131:94,132:$VP,133:$VQ,135:93,141:92,143:223},{22:$VD,28:$VE,31:$VF,33:112,39:$VG,57:$VH,59:104,79:97,100:109,101:$VI,102:$VJ,103:$VK,104:$VL,105:$VM,106:$VN,109:103,110:106,111:110,112:$Vm,113:$Vn,121:101,123:102,127:95,129:96,130:$VO,131:94,132:$VP,133:$VQ,135:93,141:92,143:224},{22:$VD,28:$VE,31:$VF,33:112,39:$VG,57:$VH,59:104,79:97,100:109,101:$VI,102:$VJ,103:$VK,104:$VL,105:$VM,106:$VN,109:103,110:106,111:110,112:$Vm,113:$Vn,121:101,123:102,127:95,129:96,130:$VO,131:94,132:$VP,133:$VQ,135:93,141:92,143:225},{22:$VD,28:$VE,31:$VF,33:112,39:$VG,57:$VH,59:104,79:97,100:109,101:$VI,102:$VJ,103:$VK,104:$VL,105:$VM,106:$VN,109:103,110:106,111:110,112:$Vm,113:$Vn,121:101,123:102,127:95,129:96,130:$VO,131:94,132:$VP,133:$VQ,135:93,141:226},{22:$VD,28:$VE,31:$VF,33:112,39:$VG,57:$VH,59:104,79:97,100:109,101:$VI,102:$VJ,103:$VK,104:$VL,105:$VM,106:$VN,109:103,110:106,111:110,112:$Vm,113:$Vn,121:101,123:102,127:95,129:96,130:$VO,131:94,132:$VP,133:$VQ,135:93,141:227},{22:$VD,28:$VE,31:$VF,33:112,39:$VG,57:$VH,59:104,79:97,100:109,101:$VI,102:$VJ,103:$VK,104:$VL,105:$VM,106:$VN,109:103,110:106,111:110,112:$Vm,113:$Vn,121:101,123:102,127:95,129:96,130:$VO,131:94,132:$VP,133:$VQ,135:228},{22:$VD,28:$VE,31:$VF,33:112,39:$VG,57:$VH,59:104,79:97,100:109,101:$VI,102:$VJ,103:$VK,104:$VL,105:$VM,106:$VN,109:103,110:106,111:110,112:$Vm,113:$Vn,121:101,123:102,127:95,129:96,130:$VO,131:94,132:$VP,133:$VQ,135:229},{22:$VD,28:$VE,31:$VF,33:112,39:$VG,57:$VH,59:104,79:97,100:109,101:$VI,102:$VJ,103:$VK,104:$VL,105:$VM,106:$VN,109:103,110:106,111:110,112:$Vm,113:$Vn,121:101,123:102,127:95,129:96,130:$VO,131:230,132:$VP,133:$VQ},{22:$VD,28:$VE,31:$VF,33:112,39:$VG,57:$VH,59:104,79:97,100:109,101:$VI,102:$VJ,103:$VK,104:$VL,105:$VM,106:$VN,109:103,110:106,111:110,112:$Vm,113:$Vn,121:101,123:102,127:95,129:96,130:$VO,131:231,132:$VP,133:$VQ},{22:$VD,28:$VE,31:$VF,33:112,39:$VG,57:$VH,59:104,79:97,100:109,101:$VI,102:$VJ,103:$VK,104:$VL,105:$VM,106:$VN,109:103,110:106,111:110,112:$Vm,113:$Vn,121:101,123:102,127:95,129:96,130:$VO,131:232,132:$VP,133:$VQ},{22:$VD,28:$VE,31:$VF,33:112,39:$VG,57:$VH,59:104,79:97,100:109,101:$VI,102:$VJ,103:$VK,104:$VL,105:$VM,106:$VN,109:103,110:106,111:110,112:$Vm,113:$Vn,121:101,123:102,127:95,129:96,130:$VO,131:233,132:$VP,133:$VQ},o($VT,[2,217]),o($VT,[2,218]),o($VT,[2,219]),{22:$VD,23:234,28:$VE,31:$VF,33:112,39:$VG,45:86,57:$VH,59:104,79:97,100:109,101:$VI,102:$VJ,103:$VK,104:$VL,105:$VM,106:$VN,109:103,110:106,111:110,112:$Vm,113:$Vn,121:101,123:102,127:95,129:96,130:$VO,131:94,132:$VP,133:$VQ,135:93,141:92,143:91,148:90,155:89,159:88,163:87},{31:[1,235]},o($Vo1,[2,200]),{22:$VD,23:236,28:$VE,31:$VF,33:112,39:$VG,45:86,57:$VH,59:104,79:97,100:109,101:$VI,102:$VJ,103:$VK,104:$VL,105:$VM,106:$VN,109:103,110:106,111:110,112:$Vm,113:$Vn,121:101,123:102,127:95,129:96,130:$VO,131:94,132:$VP,133:$VQ,135:93,141:92,143:91,148:90,155:89,159:88,163:87},{31:[1,237]},{22:$VD,24:[1,238],28:$VE,31:$VF,33:112,39:$VG,45:240,57:$VH,59:104,79:97,100:109,101:$VI,102:$VJ,103:$VK,104:$VL,105:$VM,106:$VN,109:103,110:106,111:110,112:$Vm,113:$Vn,121:101,123:102,125:239,127:95,129:96,130:$VO,131:94,132:$VP,133:$VQ,135:93,141:92,143:91,148:90,155:89,159:88,163:87},o($VT,[2,162]),{29:[1,241]},{29:[2,159],84:[1,242]},{42:[1,243]},o($Vp1,[2,158]),{24:[1,244],31:$Vn1,58:245,87:208},{22:[1,246]},{24:[1,247],84:$V_},o($VT,[2,186]),{40:[1,248],84:[1,249]},o($Vq1,[2,190]),{24:[1,250],84:$V_},o($Vi1,[2,180],{38:60,36:132,20:$Vr1,39:$Vr}),{31:$VU},o($Vi1,[2,181],{38:60,36:132,20:$Vr1,39:$Vr}),o($Vo,[2,41],{43:252,39:[1,254],44:[1,253]}),o([1,2,5,19,25,28,29,31,39,44,57,61,62,63,64,70,71,73,74,75,76,77,88,89,90,91,92,93,94,95,112,113],$Vq),{47:[1,255]},o($Vo,[2,47]),o($VT,[2,183]),o($VV,[2,35]),o($VT,[2,184]),{22:$VD,23:256,28:$VE,31:$VF,33:112,39:$VG,45:86,57:$VH,59:104,79:97,100:109,101:$VI,102:$VJ,103:$VK,104:$VL,105:$VM,106:$VN,109:103,110:106,111:110,112:$Vm,113:$Vn,121:101,123:102,127:95,129:96,130:$VO,131:94,132:$VP,133:$VQ,135:93,141:92,143:91,148:90,155:89,159:88,163:87},{24:[1,257]},{24:[1,258]},{22:$VD,23:259,28:$VE,31:$VF,33:112,39:$VG,45:86,57:$VH,59:104,79:97,100:109,101:$VI,102:$VJ,103:$VK,104:$VL,105:$VM,106:$VN,109:103,110:106,111:110,112:$Vm,113:$Vn,121:101,123:102,127:95,129:96,130:$VO,131:94,132:$VP,133:$VQ,135:93,141:92,143:91,148:90,155:89,159:88,163:87},o($VV,[2,40]),{28:[1,260],42:[1,261]},{24:[1,262]},{24:[2,129],84:[1,263]},o($Vs1,[2,131],{42:[1,264]}),{22:$VD,23:265,28:$VE,31:$VF,33:112,39:$VG,45:86,57:$VH,59:104,79:97,100:109,101:$VI,102:$VJ,103:$VK,104:$VL,105:$VM,106:$VN,109:103,110:106,111:110,112:$Vm,113:$Vn,121:101,123:102,127:95,129:96,130:$VO,131:94,132:$VP,133:$VQ,135:93,141:92,143:91,148:90,155:89,159:88,163:87},{2:$V0,6:266,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:$V1,25:$V2,28:$V3,31:$V4,33:20,41:18,57:$V5,61:$V6,62:$V7,63:$V8,64:$V9,73:$Va,75:$Vb,76:$Vc,77:$Vd,88:$Ve,89:$Vf,90:$Vg,91:$Vh,92:$Vi,93:$Vj,94:$Vk,95:$Vl,112:$Vm,113:$Vn},{22:$VD,23:267,28:$VE,31:$VF,33:112,39:$VG,45:86,57:$VH,59:104,79:97,100:109,101:$VI,102:$VJ,103:$VK,104:$VL,105:$VM,106:$VN,109:103,110:106,111:110,112:$Vm,113:$Vn,121:101,123:102,127:95,129:96,130:$VO,131:94,132:$VP,133:$VQ,135:93,141:92,143:91,148:90,155:89,159:88,163:87},{2:$V0,6:268,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:$V1,25:$V2,28:$V3,31:$V4,33:20,41:18,57:$V5,61:$V6,62:$V7,63:$V8,64:$V9,73:$Va,75:$Vb,76:$Vc,77:$Vd,88:$Ve,89:$Vf,90:$Vg,91:$Vh,92:$Vi,93:$Vj,94:$Vk,95:$Vl,112:$Vm,113:$Vn},{22:$VD,23:270,28:$VE,31:$VF,33:112,39:$VG,45:86,57:$VH,59:104,78:269,79:97,100:109,101:$VI,102:$VJ,103:$VK,104:$VL,105:$VM,106:$VN,109:103,110:106,111:110,112:$Vm,113:$Vn,121:101,123:102,127:95,129:96,130:$VO,131:94,132:$VP,133:$VQ,135:93,141:92,143:91,148:90,155:89,159:88,163:87},{22:$VD,23:271,28:$VE,31:$VF,33:112,39:$VG,45:86,57:$VH,59:104,79:97,100:109,101:$VI,102:$VJ,103:$VK,104:$VL,105:$VM,106:$VN,109:103,110:106,111:110,112:$Vm,113:$Vn,121:101,123:102,127:95,129:96,130:$VO,131:94,132:$VP,133:$VQ,135:93,141:92,143:91,148:90,155:89,159:88,163:87},{22:$VD,23:272,28:$VE,31:$VF,33:112,39:$VG,45:86,57:$VH,59:104,79:97,100:109,101:$VI,102:$VJ,103:$VK,104:$VL,105:$VM,106:$VN,109:103,110:106,111:110,112:$Vm,113:$Vn,121:101,123:102,127:95,129:96,130:$VO,131:94,132:$VP,133:$VQ,135:93,141:92,143:91,148:90,155:89,159:88,163:87},{32:276,42:[1,275],44:$Vs,50:51,51:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx,56:$Vy,80:[1,273],81:[1,274]},o($V$,[2,123]),{42:[1,277]},o($V01,[2,271],{156:$V11}),o($V21,[2,265],{149:$V31,150:$V41,151:$V51,152:$V61}),o($V71,[2,250],{144:$V81,145:$V91}),o($V71,[2,251],{144:$V81,145:$V91}),o($V71,[2,252],{144:$V81,145:$V91}),o($V71,[2,253],{144:$V81,145:$V91}),o($Va1,[2,241],{130:$Vb1,132:$Vc1}),o($Va1,[2,242],{130:$Vb1,132:$Vc1}),o($Vd1,[2,235],{136:$Ve1,137:$Vf1,138:$Vg1,139:$Vh1}),o($Vd1,[2,236],{136:$Ve1,137:$Vf1,138:$Vg1,139:$Vh1}),o($VT,[2,225]),o($VT,[2,226]),o($VT,[2,227]),o($VT,[2,228]),{40:[1,278],84:$V_},o($VT,[2,195]),{40:[1,279],84:$V_},o($Vo1,[2,202]),o($Vo1,[2,207]),{24:[1,280],84:[1,281]},o($Vs1,[2,209]),o($VT,[2,163]),{5:$Vj1,31:$Vk1,107:181,108:282},{22:$VD,28:$VE,31:$VZ,33:112,39:$VG,41:284,45:283,57:$VH,59:104,79:97,88:$Ve,89:$Vf,90:$Vg,91:$Vh,92:$Vi,93:$Vj,94:$Vk,95:$Vl,100:109,101:$VI,102:$VJ,103:$VK,104:$VL,105:$VM,106:$VN,109:103,110:106,111:110,112:$Vm,113:$Vn,121:101,123:102,127:95,129:96,130:$VO,131:94,132:$VP,133:$VQ,135:93,141:92,143:91,148:90,155:89,159:88,163:87},{28:[1,285]},{24:[1,286]},{24:[1,287],31:$Vn1,58:288,87:208},o($VT,[2,167]),o($VT,[2,187]),{22:$VD,28:$VE,31:$VF,33:112,39:$VG,45:289,57:$VH,59:104,79:97,100:109,101:$VI,102:$VJ,103:$VK,104:$VL,105:$VM,106:$VN,109:103,110:106,111:110,112:$Vm,113:$Vn,121:101,123:102,127:95,129:96,130:$VO,131:94,132:$VP,133:$VQ,135:93,141:92,143:91,148:90,155:89,159:88,163:87},{28:[1,291],65:290},{31:$Vm1},{44:[1,292]},{22:$VD,28:$VE,31:$VF,33:112,39:$VG,45:293,57:$VH,59:104,79:97,100:109,101:$VI,102:$VJ,103:$VK,104:$VL,105:$VM,106:$VN,109:103,110:106,111:110,112:$Vm,113:$Vn,121:101,123:102,127:95,129:96,130:$VO,131:94,132:$VP,133:$VQ,135:93,141:92,143:91,148:90,155:89,159:88,163:87},{40:[1,294]},{22:[1,295]},{24:[1,296],84:$V_},o($VT,[2,173]),o($VT,[2,174]),{24:[1,297],84:$V_},{2:$VB,5:$VC,7:68,8:69,10:70,11:71,12:72,13:73,14:74,15:75,16:76,17:77,18:78,19:$V1,25:$V2,28:$V3,29:[1,299],30:298,31:$V4,33:20,41:18,60:66,61:$V6,62:$V7,63:$V8,64:$V9,73:$Va,75:$Vb,76:$Vc,77:$Vd,88:$Ve,89:$Vf,90:$Vg,91:$Vh,92:$Vi,93:$Vj,94:$Vk,95:$Vl,112:$Vm,113:$Vn},{49:[1,300]},{28:[1,301],42:[1,302]},{31:$Vn1,58:303,87:208},{49:[1,304]},{24:[1,305],84:$V_},o([1,2,5,19,25,28,29,31,57,61,62,63,64,70,71,73,75,76,77,88,89,90,91,92,93,94,95,112,113],[2,110],{74:[1,306]}),{24:[1,307],84:$V_},o($Vo,[2,114]),{25:[1,308]},o([24,25],[2,120],{84:$V_}),{24:[1,309],84:$V_},{24:[1,310],84:$V_},{22:$VD,23:311,28:$VE,31:$VF,33:112,39:$VG,45:86,57:$VH,59:104,79:97,100:109,101:$VI,102:$VJ,103:$VK,104:$VL,105:$VM,106:$VN,109:103,110:106,111:110,112:$Vm,113:$Vn,121:101,123:102,127:95,129:96,130:$VO,131:94,132:$VP,133:$VQ,135:93,141:92,143:91,148:90,155:89,159:88,163:87},{22:$VD,23:312,28:$VE,31:$VF,33:112,39:$VG,45:86,57:$VH,59:104,79:97,100:109,101:$VI,102:$VJ,103:$VK,104:$VL,105:$VM,106:$VN,109:103,110:106,111:110,112:$Vm,113:$Vn,121:101,123:102,127:95,129:96,130:$VO,131:94,132:$VP,133:$VQ,135:93,141:92,143:91,148:90,155:89,159:88,163:87},{49:[1,313]},{25:[2,49]},{22:$VD,28:$VE,31:$VF,33:112,39:$VG,45:314,57:$VH,59:104,79:97,100:109,101:$VI,102:$VJ,103:$VK,104:$VL,105:$VM,106:$VN,109:103,110:106,111:110,112:$Vm,113:$Vn,121:101,123:102,127:95,129:96,130:$VO,131:94,132:$VP,133:$VQ,135:93,141:92,143:91,148:90,155:89,159:88,163:87},o($VT,[2,194]),o($Vo1,[2,201]),o($Vo1,[2,208]),{22:$VD,28:$VE,31:$VF,33:112,39:$VG,45:315,57:$VH,59:104,79:97,100:109,101:$VI,102:$VJ,103:$VK,104:$VL,105:$VM,106:$VN,109:103,110:106,111:110,112:$Vm,113:$Vn,121:101,123:102,127:95,129:96,130:$VO,131:94,132:$VP,133:$VQ,135:93,141:92,143:91,148:90,155:89,159:88,163:87},{29:[2,160]},o($Vp1,[2,156]),o($Vp1,[2,157]),{2:$VB,5:$VC,7:68,8:69,10:70,11:71,12:72,13:73,14:74,15:75,16:76,17:77,18:78,19:$V1,25:$V2,28:$V3,29:[1,317],30:316,31:$V4,33:20,41:18,60:66,61:$V6,62:$V7,63:$V8,64:$V9,73:$Va,75:$Vb,76:$Vc,77:$Vd,88:$Ve,89:$Vf,90:$Vg,91:$Vh,92:$Vi,93:$Vj,94:$Vk,95:$Vl,112:$Vm,113:$Vn},{28:[1,318]},{28:[1,319]},{24:[1,320]},o($Vq1,[2,191]),o($Vo,[2,97]),{29:[2,99],66:321,67:322,69:323,70:$Vt1,71:$Vu1},{22:$VD,28:$VE,31:$VF,33:112,39:$VG,45:326,46:[1,327],57:$VH,59:104,79:97,100:109,101:$VI,102:$VJ,103:$VK,104:$VL,105:$VM,106:$VN,109:103,110:106,111:110,112:$Vm,113:$Vn,121:101,123:102,127:95,129:96,130:$VO,131:94,132:$VP,133:$VQ,135:93,141:92,143:91,148:90,155:89,159:88,163:87},o($Vo,[2,46]),{44:[2,146]},{22:$VD,23:328,28:$VE,31:$VF,33:112,39:$VG,45:86,57:$VH,59:104,79:97,100:109,101:$VI,102:$VJ,103:$VK,104:$VL,105:$VM,106:$VN,109:103,110:106,111:110,112:$Vm,113:$Vn,121:101,123:102,127:95,129:96,130:$VO,131:94,132:$VP,133:$VQ,135:93,141:92,143:91,148:90,155:89,159:88,163:87},o($VT,[2,172]),o($VT,[2,175]),{29:[1,329]},o($Vo,[2,62]),{28:[1,330]},{2:$VB,5:$VC,7:68,8:69,10:70,11:71,12:72,13:73,14:74,15:75,16:76,17:77,18:78,19:$V1,25:$V2,28:$V3,29:[1,332],30:331,31:$V4,33:20,41:18,60:66,61:$V6,62:$V7,63:$V8,64:$V9,73:$Va,75:$Vb,76:$Vc,77:$Vd,88:$Ve,89:$Vf,90:$Vg,91:$Vh,92:$Vi,93:$Vj,94:$Vk,95:$Vl,112:$Vm,113:$Vn},{49:[1,333]},{24:[2,128]},o($Vs1,[2,130]),o($VR,[2,20],{25:[1,334]}),{2:$V0,6:335,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:$V1,25:$V2,28:$V3,31:$V4,33:20,41:18,57:$V5,61:$V6,62:$V7,63:$V8,64:$V9,73:$Va,75:$Vb,76:$Vc,77:$Vd,88:$Ve,89:$Vf,90:$Vg,91:$Vh,92:$Vi,93:$Vj,94:$Vk,95:$Vl,112:$Vm,113:$Vn},o($VR,[2,113],{25:[1,336]}),{22:$VD,23:270,28:$VE,31:$VF,33:112,39:$VG,45:86,57:$VH,59:104,78:337,79:97,100:109,101:$VI,102:$VJ,103:$VK,104:$VL,105:$VM,106:$VN,109:103,110:106,111:110,112:$Vm,113:$Vn,121:101,123:102,127:95,129:96,130:$VO,131:94,132:$VP,133:$VQ,135:93,141:92,143:91,148:90,155:89,159:88,163:87},{2:$V0,6:338,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:$V1,25:$V2,28:$V3,31:$V4,33:20,41:18,57:$V5,61:$V6,62:$V7,63:$V8,64:$V9,73:$Va,75:$Vb,76:$Vc,77:$Vd,88:$Ve,89:$Vf,90:$Vg,91:$Vh,92:$Vi,93:$Vj,94:$Vk,95:$Vl,112:$Vm,113:$Vn},{2:$V0,6:339,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:$V1,25:$V2,28:$V3,31:$V4,33:20,41:18,57:$V5,61:$V6,62:$V7,63:$V8,64:$V9,73:$Va,75:$Vb,76:$Vc,77:$Vd,88:$Ve,89:$Vf,90:$Vg,91:$Vh,92:$Vi,93:$Vj,94:$Vk,95:$Vl,112:$Vm,113:$Vn},{24:[1,340],84:$V_},{24:[1,341],84:$V_},{32:342,44:$Vs,50:51,51:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx,56:$Vy},o($VT,[2,277]),o($Vs1,[2,210]),{29:[1,343]},o($VT,[2,70]),{2:$VB,5:$VC,7:68,8:69,10:70,11:71,12:72,13:73,14:74,15:75,16:76,17:77,18:78,19:$V1,25:$V2,28:$V3,30:344,31:$V4,33:20,41:18,60:66,61:$V6,62:$V7,63:$V8,64:$V9,73:$Va,75:$Vb,76:$Vc,77:$Vd,88:$Ve,89:$Vf,90:$Vg,91:$Vh,92:$Vi,93:$Vj,94:$Vk,95:$Vl,112:$Vm,113:$Vn},{2:$VB,5:$VC,7:68,8:69,10:70,11:71,12:72,13:73,14:74,15:75,16:76,17:77,18:78,19:$V1,25:$V2,28:$V3,29:[1,346],30:345,31:$V4,33:20,41:18,60:66,61:$V6,62:$V7,63:$V8,64:$V9,73:$Va,75:$Vb,76:$Vc,77:$Vd,88:$Ve,89:$Vf,90:$Vg,91:$Vh,92:$Vi,93:$Vj,94:$Vk,95:$Vl,112:$Vm,113:$Vn},{28:[1,347]},{29:[1,348]},{29:[2,100]},{29:[2,103],67:349,69:323,70:$Vt1,71:$Vu1},{22:$VD,23:350,28:$VE,31:$VF,33:112,39:$VG,45:86,57:$VH,59:104,79:97,100:109,101:$VI,102:$VJ,103:$VK,104:$VL,105:$VM,106:$VN,109:103,110:106,111:110,112:$Vm,113:$Vn,121:101,123:102,127:95,129:96,130:$VO,131:94,132:$VP,133:$VQ,135:93,141:92,143:91,148:90,155:89,159:88,163:87},{42:[1,351]},o($Vo,[2,43]),{47:[1,352]},{24:[1,353],84:$V_},o($Vo,[2,58]),{2:$VB,5:$VC,7:68,8:69,10:70,11:71,12:72,13:73,14:74,15:75,16:76,17:77,18:78,19:$V1,25:$V2,28:$V3,29:[1,355],30:354,31:$V4,33:20,41:18,60:66,61:$V6,62:$V7,63:$V8,64:$V9,73:$Va,75:$Vb,76:$Vc,77:$Vd,88:$Ve,89:$Vf,90:$Vg,91:$Vh,92:$Vi,93:$Vj,94:$Vk,95:$Vl,112:$Vm,113:$Vn},{29:[1,356]},o($Vo,[2,63]),{28:[1,357]},o($Vo,[2,19]),o($Vo,[2,111]),o($Vo,[2,112]),{24:[1,358]},o($Vo,[2,116]),o($Vo,[2,118]),{2:$V0,6:359,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:$V1,25:$V2,28:$V3,31:$V4,33:20,41:18,57:$V5,61:$V6,62:$V7,63:$V8,64:$V9,73:$Va,75:$Vb,76:$Vc,77:$Vd,88:$Ve,89:$Vf,90:$Vg,91:$Vh,92:$Vi,93:$Vj,94:$Vk,95:$Vl,112:$Vm,113:$Vn},{2:$V0,6:360,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:$V1,25:$V2,28:$V3,31:$V4,33:20,41:18,57:$V5,61:$V6,62:$V7,63:$V8,64:$V9,73:$Va,75:$Vb,76:$Vc,77:$Vd,88:$Ve,89:$Vf,90:$Vg,91:$Vh,92:$Vi,93:$Vj,94:$Vk,95:$Vl,112:$Vm,113:$Vn},{25:[2,48]},o($VT,[2,66]),{29:[1,361]},{29:[1,362]},o($VT,[2,72]),{2:$VB,5:$VC,7:68,8:69,10:70,11:71,12:72,13:73,14:74,15:75,16:76,17:77,18:78,19:$V1,25:$V2,28:$V3,29:[1,364],30:363,31:$V4,33:20,41:18,60:66,61:$V6,62:$V7,63:$V8,64:$V9,73:$Va,75:$Vb,76:$Vc,77:$Vd,88:$Ve,89:$Vf,90:$Vg,91:$Vh,92:$Vi,93:$Vj,94:$Vk,95:$Vl,112:$Vm,113:$Vn},o($Vo,[2,98]),{29:[2,102]},{42:[1,365],84:$V_},o($VX,[2,106],{41:18,33:20,60:66,7:68,8:69,10:70,11:71,12:72,13:73,14:74,15:75,16:76,17:77,18:78,30:366,2:$VB,5:$VC,19:$V1,25:$V2,28:$V3,31:$V4,61:$V6,62:$V7,63:$V8,64:$V9,73:$Va,75:$Vb,76:$Vc,77:$Vd,88:$Ve,89:$Vf,90:$Vg,91:$Vh,92:$Vi,93:$Vj,94:$Vk,95:$Vl,112:$Vm,113:$Vn}),{22:[1,367]},o($Vo,[2,45]),{29:[1,368]},o($Vo,[2,64]),o($Vo,[2,59]),{2:$VB,5:$VC,7:68,8:69,10:70,11:71,12:72,13:73,14:74,15:75,16:76,17:77,18:78,19:$V1,25:$V2,28:$V3,29:[1,370],30:369,31:$V4,33:20,41:18,60:66,61:$V6,62:$V7,63:$V8,64:$V9,73:$Va,75:$Vb,76:$Vc,77:$Vd,88:$Ve,89:$Vf,90:$Vg,91:$Vh,92:$Vi,93:$Vj,94:$Vk,95:$Vl,112:$Vm,113:$Vn},{2:$V0,6:371,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:$V1,25:$V2,28:$V3,31:$V4,33:20,41:18,57:$V5,61:$V6,62:$V7,63:$V8,64:$V9,73:$Va,75:$Vb,76:$Vc,77:$Vd,88:$Ve,89:$Vf,90:$Vg,91:$Vh,92:$Vi,93:$Vj,94:$Vk,95:$Vl,112:$Vm,113:$Vn},o($Vo,[2,117]),o($Vo,[2,119]),o($VT,[2,67]),o($VT,[2,68]),{29:[1,372]},o($VT,[2,73]),o($VX,[2,104],{41:18,33:20,60:66,7:68,8:69,10:70,11:71,12:72,13:73,14:74,15:75,16:76,17:77,18:78,30:373,2:$VB,5:$VC,19:$V1,25:$V2,28:$V3,31:$V4,61:$V6,62:$V7,63:$V8,64:$V9,73:$Va,75:$Vb,76:$Vc,77:$Vd,88:$Ve,89:$Vf,90:$Vg,91:$Vh,92:$Vi,93:$Vj,94:$Vk,95:$Vl,112:$Vm,113:$Vn}),o($VX,[2,107]),{22:$VD,23:374,28:$VE,31:$VF,33:112,39:$VG,45:86,57:$VH,59:104,79:97,100:109,101:$VI,102:$VJ,103:$VK,104:$VL,105:$VM,106:$VN,109:103,110:106,111:110,112:$Vm,113:$Vn,121:101,123:102,127:95,129:96,130:$VO,131:94,132:$VP,133:$VQ,135:93,141:92,143:91,148:90,155:89,159:88,163:87},o($Vo,[2,60]),{29:[1,375]},o($Vo,[2,65]),o($Vo,[2,115]),o($VT,[2,69]),o($VX,[2,105]),{24:[1,376],84:$V_},o($Vo,[2,61]),o($Vo,[2,44])],
defaultActions: {2:[2,1],3:[2,2],43:[2,4],44:[2,5],276:[2,49],282:[2,160],294:[2,146],303:[2,128],322:[2,100],342:[2,48],349:[2,102]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    var lexicos = [];
    var sintacticos = [];
    var semanticos = [];
    var ast = [];
    var intermedia = require('./TS.js');
    var tab = new intermedia.TablaSimbolos();
    var Temp = new intermedia.temporal();
    var Label = new intermedia.bandera();
    var arr = new intermedia.Arreglos();
    var pos = 0;
    var C3D = '';
    var posS = 0;
    var posA = 2145000000;
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* ignore comment*/
break;
case 1:"*/"               /* ignore c-style comment*/
break;
case 2:/* skip whitespace */
break;
case 3:/* skip retorno de carro */
break;
case 4:/* skip salto linea */
break;
case 5:/* skip tabulacion */
break;
case 6:return 101
break;
case 7:return 102
break;
case 8:return 103
break;
case 9:return 93
break;
case 10:return 95
break;
case 11:return 92
break;
case 12:return 89
break;
case 13:return 90
break;
case 14:return 88
break;
case 15:return 91
break;
case 16:return 94
break;
case 17:return 47
break;
case 18:return 46
break;
case 19:return 19
break;
case 20:return 21
break;
case 21:return 62
break;
case 22:return 61
break;
case 23:return 71
break;
case 24:return 70
break;
case 25:return 64
break;
case 26:return 57
break;
case 27:return 73
break;
case 28:return 75
break;
case 29:return 76
break;
case 30:return 74
break;
case 31:return 77
break;
case 32:return 81
break;
case 33:return 80
break;
case 34:return 63
break;
case 35:return 118
break;
case 36:return 114
break;
case 37:return 115
break;
case 38:return 116
break;
case 39:return 117
break;
case 40:return 51
break;
case 41:return 52
break;
case 42:return 54
break;
case 43:return 53
break;
case 44:return 55
break;
case 45:return 56
break;
case 46:return 149
break;
case 47:return 150
break;
case 48:return 151
break;
case 49:return 152
break;
case 50:return 145
break;
case 51:return 144
break;
case 52:return 160
break;
case 53:return 156
break;
case 54:return 133
break;
case 55:return 112
break;
case 56:return 113
break;
case 57:return 138
break;
case 58:return 130
break;
case 59:return 132
break;
case 60:return 136
break;
case 61:return 137
break;
case 62:return 139
break;
case 63:return 31
break;
case 64:return 104;
break;
case 65: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 105; 
break;
case 66: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 106; 
break;
case 67:return 44
break;
case 68:return 25
break;
case 69:return 42
break;
case 70:return 84
break;
case 71:return 20
break;
case 72:return 22
break;
case 73:return 24
break;
case 74:return 39
break;
case 75:return 40
break;
case 76:return 28
break;
case 77:return 29
break;
case 78:return 164
break;
case 79:return 5;
break;
case 80:
                                   console.error('Error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column+';');
                                   lexicos.push('{\"token\":\"' + yy_.yytext + '\", \"linea\": \"' + yy_.yylloc.first_line + '\", \"columna\": \"' + yy_.yylloc.first_column+'\"}');
                                
break;
}
},
rules: [/^(?:\/\/.*)/,/^(?:\/\*[^"*\/"]*)/,/^(?:\s+)/,/^(?:\\r)/,/^(?:\\n)/,/^(?:\\t)/,/^(?:null\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:const\b)/,/^(?:let\b)/,/^(?:var\b)/,/^(?:number\b)/,/^(?:boolean\b)/,/^(?:string\b)/,/^(?:void\b)/,/^(?:type\b)/,/^(?:Array\b)/,/^(?:new\b)/,/^(?:console\b)/,/^(?:log\b)/,/^(?:break\b)/,/^(?:continue\b)/,/^(?:default\b)/,/^(?:case\b)/,/^(?:switch\b)/,/^(?:function\b)/,/^(?:if\b)/,/^(?:Do\b)/,/^(?:While\b)/,/^(?:else\b)/,/^(?:for\b)/,/^(?:of\b)/,/^(?:in\b)/,/^(?:return\b)/,/^(?:Length\b)/,/^(?:CharAt\b)/,/^(?:ToLowerCase\b)/,/^(?:ToUpperCase\b)/,/^(?:Concat\b)/,/^(?:\+=)/,/^(?:-=)/,/^(?:\/=)/,/^(?:\*=)/,/^(?:\^=)/,/^(?:%=)/,/^(?:==)/,/^(?:!=)/,/^(?:>=)/,/^(?:<=)/,/^(?:>)/,/^(?:<)/,/^(?:\|\|)/,/^(?:&&)/,/^(?:!)/,/^(?:\+\+)/,/^(?:--)/,/^(?:\*\*)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:[a-zA-Z_\$][a-zA-Z0-9_\$]*)/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:"[^\"]*")/,/^(?:'[^\']*')/,/^(?:=)/,/^(?:;)/,/^(?::)/,/^(?:,)/,/^(?:\.)/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?:\{)/,/^(?:\})/,/^(?:\?)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = WE_C3D;
exports.Parser = WE_C3D.Parser;
exports.parse = function () { return WE_C3D.parse.apply(WE_C3D, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}